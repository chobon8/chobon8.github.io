<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux磁盘坏道检测和修复</title>
      <link href="/posts/705c9884/"/>
      <url>/posts/705c9884/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在Debian 系统中，可以使用 <code>badblocks</code> 命令检测和修复磁盘坏道，检测时需在非挂载的、单用户模式下运行，并且需要root 权限。 对于物理坏道，是永久性损伤，只能通过 <code>badblocks</code> 命令进行屏蔽，避免数据读写。 对于逻辑坏道，通常通过格式化来修复，或使用 <code>fsck</code> 命令检查和修复文件系统错误。** **</p><h2 id="识别坏道类型"><a href="#识别坏道类型" class="headerlink" title="识别坏道类型"></a>识别坏道类型</h2><ul><li><p>​<strong>物理坏道</strong>​：</p><p>由磁盘物理损伤引起，例如磁头划伤，通常是不可修复的。** **</p></li><li><p>​<strong>逻辑坏道</strong>​：</p><p>由软件或文件系统错误引起，通常可以通过格式化或修复文件系统来解决</p></li></ul><h2 id="检测磁盘坏道"><a href="#检测磁盘坏道" class="headerlink" title="检测磁盘坏道"></a>检测磁盘坏道</h2><ol><li>​<strong>卸载目标分区</strong>​：在检测前，必须卸载要检测的分区，以确保数据安全，避免检测过程中的读写操作造成进一步损坏。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /dev/sdXn # 将 sdXn 替换为你的分区名称，例如 /dev/sda1</span><br></pre></td></tr></table></figure><ol start="2"><li>执行 <code>badblocks</code> 命令进行只读检测：: 使用 <code>-v</code> (verbose) 和 <code>-n</code> (non-destructive read-test) 参数，执行只读检测，检查出存在问题的块。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo badblocks -v -n /dev/sdXn</span><br></pre></td></tr></table></figure><ol start="3"><li><p>执行 <code>badblocks</code> 命令进行读写检测（<em><strong>谨慎使用</strong></em>）：: 如果确定要对整个磁盘进行彻底检测，可以使用 <code>-w</code> 参数进行读写测试，但这会擦除磁盘上的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo badblocks -w -s -v -o badblocks.txt /dev/sdXn</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>-w</code>: 进行写测试，这会擦除磁盘数据。</li><li><code>-s</code>: 显示进度。</li><li><code>-v</code>: 显示详细信息。</li><li><code>-o badblocks.txt</code>: 将检测到的坏块列表保存到badblocks.txt 文件。</li></ul><h2 id="修复坏道"><a href="#修复坏道" class="headerlink" title="修复坏道"></a>修复坏道</h2><p>如果不介意全部擦除就可以用上述命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo badblocks -w -s -v -o badblocks.txt /dev/sdXn</span><br></pre></td></tr></table></figure><p>否则就先备份数据，再局部修复</p><ol><li>先用dd命令对坏道数据进行备份</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/vda skip=417334708 of=/tmp/417334708-417334711.dat count=4</span><br></pre></td></tr></table></figure><ol start="2"><li>再对坏道读写修复</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo badblocks -s -w /dev/vda 417334711 417334708</span><br></pre></td></tr></table></figure><ol start="3"><li>检测下坏道是否已经修复</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo badblocks -w -s -v -o badblocks.txt /dev/vda</span><br></pre></td></tr></table></figure><ol start="4"><li>如果未检测出坏道，可以对备份数据进行回写</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/tmp/417334708-417334711.dat of=/dev/vda seek=417334708 count=4</span><br></pre></td></tr></table></figure><ol start="5"><li>如果坏道经过读写修复依然存在，那么只能通过屏蔽，使系统不再使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs -l badblocks.txt /dev/vda</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxmox上LXC磁盘缩小</title>
      <link href="/posts/dfeb25f1/"/>
      <url>/posts/dfeb25f1/</url>
      
        <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><blockquote><p>查看lxc容器列表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pct list</span><br></pre></td></tr></table></figure><blockquote><p>停止lxc容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pct stop 100</span><br></pre></td></tr></table></figure><blockquote><p>执行容器系统文件检查</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e2fsck -fy /var/lib/vz/images/100/vm-100-disk-0.raw</span><br></pre></td></tr></table></figure><blockquote><p>调整文件系统</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize2fs /var/lib/vz/images/100/vm-100-disk-0.raw 100G</span><br></pre></td></tr></table></figure><blockquote><p>修改lxc容器配置，设置磁盘大小为调整后大小</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rootfs: local:100/vm-100-disk-0.raw,size=100G</span></span><br><span class="line">vi /etc/pve/lxc/100.conf</span><br></pre></td></tr></table></figure><blockquote><p>启动lxc容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pct start 100</span><br></pre></td></tr></table></figure><blockquote><p>进入lxc容器，查看磁盘信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pct enter 100</span><br><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Proxmox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Proxmox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RKE搭建Kubernetes集群环境</title>
      <link href="/posts/a594add/"/>
      <url>/posts/a594add/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于rancher的一个<a href="https://github.com/rancher/rancher/issues/24910">bug</a>，导致无法通过docker形式安装，于是采用RKE方式。查看rancher的文档，了解到RKE相对比较简单</p><p><em><strong>注意</strong></em><br><em><strong>由于PVE的LXC不支持k8s，最终采用VM</strong></em></p><h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><p>操作系统：Debian***</p><p>软件环境</p><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td><strong>docker</strong></td><td><strong>20.10.12</strong></td></tr><tr><td><strong>操作系统</strong></td><td><strong>Debian</strong></td></tr><tr><td><strong>Kubernetes</strong></td><td><strong>v1.22.6</strong></td></tr></tbody></table><p>服务器</p><table><thead><tr><th>角色</th><th>ip</th><th>role</th></tr></thead><tbody><tr><td>host</td><td>192.168.1.200</td><td>controlplane、rancher、rke</td></tr><tr><td>master</td><td>192.168.1.201</td><td>controlplane、etc</td></tr><tr><td>worker1</td><td>192.168.1.202</td><td>worker</td></tr><tr><td>worker2</td><td>192.168.1.203</td><td>worker</td></tr><tr><td>worker3</td><td>192.168.1.204</td><td>worker</td></tr></tbody></table><blockquote><p>系统软件更新</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">sudo</span> apt-get update -y</span><br><span class="line">...</span><br><span class="line">debian@debian:~# <span class="built_in">sudo</span> apt-get upgrade -y</span><br></pre></td></tr></table></figure><blockquote><p>安装基础软件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">sudo</span> apt-get install \ </span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg2 \</span><br><span class="line">    software-properties-common -y</span><br></pre></td></tr></table></figure><blockquote><p>添加 Docker GPG 密钥</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">sudo</span> curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | <span class="built_in">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure><blockquote><p>设置docker稳定版仓库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">sudo</span> add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian \</span></span><br><span class="line"><span class="string">    <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>安装docker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">sudo</span> apt-get install -y docker-ce</span><br><span class="line">debian@debian:~# <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line">debian@debian:~# <span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure><blockquote><p>创建用户、登录文件夹、文件夹权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# useradd -g docker docker</span><br><span class="line"></span><br><span class="line">debian@debian:~# <span class="built_in">mkdir</span> /home/docker</span><br><span class="line">debian@debian:~# <span class="built_in">chown</span> -R docker /home/docker</span><br><span class="line">debian@debian:~# passwd docker <span class="comment">#设置docker密码</span></span><br></pre></td></tr></table></figure><h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><p>在一台可以访问所有机器的设备上创建</p><blockquote><p>k8s集群设备ssh免密登录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# ssh-keygen -t rsa</span><br><span class="line">debian@debian:~# ssh-copy-id docker@192.168.1.201</span><br><span class="line">debian@debian:~# ssh-copy-id docker@192.168.1.202</span><br><span class="line">debian@debian:~# ssh-copy-id docker@192.168.1.203</span><br><span class="line">debian@debian:~# ssh-copy-id docker@192.168.1.204</span><br></pre></td></tr></table></figure><h2 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h2><blockquote><p>下载RKE工具</p></blockquote><p>本机是debian，下载adm64版本即可，<a href="https://github.com/rancher/rke/releases/download/v1.3.7/rke_linux-amd64">v1.3.7</a>。</p><blockquote><p>执行权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">chmod</span> +x rke_linux-amd64</span><br></pre></td></tr></table></figure><blockquote><p>配置kubernetes集群</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# ./rke_linux-amd64 config</span><br></pre></td></tr></table></figure><p>配置好以后会生成一个yml文件，<code>cluster.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">ls</span></span><br><span class="line">cluster.yml rke_linux-amd64</span><br></pre></td></tr></table></figure><blockquote><p>配置文件内容</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you intended to deploy Kubernetes in an air-gapped environment,</span></span><br><span class="line"><span class="comment"># please consult the documentation on how to configure custom RKE images.</span></span><br><span class="line"><span class="attr">nodes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.201</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">&quot;22&quot;</span></span><br><span class="line">  <span class="attr">internal_address:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">role:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">controlplane</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">etcd</span></span><br><span class="line">  <span class="attr">hostname_override:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">docker_socket:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">  <span class="attr">ssh_key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_key_path:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="attr">ssh_cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_cert_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">taints:</span> []</span><br><span class="line"><span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.202</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">&quot;22&quot;</span></span><br><span class="line">  <span class="attr">internal_address:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">role:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">worker</span></span><br><span class="line">  <span class="attr">hostname_override:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">docker_socket:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">  <span class="attr">ssh_key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_key_path:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="attr">ssh_cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_cert_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">taints:</span> []</span><br><span class="line"><span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.203</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">&quot;22&quot;</span></span><br><span class="line">  <span class="attr">internal_address:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">role:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">worker</span></span><br><span class="line">  <span class="attr">hostname_override:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">docker_socket:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">  <span class="attr">ssh_key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_key_path:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="attr">ssh_cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_cert_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">taints:</span> []</span><br><span class="line"><span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.204</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">&quot;22&quot;</span></span><br><span class="line">  <span class="attr">internal_address:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">role:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">worker</span></span><br><span class="line">  <span class="attr">hostname_override:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">docker_socket:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">  <span class="attr">ssh_key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_key_path:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="attr">ssh_cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_cert_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">labels:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">taints:</span> []</span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">extra_binds:</span> []</span><br><span class="line">    <span class="attr">extra_env:</span> []</span><br><span class="line">    <span class="attr">win_extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">win_extra_binds:</span> []</span><br><span class="line">    <span class="attr">win_extra_env:</span> []</span><br><span class="line">    <span class="attr">external_urls:</span> []</span><br><span class="line">    <span class="attr">ca_cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">uid:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">gid:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">snapshot:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">retention:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">creation:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">backup_config:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">kube-api:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">extra_binds:</span> []</span><br><span class="line">    <span class="attr">extra_env:</span> []</span><br><span class="line">    <span class="attr">win_extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">win_extra_binds:</span> []</span><br><span class="line">    <span class="attr">win_extra_env:</span> []</span><br><span class="line">    <span class="attr">service_cluster_ip_range:</span> <span class="number">10.43</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">    <span class="attr">service_node_port_range:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">pod_security_policy:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">always_pull_images:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">secrets_encryption_config:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">audit_log:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">admission_configuration:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">event_rate_limit:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">kube-controller:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">extra_binds:</span> []</span><br><span class="line">    <span class="attr">extra_env:</span> []</span><br><span class="line">    <span class="attr">win_extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">win_extra_binds:</span> []</span><br><span class="line">    <span class="attr">win_extra_env:</span> []</span><br><span class="line">    <span class="attr">cluster_cidr:</span> <span class="number">10.42</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">    <span class="attr">service_cluster_ip_range:</span> <span class="number">10.43</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">  <span class="attr">scheduler:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">extra_binds:</span> []</span><br><span class="line">    <span class="attr">extra_env:</span> []</span><br><span class="line">    <span class="attr">win_extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">win_extra_binds:</span> []</span><br><span class="line">    <span class="attr">win_extra_env:</span> []</span><br><span class="line">  <span class="attr">kubelet:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">extra_binds:</span> []</span><br><span class="line">    <span class="attr">extra_env:</span> []</span><br><span class="line">    <span class="attr">win_extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">win_extra_binds:</span> []</span><br><span class="line">    <span class="attr">win_extra_env:</span> []</span><br><span class="line">    <span class="attr">cluster_domain:</span> <span class="string">cluster.local</span></span><br><span class="line">    <span class="attr">infra_container_image:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">cluster_dns_server:</span> <span class="number">10.43</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">fail_swap_on:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">generate_serving_certificate:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">kubeproxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">extra_binds:</span> []</span><br><span class="line">    <span class="attr">extra_env:</span> []</span><br><span class="line">    <span class="attr">win_extra_args:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">win_extra_binds:</span> []</span><br><span class="line">    <span class="attr">win_extra_env:</span> []</span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">plugin:</span> <span class="string">canal</span></span><br><span class="line">  <span class="attr">options:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">mtu:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">node_selector:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">update_strategy:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">tolerations:</span> []</span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">x509</span></span><br><span class="line">  <span class="attr">sans:</span> []</span><br><span class="line">  <span class="attr">webhook:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">addons:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">addons_include:</span> []</span><br><span class="line"><span class="attr">system_images:</span></span><br><span class="line">  <span class="attr">etcd:</span> <span class="string">rancher/mirrored-coreos-etcd:v3.5.2</span></span><br><span class="line">  <span class="attr">alpine:</span> <span class="string">rancher/rke-tools:v0.1.79</span></span><br><span class="line">  <span class="attr">nginx_proxy:</span> <span class="string">rancher/rke-tools:v0.1.79</span></span><br><span class="line">  <span class="attr">cert_downloader:</span> <span class="string">rancher/rke-tools:v0.1.79</span></span><br><span class="line">  <span class="attr">kubernetes_services_sidecar:</span> <span class="string">rancher/rke-tools:v0.1.79</span></span><br><span class="line">  <span class="attr">kubedns:</span> <span class="string">rancher/mirrored-k8s-dns-node-cache:1.21.1</span></span><br><span class="line">  <span class="attr">dnsmasq:</span> <span class="string">rancher/mirrored-k8s-dns-dnsmasq-nanny:1.21.1</span></span><br><span class="line">  <span class="attr">kubedns_sidecar:</span> <span class="string">rancher/mirrored-k8s-dns-sidecar:1.21.1</span></span><br><span class="line">  <span class="attr">kubedns_autoscaler:</span> <span class="string">rancher/mirrored-cluster-proportional-autoscaler:1.8.5</span></span><br><span class="line">  <span class="attr">coredns:</span> <span class="string">coredns/coredns:1.9.0</span></span><br><span class="line">  <span class="attr">coredns_autoscaler:</span> <span class="string">rancher/mirrored-cluster-proportional-autoscaler:1.8.5</span></span><br><span class="line">  <span class="attr">nodelocal:</span> <span class="string">rancher/mirrored-k8s-dns-node-cache:1.21.1</span></span><br><span class="line">  <span class="attr">kubernetes:</span> <span class="string">rancher/hyperkube:v1.23.4-rancher1</span></span><br><span class="line">  <span class="attr">flannel:</span> <span class="string">rancher/mirrored-coreos-flannel:v0.15.1</span></span><br><span class="line">  <span class="attr">flannel_cni:</span> <span class="string">rancher/flannel-cni:v0.3.0-rancher6</span></span><br><span class="line">  <span class="attr">calico_node:</span> <span class="string">rancher/mirrored-calico-node:v3.22.0</span></span><br><span class="line">  <span class="attr">calico_cni:</span> <span class="string">rancher/mirrored-calico-cni:v3.22.0</span></span><br><span class="line">  <span class="attr">calico_controllers:</span> <span class="string">rancher/mirrored-calico-kube-controllers:v3.22.0</span></span><br><span class="line">  <span class="attr">calico_ctl:</span> <span class="string">rancher/mirrored-calico-ctl:v3.22.0</span></span><br><span class="line">  <span class="attr">calico_flexvol:</span> <span class="string">rancher/mirrored-calico-pod2daemon-flexvol:v3.22.0</span></span><br><span class="line">  <span class="attr">canal_node:</span> <span class="string">rancher/mirrored-calico-node:v3.22.0</span></span><br><span class="line">  <span class="attr">canal_cni:</span> <span class="string">rancher/mirrored-calico-cni:v3.22.0</span></span><br><span class="line">  <span class="attr">canal_controllers:</span> <span class="string">rancher/mirrored-calico-kube-controllers:v3.22.0</span></span><br><span class="line">  <span class="attr">canal_flannel:</span> <span class="string">rancher/mirrored-coreos-flannel:v0.15.1</span></span><br><span class="line">  <span class="attr">canal_flexvol:</span> <span class="string">rancher/mirrored-calico-pod2daemon-flexvol:v3.22.0</span></span><br><span class="line">  <span class="attr">weave_node:</span> <span class="string">weaveworks/weave-kube:2.8.1</span></span><br><span class="line">  <span class="attr">weave_cni:</span> <span class="string">weaveworks/weave-npc:2.8.1</span></span><br><span class="line">  <span class="attr">pod_infra_container:</span> <span class="string">rancher/mirrored-pause:3.6</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="string">rancher/nginx-ingress-controller:nginx-1.1.1-rancher1</span></span><br><span class="line">  <span class="attr">ingress_backend:</span> <span class="string">rancher/mirrored-nginx-ingress-controller-defaultbackend:1.5-rancher1</span></span><br><span class="line">  <span class="attr">ingress_webhook:</span> <span class="string">rancher/mirrored-ingress-nginx-kube-webhook-certgen:v1.1.1</span></span><br><span class="line">  <span class="attr">metrics_server:</span> <span class="string">rancher/mirrored-metrics-server:v0.6.1</span></span><br><span class="line">  <span class="attr">windows_pod_infra_container:</span> <span class="string">rancher/kubelet-pause:v0.1.6</span></span><br><span class="line">  <span class="attr">aci_cni_deploy_container:</span> <span class="string">noiro/cnideploy:5.1.1.0.1ae238a</span></span><br><span class="line">  <span class="attr">aci_host_container:</span> <span class="string">noiro/aci-containers-host:5.1.1.0.1ae238a</span></span><br><span class="line">  <span class="attr">aci_opflex_container:</span> <span class="string">noiro/opflex:5.1.1.0.1ae238a</span></span><br><span class="line">  <span class="attr">aci_mcast_container:</span> <span class="string">noiro/opflex:5.1.1.0.1ae238a</span></span><br><span class="line">  <span class="attr">aci_ovs_container:</span> <span class="string">noiro/openvswitch:5.1.1.0.1ae238a</span></span><br><span class="line">  <span class="attr">aci_controller_container:</span> <span class="string">noiro/aci-containers-controller:5.1.1.0.1ae238a</span></span><br><span class="line">  <span class="attr">aci_gbp_server_container:</span> <span class="string">noiro/gbp-server:5.1.1.0.1ae238a</span></span><br><span class="line">  <span class="attr">aci_opflex_server_container:</span> <span class="string">noiro/opflex-server:5.1.1.0.1ae238a</span></span><br><span class="line"><span class="attr">ssh_key_path:</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="attr">ssh_cert_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">ssh_agent_auth:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">authorization:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">rbac</span></span><br><span class="line">  <span class="attr">options:</span> &#123;&#125;</span><br><span class="line"><span class="attr">ignore_docker_version:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">enable_cri_dockerd:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">kubernetes_version:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">private_registries:</span> []</span><br><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">options:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">node_selector:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">extra_args:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">dns_policy:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">extra_envs:</span> []</span><br><span class="line">  <span class="attr">extra_volumes:</span> []</span><br><span class="line">  <span class="attr">extra_volume_mounts:</span> []</span><br><span class="line">  <span class="attr">update_strategy:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">http_port:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">https_port:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">tolerations:</span> []</span><br><span class="line">  <span class="attr">default_backend:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">default_http_backend_priority_class_name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">nginx_ingress_controller_priority_class_name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">default_ingress_class:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">cluster_name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">cloud_provider:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">prefix_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">win_prefix_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">addon_job_timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">bastion_host:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_key:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_key_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_cert:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ssh_cert_path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">ignore_proxy_env_vars:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">monitoring:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">options:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">node_selector:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">update_strategy:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">tolerations:</span> []</span><br><span class="line">  <span class="attr">metrics_server_priority_class_name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">restore:</span></span><br><span class="line">  <span class="attr">restore:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">snapshot_name:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">rotate_encryption_key:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">dns:</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><blockquote><p>启动安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# ./rke_linux-amd64 up</span><br></pre></td></tr></table></figure><blockquote><p>等待执行完</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# INFO[0465] Finished building Kubernetes cluster successfully </span><br></pre></td></tr></table></figure><h2 id="安装kubectl"><a href="#安装kubectl" class="headerlink" title="安装kubectl"></a>安装kubectl</h2><blockquote><p>下载kubernetes签名秘钥</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </span><br></pre></td></tr></table></figure><blockquote><p>添加kubernetes apt仓库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><blockquote><p>更新apt包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">sudo</span> apt-get update -y</span><br></pre></td></tr></table></figure><blockquote><p>安装kubectl</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">sudo</span> apt-get install -y kubectl</span><br></pre></td></tr></table></figure><blockquote><p>kubectl设置集群</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# <span class="built_in">mkdir</span> ~/.kube</span><br><span class="line">debian@debian:~# <span class="built_in">cp</span> kube_config_cluster.yml ~/.kube/config</span><br></pre></td></tr></table></figure><blockquote><p>查看k8s节点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# kubectl get nodes</span><br><span class="line">NAME            STATUS   ROLES               AGE   VERSION</span><br><span class="line">192.168.1.201   Ready    controlplane,etcd   31m   v1.23.4</span><br><span class="line">192.168.1.202   Ready    worker              31m   v1.23.4</span><br><span class="line">192.168.1.203   Ready    worker              31m   v1.23.4</span><br><span class="line">192.168.1.204   Ready    worker              31m   v1.23.4</span><br></pre></td></tr></table></figure><h2 id="移除k8s集群"><a href="#移除k8s集群" class="headerlink" title="移除k8s集群"></a>移除k8s集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debian@debian:~# ./rke_linux-amd64 remove</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> Rancher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装Docker</title>
      <link href="/posts/bc681fc7/"/>
      <url>/posts/bc681fc7/</url>
      
        <content type="html"><![CDATA[<h2 id="其他系统版本"><a href="#其他系统版本" class="headerlink" title="其他系统版本"></a>其他系统版本</h2><p><a href="../d4c19f1a">CentOS安装Docker</a></p><p>不同版本只是安装包命令不同而已</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>更新系统包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装需要安装的工具包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &amp;&amp; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -</span><br></pre></td></tr></table></figure><p>配置apt源安装docker源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; &amp;&amp; sudo apt-get update </span><br></pre></td></tr></table></figure><p>安装Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>创建daemon配置文件<code>/etc/docker/daemon.json</code>来使用加速器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo mkdir -p /etc/docker</span><br><span class="line">root@ubuntu:~# sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://lo831hm4.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">root@ubuntu:~# sudo systemctl daemon-reload</span><br><span class="line">root@ubuntu:~# sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2ray更新gRPC</title>
      <link href="/posts/da975915/"/>
      <url>/posts/da975915/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>V2ray开始支持gRPC作为底层传输方式，各位大佬已经上车了，于是打算尝尝鲜。<br>由于墙外VPS是Ubuntu 14.04，Nginx版本低于1.13.10，没法使用gRPC。升级Nginx看<a href="../ca8752b5">上一篇</a></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="V2ray服务端配置"><a href="#V2ray服务端配置" class="headerlink" title="V2ray服务端配置"></a>V2ray服务端配置</h3><p>查阅V2ray的<a href="https://www.v2fly.org/config/transport/grpc.html#grpcobject">gRpc配置</a>。</p><p>关闭V2ray服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# service v2ray stop</span><br></pre></td></tr></table></figure><p>修改V2ray配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;712df412-9afa-49d8-8309-f969313de504&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span><span class="string">&quot;grpc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;grpcSettings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;serviceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#gRpcService#&quot;</span> <span class="comment">//nginx转发的gRPC服务名</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>启动V2ray</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# service v2ray start</span><br></pre></td></tr></table></figure><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>Nginx原来的配置不变，修改<code>location</code>节点下</p><p>关闭Nginx服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# service nginx stop</span><br></pre></td></tr></table></figure><p>修改Nginx配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #常规配置</span><br><span class="line">    location /GunService &#123;</span><br><span class="line">        #gRpc的其他配置</span><br><span class="line">        grpc_pass grpc://127.0.0.1:12345</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Nginx服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# service nginx start</span><br></pre></td></tr></table></figure><h3 id="V2ray客户端配置"><a href="#V2ray客户端配置" class="headerlink" title="V2ray客户端配置"></a>V2ray客户端配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outbound&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;grpc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span><span class="string">&quot;tls&quot;</span><span class="punctuation">,</span> <span class="comment">//如果连接采用https，这里需要用tls，以及配置tlsSettings</span></span><br><span class="line">            <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;allowInsecure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;serverName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#Domain#&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tcpSettings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;kcpSettings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;grpcSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;serviceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#gRpcService#&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;multiMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;httpSettings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> V2ray </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04升级Nginx</title>
      <link href="/posts/ca8752b5/"/>
      <url>/posts/ca8752b5/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Ubuntu直接用<code>apt-get install nginx</code>命令更新只能升级到1.10.3版本，无法使用Http2和Grpc。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>先在<code>/etc/apt/sources.list</code>添加下面两行</p><blockquote><p>Debian</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://nginx.org/packages/debian/ squeeze nginx</span><br><span class="line">deb-src http://nginx.org/packages/debian/ squeeze nginx</span><br></pre></td></tr></table></figure><blockquote><p>Ubuntu</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ lucid nginx</span><br><span class="line">deb-src http://nginx.org/packages/ubuntu/ lucid nginx</span><br></pre></td></tr></table></figure><p>然后 apt-get install nginx 就可以</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Page Cache占用回收</title>
      <link href="/posts/5386e490/"/>
      <url>/posts/5386e490/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>Linux系统经常内存占用到90%，查看后发现是Page Cache占用绝大多，遂查看Page Cache在Linux系统内是啥用。原来是Linux读取文件时，用于缓存文件的逻辑内容，从而加快对磁盘上的映像和数据的访问。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>仅清除页面缓存（PageCache）<ul><li><code>echo 1 &gt; /proc/sys/vm/drop_caches</code></li></ul></li><li>清除目录项和inode<ul><li><code>echo 2 &gt; /proc/sys/vm/drop_caches</code></li></ul></li><li>清除页面缓存，目录项和inode<ul><li><code>echo 3 &gt; /proc/sys/vm/drop_caches</code></li></ul></li></ul><p>简单粗暴直接采用<code>echo 3 &gt; /proc/sys/vm/drop_caches</code>。</p><p>可以写个定时清除缓存的脚本，当然想要获得更好的体验就需要做更多的设置。</p><blockquote><p>创建文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#clearcache.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo 3 &gt; /proc/sys/vm/drop_caches&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>设置文件权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chmod 755 clearcache.sh</span></span><br></pre></td></tr></table></figure><blockquote><p>设置定时任务</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab -e</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0  2  *  *  *  /path/to/clearcache.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dmesg命令</title>
      <link href="/posts/6ea30e9a/"/>
      <url>/posts/6ea30e9a/</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>Linux dmesg (英文全称：display message) 用于显示开机信息。<br>kernel会将开机信息存储在ring buffer中。若是在开机时来不及查看信息，可利用dmesg命令来查看。开机信息会保存在&#x2F;var&#x2F;log目录下，名称为dmesg的中文件中。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>dmesg [-cn] [-s &lt;缓存区大小&gt;]</p></blockquote><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><code>-c</code> <ul><li>显示信息后，清楚ring buffer中的内容。</li></ul></li><li><code>-s &lt;缓存区大小&gt;</code><ul><li>预设置为8196，刚好等于ring buffer的大小。</li></ul></li><li><code>-n</code><ul><li>设置记录信息的层级。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxmox安装</title>
      <link href="/posts/359bc848/"/>
      <url>/posts/359bc848/</url>
      
        <content type="html"><![CDATA[<h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><p>USB启动盘安装<a href="https://pve.proxmox.com/wiki/Prepare_Installation_Media#installation_prepare_media">文档</a></p><h3 id="下载官方安装源"><a href="#下载官方安装源" class="headerlink" title="下载官方安装源"></a>下载官方安装源</h3><p><a href="https://www.proxmox.com/en/downloads">官方ISO源</a></p><p>下载<code>Proxmox VE 7.1 ISO Installer</code></p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_ISO.png" alt="proxmox-ve_7.1-1"></p><h3 id="制作USB启动盘"><a href="#制作USB启动盘" class="headerlink" title="制作USB启动盘"></a>制作USB启动盘</h3><p>下载官方推荐的USB启动盘安装工具<code>Etcher</code></p><p><img src="https://img.chobon.top/blog/Proxmox/Etcher.jpg" alt="Etcher"></p><p>插入USB，启动USB安装工具，选择ISO，等待安装结束</p><h3 id="开启BIOS虚拟化功能"><a href="#开启BIOS虚拟化功能" class="headerlink" title="开启BIOS虚拟化功能"></a>开启BIOS虚拟化功能</h3><p>具体操作参考<a href=""></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>插入USB启动盘，重启计算机，选择启动设备为刚插入的U盘，出现选择安装界面，选择<code>Install Proxmox VE</code></p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_Setup.png" alt="Proxmox_Setup"></p><p>选择安装磁盘，最好是NVMe接口的磁盘，为后续直通SATA Controller更简便</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_Setup_Disk.png" alt="Proxmox_Setup_Disk"></p><p>设置国家、时区和键盘布局</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_Setup_Country.png" alt="Proxmox_Setup_Country"></p><p>设置密码和邮箱</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_Setup_Password.png" alt="Proxmox_Setup_Password"></p><p>设置网络，由于我是通过PVE内部软路由上网，所以我设置的是路由内IP地址</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_Setup_Ip.png" alt="Proxmox_Setup_Ip"></p><p>接下来就可以等待安装结束，重启计算机，在同个网段或者连接网卡，输入刚才设置的ip地址，即可显示Proxmox的登陆界面</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_Login.png" alt="Proxmox_Login"></p><p>登录时，语言选择Chinese (Simplified)，登录成功后即可显示Proxmox Dashboard界面</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_Dashboard.png" alt="Proxmox_Dashboard"></p><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>创建虚拟机</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM.png" alt="Proxmox_CreateVM"></p><p>选择<code>使用CD/DVD光盘镜像文件（ISO）</code>或者<code>不使用任何介质</code>，这里是使用已经上传的OMV镜像。客户操作系统可以根据安装的系统选择，这里是Linux，版本也不用作修改</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM_ISO.png" alt="Proxmox_CreateVM_ISO"></p><p>设置根据所安装的系统自定义配置，这里采用默认，不修改</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM_System.png" alt="Proxmox_CreateVM_System"></p><p>设置根据所安装的系统自定义配置，这里采用默认32G磁盘空间，不修改</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM_Disk.png" alt="Proxmox_CreateVM_Disk"></p><p>设置根据所安装的系统自定义配置，这里采用默认1核，不修改</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM_Cpu.png" alt="Proxmox_CreateVM_Cpu"></p><p>设置根据所安装的系统自定义配置，这里采用默认2G内存，不修改</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM_Memory.png" alt="Proxmox_CreateVM_Memory"></p><p>设置根据所安装的系统自定义配置，这里采用默认网桥vmbr0，不修改</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM_Network.png" alt="Proxmox_CreateVM_Network"></p><p>点击完成，手动点击启动即可</p><p><img src="https://img.chobon.top/blog/Proxmox/Proxmox_CreateVM_Dashboard.png" alt="Proxmox_CreateVM_Dashboard"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> KVM </category>
          
          <category> Proxmox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> KVM </tag>
            
            <tag> Proxmox </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxmox更新</title>
      <link href="/posts/269386f3/"/>
      <url>/posts/269386f3/</url>
      
        <content type="html"><![CDATA[<h2 id="修改官方源"><a href="#修改官方源" class="headerlink" title="修改官方源"></a>修改官方源</h2><blockquote><p>编辑<code>/etc/apt/sources.list</code></p></blockquote><p>删掉原来的源地址，添加国内源地址</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security/ bullseye-security main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main non-free contrib</span><br></pre></td></tr></table></figure><h2 id="移出企业源"><a href="#移出企业源" class="headerlink" title="移出企业源"></a>移出企业源</h2><blockquote><p>编辑&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-enterprise.list</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise</span><br></pre></td></tr></table></figure><h2 id="更新命令"><a href="#更新命令" class="headerlink" title="更新命令"></a>更新命令</h2><p>ssh连接pve执行命令或者在登录pve后台更新菜单里操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update -y &amp; apt dist-upgrade -y</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> KVM </category>
          
          <category> Proxmox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> KVM </tag>
            
            <tag> Proxmox </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core MVC 5.x初始化源码解读（一）</title>
      <link href="/posts/226186c6/"/>
      <url>/posts/226186c6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初始化比较复杂，文章拆分成3部分Host、WebHost、Startup，逐一分析</p><h2 id="对象概念解释"><a href="#对象概念解释" class="headerlink" title="对象概念解释"></a>对象概念解释</h2><blockquote><p>接口定义</p></blockquote><ul><li><p><strong>IHost</strong> : <code>主机抽象</code></p><ul><li><strong>IServiceProvider</strong> : <code>对象服务提供器</code></li><li><strong>StartAsync</strong> : <code>启动方法</code></li><li><strong>StopAsync</strong> : <code>停止方法</code></li></ul></li><li><p><strong>IHostBuilder</strong> : <code>主机构造器抽象</code></p><ul><li><strong>ConfigureHostConfiguration()</strong> : <code>配置主机配置文件</code></li><li><strong>ConfigureAppConfiguration()</strong> : <code>配置应用配置文件</code></li><li><strong>ConfigureServices()</strong> : <code>配置服务</code></li><li><strong>UseServiceProviderFactory()</strong> : <code>配置服务提供商工厂</code></li><li><strong>ConfigureContainer()</strong> : <code>配置容器</code></li><li><strong>Build()</strong> : <code>构造主机</code></li></ul></li></ul><blockquote><p>具体实现</p></blockquote><ul><li><p><strong>Host</strong> : <code>主机</code></p><ul><li><strong>IHostLifetime</strong> : <code>主机生命周期</code></li><li><strong>IServiceProvider</strong> : <code>服务提供商</code></li><li><strong>ApplicationLifetime</strong> : <code>应用生命周期</code></li><li><strong>HostOptions</strong> : <code>主机选项</code></li><li><strong>IEnumerable&lt;IHostedService&gt;</strong> : <code>主机服务集合</code></li></ul></li><li><p><strong>HostBuilder</strong> : <code>主机构造器</code></p><ul><li><strong>_configureHostConfigActions</strong> : <code>主机配置委托集合</code></li><li><strong>_configureAppConfigActions</strong> : <code>应用配置委托集合</code></li><li><strong>_configureServicesActions</strong> : <code>服务委托集合</code></li><li><strong>_configureContainerActions</strong> : <code>容器委托集合</code></li><li><strong>_serviceProviderFactory</strong> : <code>服务提供商工厂</code></li></ul></li></ul><blockquote><p>静态类</p></blockquote><ul><li><strong>Host</strong><ul><li><strong>CreateDefaultBuilder()</strong> <code>创建新的默认主机构建器</code></li></ul></li></ul><h2 id="Host初始化创建"><a href="#Host初始化创建" class="headerlink" title="Host初始化创建"></a>Host初始化创建</h2><p>MVC项目创建时模板生成的代码，调用顺序CreateDefaultBuilder(<code>HostBuilder</code>) &#x3D;&gt; ConfigureWebHostDefaults(<code>HostBuilder</code>) &#x3D;&gt; <code>WebHostBuilder</code></p><p>App应用创建<strong>CreateHostBuilder</strong>方法，创建Host构建器，再调用Build方法，生成Host对象，调用Run启动方法</p><ul><li><strong>Program.cs</strong></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateHostBuilder(<span class="keyword">args</span>).Build().Run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span> =&gt;</span><br><span class="line">        Host.CreateDefaultBuilder(<span class="keyword">args</span>)</span><br><span class="line">            .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Host构建器"><a href="#Host构建器" class="headerlink" title="Host构建器"></a>Host构建器</h3><p>Microsoft.Extensions.Hosting.Host静态类里有个<strong>CreateDefaultBuilder</strong>方法创建<code>HostBuilder</code>，设置上述的一些配置的委托集合，返回Host构造器对象HostBuilder</p><h4 id="CreateDefaultBuilder"><a href="#CreateDefaultBuilder" class="headerlink" title="CreateDefaultBuilder"></a>CreateDefaultBuilder</h4><blockquote><p>无参方法</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateDefaultBuilder</span>()</span> =&gt;</span><br><span class="line">            CreateDefaultBuilder(<span class="keyword">args</span>: <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>可以看到该方法实际上是设置了默认值。</p><p><code>IHostBuilder CreateDefaultBuilder(string[] args)</code>方法主要有以下功能：</p><blockquote><p>创建HostBuilder对象</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> HostBuilder();</span><br></pre></td></tr></table></figure><blockquote><p>设置内容根目录(UseContentRoot)</p></blockquote><p>本质是调用<code>ConfigureHostConfiguration</code>方法，往主机配置文件委托集合<code>_configureHostConfigActions</code>里添加</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.UseContentRoot(Directory.GetCurrentDirectory());</span><br></pre></td></tr></table></figure><blockquote><p>设置主机配置(ConfigureHostConfiguration)</p></blockquote><p>把前缀是<code>DOTNET_</code>的环境变量加到配置里</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">builder.ConfigureHostConfiguration(config =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    config.AddEnvironmentVariables(prefix: <span class="string">&quot;DOTNET_&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">args</span> != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        config.AddCommandLine(<span class="keyword">args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>设置应用配置(ConfigureAppConfiguration)</p></blockquote><p>配置初始化(环境变量、appsettings.json、User Secrets)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">builder.ConfigureAppConfiguration((hostingContext, config) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> env = hostingContext.HostingEnvironment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> reloadOnChange = hostingContext.Configuration.GetValue(<span class="string">&quot;hostBuilder:reloadConfigOnChange&quot;</span>, defaultValue: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    config.AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: reloadOnChange)</span><br><span class="line">        .AddJsonFile(<span class="string">$&quot;appsettings.<span class="subst">&#123;env.EnvironmentName&#125;</span>.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: reloadOnChange);</span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment() &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(env.ApplicationName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> appAssembly = Assembly.Load(<span class="keyword">new</span> AssemblyName(env.ApplicationName));</span><br><span class="line">        <span class="keyword">if</span> (appAssembly != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            config.AddUserSecrets(appAssembly, optional: <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.AddEnvironmentVariables();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">args</span> != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        config.AddCommandLine(<span class="keyword">args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置日志配置(ConfigureLogging)</p></blockquote><p>加载配置文件的<code>Logging</code>部分，并根据平台环境，添加不同的日志实现</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">builder.ConfigureLogging((hostingContext, logging) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IMPORTANT: This needs to be added *before* configuration is loaded, this lets</span></span><br><span class="line">    <span class="comment">// the defaults be overridden by the configuration.</span></span><br><span class="line">    <span class="keyword">if</span> (isWindows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Default the EventLogLoggerProvider to warning or above</span></span><br><span class="line">        logging.AddFilter&lt;EventLogLoggerProvider&gt;(level =&gt; level &gt;= LogLevel.Warning);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logging.AddConfiguration(hostingContext.Configuration.GetSection(<span class="string">&quot;Logging&quot;</span>));</span><br><span class="line">    logging.AddConsole();</span><br><span class="line">    logging.AddDebug();</span><br><span class="line">    logging.AddEventSourceLogger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isWindows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Add the EventLogLoggerProvider on windows machines</span></span><br><span class="line">        logging.AddEventLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>开发环境下开启作用域验证</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">builder.UseDefaultServiceProvider((context, options) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> isDevelopment = context.HostingEnvironment.IsDevelopment();</span><br><span class="line">    options.ValidateScopes = isDevelopment;</span><br><span class="line">    options.ValidateOnBuild = isDevelopment;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>设置服务提供商配置(UseDefaultServiceProvider)</p></blockquote><p>设置服务提供商选项，当前是开发环境</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isDevelopment = context.HostingEnvironment.IsDevelopment();</span><br><span class="line">options.ValidateScopes = isDevelopment;</span><br><span class="line">options.ValidateOnBuild = isDevelopment;</span><br></pre></td></tr></table></figure><h3 id="连接HostBuilder和WebHostBuilder"><a href="#连接HostBuilder和WebHostBuilder" class="headerlink" title="连接HostBuilder和WebHostBuilder"></a>连接HostBuilder和WebHostBuilder</h3><blockquote><p>通过两个拓展方法连接HostBuilder和WebHostBuilder</p></blockquote><ul><li><strong><code>ConfigureWebHostDefaults</code> IHostBuilder拓展方法</strong></li></ul><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/v5.0.11/src/DefaultBuilder/src/GenericHostBuilderExtensions.cs#L31">GenericHostBuilderExtensions.cs</a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">ConfigureWebHostDefaults</span>(<span class="params"><span class="keyword">this</span> IHostBuilder builder, Action&lt;IWebHostBuilder&gt; configure</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (configure <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(configure));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> builder.ConfigureWebHost(webHostBuilder =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        WebHost.ConfigureWebDefaults(webHostBuilder);</span><br><span class="line"></span><br><span class="line">        configure(webHostBuilder);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>ConfigureWebHost</code></strong></li></ul><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/2924ca229b3d6c91b7c9eded119b31dfd7aa1fef/src/Hosting/Hosting/src/GenericHostWebHostBuilderExtensions.cs">GenericHostWebHostBuilderExtensions.cs</a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">ConfigureWebHost</span>(<span class="params"><span class="keyword">this</span> IHostBuilder builder, Action&lt;IWebHostBuilder&gt; configure</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (configure <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(configure));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> builder.ConfigureWebHost(configure, _ =&gt; &#123; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">ConfigureWebHost</span>(<span class="params"><span class="keyword">this</span> IHostBuilder builder, Action&lt;IWebHostBuilder&gt; configure, Action&lt;WebHostBuilderOptions&gt; configureWebHostBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (configure <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(configure));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (configureWebHostBuilder <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(configureWebHostBuilder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> webHostBuilderOptions = <span class="keyword">new</span> WebHostBuilderOptions();</span><br><span class="line">    configureWebHostBuilder(webHostBuilderOptions);</span><br><span class="line">    <span class="keyword">var</span> webhostBuilder = <span class="keyword">new</span> GenericWebHostBuilder(builder, webHostBuilderOptions);</span><br><span class="line">    configure(webhostBuilder);</span><br><span class="line">    builder.ConfigureServices((context, services) =&gt; services.AddHostedService&lt;GenericWebHostService&gt;());</span><br><span class="line">    <span class="keyword">return</span> builder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="与2-x版本的区别"><a href="#与2-x版本的区别" class="headerlink" title="与2.x版本的区别"></a>与2.x版本的区别</h3><p>在2.x里WebHost直接创建Server，构建Http管道，而3.x则是在Host主机内创建HostedService服务，并在HostedService内创建Server及Http管道</p><p>Host和WebHost都做了一些基础设置</p><ol><li>设置 Content 根目录，将当前项目的根目录作为 ContentRoot 的目录。</li><li>读取 appsettinggs.json 配置文件，开发环境下的 UserSecrets 以及环境变量和命令行参数。</li><li>读取配置文件中的 Logging 节点，对日志系统进行配置。</li><li>设置开发环境下， ServiceProvider 的 ValidateScopes 为 true，避免直接在 Configure 方法中获取 Scope 实例。</li></ol><p>从3.x开始保留了2.x中WebHost创建CreateDefaultBuilder方法，只是把涉及到Web这块业务抽出来单独成一个<code>ConfigureWebDefaults(IWebHostBuilder builder)</code>方法，方便HostBuilder和WebHostBuilder复用</p><h2 id="Host启动流程"><a href="#Host启动流程" class="headerlink" title="Host启动流程"></a>Host启动流程</h2><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p><em><strong>此方法仅执行一次</strong></em></p><blockquote><p>BuildHostConfiguration</p></blockquote><p>创建主机配置生成器ConfigurationBuilder，然后回调我们的代码提供的委托对配置对象的数据源进行设置，最终通过配置对象生成器Build生成配置对象</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildHostConfiguration</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> configBuilder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">        .AddInMemoryCollection(); <span class="comment">// Make sure there&#x27;s some default storage since there are no default providers</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> buildAction <span class="keyword">in</span> _configureHostConfigActions)</span><br><span class="line">    &#123;</span><br><span class="line">        buildAction(configBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">    _hostConfiguration = configBuilder.Build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CreateHostingEnvironment</p></blockquote><p>创建HostingEnvironment（含义上面有说），默认用配置对象进行赋值，然后回调我们的代码提供的委托进一步设置主机环境对象</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateHostingEnvironment</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _hostingEnvironment = <span class="keyword">new</span> HostingEnvironment()</span><br><span class="line">    &#123;</span><br><span class="line">        ApplicationName = _hostConfiguration[HostDefaults.ApplicationKey],</span><br><span class="line">        EnvironmentName = _hostConfiguration[HostDefaults.EnvironmentKey] ?? Environments.Production,</span><br><span class="line">        ContentRootPath = ResolveContentRootPath(_hostConfiguration[HostDefaults.ContentRootKey], AppContext.BaseDirectory),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(_hostingEnvironment.ApplicationName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Note GetEntryAssembly returns null for the net4x console test runner.</span></span><br><span class="line">        _hostingEnvironment.ApplicationName = Assembly.GetEntryAssembly()?.GetName().Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _hostingEnvironment.ContentRootFileProvider = <span class="keyword">new</span> PhysicalFileProvider(_hostingEnvironment.ContentRootPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CreateHostBuilderContext</p></blockquote><p>初始化构建器上下文(BuilderContext)</p><p>负责承载主机<code>Host</code>启动的一些环境变量<code>HostingEnvironment</code>、配置<code>Configuration</code>、属性<code>Properties</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.Extensions.Hosting</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Context containing the common services on the <span class="doctag">&lt;see cref=&quot;IHost&quot; /&gt;</span>. Some properties may be null until set by the <span class="doctag">&lt;see cref=&quot;IHost&quot; /&gt;</span>.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HostBuilderContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HostBuilderContext</span>(<span class="params">IDictionary&lt;<span class="built_in">object</span>, <span class="built_in">object</span>&gt; properties</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Properties = properties ?? <span class="keyword">throw</span> <span class="keyword">new</span> System.ArgumentNullException(<span class="keyword">nameof</span>(properties));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> The <span class="doctag">&lt;see cref=&quot;IHostEnvironment&quot; /&gt;</span> initialized by the <span class="doctag">&lt;see cref=&quot;IHost&quot; /&gt;</span>.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IHostEnvironment HostingEnvironment &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> The <span class="doctag">&lt;see cref=&quot;IConfiguration&quot; /&gt;</span> containing the merged configuration of the application and the <span class="doctag">&lt;see cref=&quot;IHost&quot; /&gt;</span>.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> A central location for sharing state between components during the host building process.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IDictionary&lt;<span class="built_in">object</span>, <span class="built_in">object</span>&gt; Properties &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BuildAppConfiguration</p></blockquote><p>创建配置构建起<code>IConfigurationBuilder</code>，负责承接配置的构建，最后把构建好的配置<code>IConfiguration</code>赋值给<code>HostBuilderContext</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildAppConfiguration</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    IConfigurationBuilder configBuilder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">        .SetBasePath(_hostingEnvironment.ContentRootPath)</span><br><span class="line">        .AddConfiguration(_hostConfiguration, shouldDisposeConfiguration: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (Action&lt;HostBuilderContext, IConfigurationBuilder&gt; buildAction <span class="keyword">in</span> _configureAppConfigActions)</span><br><span class="line">    &#123;</span><br><span class="line">        buildAction(_hostBuilderContext, configBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">    _appConfiguration = configBuilder.Build();</span><br><span class="line">    _hostBuilderContext.Configuration = _appConfiguration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CreateServiceProvider</p></blockquote><p>创建对象服务容器<code>ServiceCollection</code>，把一些环境变量、生命周期、主机、配置等对象存放进去</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateServiceProvider</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable CS0618 // Type or member is obsolete</span></span><br><span class="line">            services.AddSingleton&lt;IHostingEnvironment&gt;(_hostingEnvironment);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> restore CS0618 // Type or member is obsolete</span></span><br><span class="line">            services.AddSingleton&lt;IHostEnvironment&gt;(_hostingEnvironment);</span><br><span class="line">            services.AddSingleton(_hostBuilderContext);</span><br><span class="line">            <span class="comment">// register configuration as factory to make it dispose with the service provider</span></span><br><span class="line">            services.AddSingleton(_ =&gt; _appConfiguration);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable CS0618 // Type or member is obsolete</span></span><br><span class="line">            services.AddSingleton&lt;IApplicationLifetime&gt;(s =&gt; (IApplicationLifetime)s.GetService&lt;IHostApplicationLifetime&gt;());</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> restore CS0618 // Type or member is obsolete</span></span><br><span class="line">            services.AddSingleton&lt;IHostApplicationLifetime, ApplicationLifetime&gt;();</span><br><span class="line"></span><br><span class="line">            AddLifetime(services);</span><br><span class="line"></span><br><span class="line">            services.AddSingleton&lt;IHost&gt;(_ =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Internal.Host(_appServices,</span><br><span class="line">                    _hostingEnvironment,</span><br><span class="line">                    _defaultProvider,</span><br><span class="line">                    _appServices.GetRequiredService&lt;IHostApplicationLifetime&gt;(),</span><br><span class="line">                    _appServices.GetRequiredService&lt;ILogger&lt;Internal.Host&gt;&gt;(),</span><br><span class="line">                    _appServices.GetRequiredService&lt;IHostLifetime&gt;(),</span><br><span class="line">                    _appServices.GetRequiredService&lt;IOptions&lt;HostOptions&gt;&gt;());</span><br><span class="line">            &#125;);</span><br><span class="line">            services.AddOptions().Configure&lt;HostOptions&gt;(options =&gt; &#123; options.Initialize(_hostConfiguration); &#125;);</span><br><span class="line">            services.AddLogging();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (Action&lt;HostBuilderContext, IServiceCollection&gt; configureServicesAction <span class="keyword">in</span> _configureServicesActions)</span><br><span class="line">            &#123;</span><br><span class="line">                configureServicesAction(_hostBuilderContext, services);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">object</span> containerBuilder = _serviceProviderFactory.CreateBuilder(services);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (IConfigureContainerAdapter containerAction <span class="keyword">in</span> _configureContainerActions)</span><br><span class="line">            &#123;</span><br><span class="line">                containerAction.ConfigureContainer(_hostBuilderContext, containerBuilder);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _appServices = _serviceProviderFactory.CreateServiceProvider(containerBuilder);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_appServices == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(SR.NullIServiceProvider);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// resolve configuration explicitly once to mark it as resolved within the</span></span><br><span class="line">            <span class="comment">// service provider, ensuring it will be properly disposed with the provider</span></span><br><span class="line">            _ = _appServices.GetService&lt;IConfiguration&gt;();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> AspNetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core MVC 5.x初始化源码解读（二）</title>
      <link href="/posts/329c39bd/"/>
      <url>/posts/329c39bd/</url>
      
        <content type="html"><![CDATA[<h2 id="WebHost对象概念解释"><a href="#WebHost对象概念解释" class="headerlink" title="WebHost对象概念解释"></a>WebHost对象概念解释</h2><p>WebHost</p><blockquote><p>接口定义</p></blockquote><ul><li><p><strong>IWebHost</strong> : <code>主机抽象</code></p><ul><li><strong>IFeatureCollection</strong> : <code>插件容器</code></li><li><strong>IServiceProvider</strong> : <code>对象服务提供器</code></li><li><strong>Start</strong> : <code>启动方法（同步）</code></li><li><strong>StartAsync</strong> : <code>启动方法</code></li><li><strong>StopAsync</strong> : <code>停止方法</code></li></ul></li><li><p><strong>IWebHostBuilder</strong> : <code>网站主机构建器</code></p><ul><li><strong>Build</strong> : <code>构建</code></li><li><strong>ConfigureAppConfiguration</strong> : <code>配置应用配置文件</code></li><li><strong>ConfigureServices</strong> : <code>配置服务</code></li><li><strong>GetSetting</strong> : <code>读取单个配置值</code></li><li><strong>UseSetting</strong> : <code>设置单个配置项</code></li></ul></li></ul><blockquote><p>具体实现</p></blockquote><ul><li><p><strong>GenericWebHostBuilder</strong> : <code>通用网站主机构造器（HostBuilder桥接器）</code></p><ul><li><strong>ConfigureHostConfiguration</strong> : <code>设置主机配置</code></li><li><strong>ConfigureAppConfiguration</strong> : <code>设置应用配置</code></li><li><strong>ConfigureServices</strong> : <code>设置服务</code></li><li><strong>UseStartup</strong> : <code>使用StartUp配置启动</code></li></ul></li><li><p><strong>HostingStartupWebHostBuilder</strong> : <code>加载StartUp的网站主机构造器（装饰器）</code></p></li></ul><blockquote><p>静态类</p></blockquote><ul><li><strong>WebHost</strong><ul><li><strong>CreateDefaultBuilder()</strong> : 创建网站主机构建器</li></ul></li></ul><h2 id="WebHost初始化"><a href="#WebHost初始化" class="headerlink" title="WebHost初始化"></a>WebHost初始化</h2><p><code>HostBuilder</code>调用<code>ConfigureWebHost</code>拓展方法创建<code>WebHostBuilderOptions</code>和<code>GenericWebHostBuilder</code></p><h3 id="WebHostBuilder初始化"><a href="#WebHostBuilder初始化" class="headerlink" title="WebHostBuilder初始化"></a>WebHostBuilder初始化</h3><ul><li><strong><code>GenericWebHostBuilder</code>类</strong></li></ul><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/master/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L32">GenericWebHostBuilder.cs</a></p><p>GenericWebHostBuilder装饰者类，构造函数传入参数<code>HostBuilder</code>，创建通用<code>WebHostBuilder</code></p><ul><li><strong><code>ConfigureWebDefaults</code>方法</strong></li></ul><ol><li>注册 Kestrel 中间件，指定 WebHost 要使用的 Server（HTTP服务器）。</li><li>添加 IIS 和 IISIntegration 中间件。</li></ol><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/v5.0.11/src/DefaultBuilder/src/WebHost.cs#L156">WebHost.cs</a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConfigureWebDefaults</span>(<span class="params">IWebHostBuilder builder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    builder.ConfigureAppConfiguration((ctx, cb) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ctx.HostingEnvironment.IsDevelopment())</span><br><span class="line">        &#123;</span><br><span class="line">            StaticWebAssetsLoader.UseStaticWebAssets(ctx.HostingEnvironment, ctx.Configuration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    builder.UseKestrel((builderContext, options) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.Configure(builderContext.Configuration.GetSection(<span class="string">&quot;Kestrel&quot;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .ConfigureServices((hostingContext, services) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Fallback</span></span><br><span class="line">        services.PostConfigure&lt;HostFilteringOptions&gt;(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (options.AllowedHosts == <span class="literal">null</span> || options.AllowedHosts.Count == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// &quot;AllowedHosts&quot;: &quot;localhost;127.0.0.1;[::1]&quot;</span></span><br><span class="line">                <span class="keyword">var</span> hosts = hostingContext.Configuration[<span class="string">&quot;AllowedHosts&quot;</span>]?.Split(<span class="keyword">new</span>[] &#123; <span class="string">&#x27;;&#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">                <span class="comment">// Fall back to &quot;*&quot; to disable.</span></span><br><span class="line">                options.AllowedHosts = (hosts?.Length &gt; <span class="number">0</span> ? hosts : <span class="keyword">new</span>[] &#123; <span class="string">&quot;*&quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// Change notification</span></span><br><span class="line">        services.AddSingleton&lt;IOptionsChangeTokenSource&lt;HostFilteringOptions&gt;&gt;(</span><br><span class="line">                    <span class="keyword">new</span> ConfigurationChangeTokenSource&lt;HostFilteringOptions&gt;(hostingContext.Configuration));</span><br><span class="line"></span><br><span class="line">        services.AddTransient&lt;IStartupFilter, HostFilteringStartupFilter&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.Equals(<span class="string">&quot;true&quot;</span>, hostingContext.Configuration[<span class="string">&quot;ForwardedHeaders_Enabled&quot;</span>], StringComparison.OrdinalIgnoreCase))</span><br><span class="line">        &#123;</span><br><span class="line">            services.Configure&lt;ForwardedHeadersOptions&gt;(options =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;</span><br><span class="line">                <span class="comment">// Only loopback proxies are allowed by default. Clear that restriction because forwarders are</span></span><br><span class="line">                <span class="comment">// being enabled by explicit configuration.</span></span><br><span class="line">                options.KnownNetworks.Clear();</span><br><span class="line">                options.KnownProxies.Clear();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            services.AddTransient&lt;IStartupFilter, ForwardedHeadersStartupFilter&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        services.AddRouting();</span><br><span class="line">    &#125;)</span><br><span class="line">    .UseIIS()</span><br><span class="line">    .UseIISIntegration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>HostBuilder</code>和<code>WebHostBuilderOptions</code>通过构造函数传递给<code>WebHostBuilder</code>初始化对象。</p><h4 id="WebHost构造器"><a href="#WebHost构造器" class="headerlink" title="WebHost构造器"></a>WebHost构造器</h4><p>创建WebHostBuilder通过拓展方法连接HostBuilder，把一些配置、服务、方法加进Host构建过程中。</p><h5 id="GenericWebHostBuilder"><a href="#GenericWebHostBuilder" class="headerlink" title="GenericWebHostBuilder"></a>GenericWebHostBuilder</h5><blockquote><p>构造函数里依次调HostBuilder的方法<br><code>ConfigureHostConfiguration</code>合并<code>Host</code>和<code>WebHost</code>的配置文件，并处理<code>StartUp</code><br><code>ConfigureAppConfiguration</code>委托调用<code>HostingStartupWebHostBuilder</code>的<code>ConfigureAppConfiguration</code><br><code>ConfigureServices</code>配置服务容器，添加<code>DiagnosticListener</code>,<code>IHttpContextFactory</code>、<code>IMiddlewareFactory</code>、<code>IApplicationBuilderFactory</code>等对象服务</p></blockquote><p><code>HostingStartupWebHostBuilder``GenericWebHostBuilder</code></p><blockquote><p>设置主机配置(ConfigureHostConfiguration)</p></blockquote><p>把前缀是<code>ASPNETCORE_</code>的环境变量加到主机配置里，并创建<code>WebHostBuilder</code>装饰器<code>HostingStartupWebHostBuilder</code>来执行应用的<code>StartUp</code>文件</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configBuilder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">    .AddInMemoryCollection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!options.SuppressEnvironmentConfiguration)</span><br><span class="line">&#123;</span><br><span class="line">    configBuilder.AddEnvironmentVariables(prefix: <span class="string">&quot;ASPNETCORE_&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_config = configBuilder.Build();</span><br><span class="line"></span><br><span class="line">_builder.ConfigureHostConfiguration(config =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    config.AddConfiguration(_config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We do this super early but still late enough that we can process the configuration</span></span><br><span class="line">    <span class="comment">// wired up by calls to UseSetting</span></span><br><span class="line">    ExecuteHostingStartups();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>设置应用配置(ConfigureAppConfiguration)</p></blockquote><p>设置WebHost上下文<code>WebHostContext</code>，<code>HostingStartupWebHostBuilder</code>负责把<code>StartUp</code>里的配置加到构建管道中 </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_builder.ConfigureAppConfiguration((context, configurationBuilder) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_hostingStartupWebHostBuilder != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> webhostContext = GetWebHostBuilderContext(context);</span><br><span class="line">        _hostingStartupWebHostBuilder.ConfigureAppConfiguration(webhostContext, configurationBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>设置服务(ConfigureServices)</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">_builder.ConfigureServices((context, services) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> webhostContext = GetWebHostBuilderContext(context);</span><br><span class="line">    <span class="keyword">var</span> webHostOptions = (WebHostOptions)context.Properties[<span class="keyword">typeof</span>(WebHostOptions)];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the IHostingEnvironment and IApplicationLifetime from Microsoft.AspNetCore.Hosting</span></span><br><span class="line">    services.AddSingleton(webhostContext.HostingEnvironment);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable CS0618 // Type or member is obsolete</span></span><br><span class="line">    services.AddSingleton((AspNetCore.Hosting.IHostingEnvironment)webhostContext.HostingEnvironment);</span><br><span class="line">    services.AddSingleton&lt;IApplicationLifetime, GenericWebHostApplicationLifetime&gt;();</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> restore CS0618 // Type or member is obsolete</span></span><br><span class="line"></span><br><span class="line">    services.Configure&lt;GenericWebHostServiceOptions&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Set the options</span></span><br><span class="line">        options.WebHostOptions = webHostOptions;</span><br><span class="line">        <span class="comment">// Store and forward any startup errors</span></span><br><span class="line">        options.HostingStartupExceptions = _hostingStartupErrors;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// REVIEW: This is bad since we don&#x27;t own this type. Anybody could add one of these and it would mess things up</span></span><br><span class="line">    <span class="comment">// We need to flow this differently</span></span><br><span class="line">    <span class="keyword">var</span> listener = <span class="keyword">new</span> DiagnosticListener(<span class="string">&quot;Microsoft.AspNetCore&quot;</span>);</span><br><span class="line">    services.TryAddSingleton&lt;DiagnosticListener&gt;(listener);</span><br><span class="line">    services.TryAddSingleton&lt;DiagnosticSource&gt;(listener);</span><br><span class="line"></span><br><span class="line">    services.TryAddSingleton&lt;IHttpContextFactory, DefaultHttpContextFactory&gt;();</span><br><span class="line">    services.TryAddScoped&lt;IMiddlewareFactory, MiddlewareFactory&gt;();</span><br><span class="line">    services.TryAddSingleton&lt;IApplicationBuilderFactory, ApplicationBuilderFactory&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IMPORTANT: This needs to run *before* direct calls on the builder (like UseStartup)</span></span><br><span class="line">    _hostingStartupWebHostBuilder?.ConfigureServices(webhostContext, services);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Support UseStartup(assemblyName)</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(webHostOptions.StartupAssembly))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> startupType = StartupLoader.FindStartupType(webHostOptions.StartupAssembly, webhostContext.HostingEnvironment.EnvironmentName);</span><br><span class="line">            UseStartup(startupType, context, services);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) <span class="keyword">when</span> (webHostOptions.CaptureStartupErrors)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> capture = ExceptionDispatchInfo.Capture(ex);</span><br><span class="line"></span><br><span class="line">            services.Configure&lt;GenericWebHostServiceOptions&gt;(options =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                options.ConfigureApplication = app =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Throw if there was any errors initializing startup</span></span><br><span class="line">                    capture.Throw();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="ConfigureWebDefaults"><a href="#ConfigureWebDefaults" class="headerlink" title="ConfigureWebDefaults"></a>ConfigureWebDefaults</h5><blockquote><p>设置应用配置(ConfigureAppConfiguration)</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">builder.ConfigureAppConfiguration((ctx, cb) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.HostingEnvironment.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        StaticWebAssetsLoader.UseStaticWebAssets(ctx.HostingEnvironment, ctx.Configuration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>设置站点服务器(UseKestrel)和设置服务(ConfigureServices)</p></blockquote><p>加载配置文件<code>Kestrel</code>部分，启用Kestrel，设置服务中间件，头部转发、路由、过滤器、IIS服务等</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">builder.UseKestrel((builderContext, options) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.Configure(builderContext.Configuration.GetSection(<span class="string">&quot;Kestrel&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line">.ConfigureServices((hostingContext, services) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Fallback</span></span><br><span class="line">    services.PostConfigure&lt;HostFilteringOptions&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.AllowedHosts == <span class="literal">null</span> || options.AllowedHosts.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// &quot;AllowedHosts&quot;: &quot;localhost;127.0.0.1;[::1]&quot;</span></span><br><span class="line">            <span class="keyword">var</span> hosts = hostingContext.Configuration[<span class="string">&quot;AllowedHosts&quot;</span>]?.Split(<span class="keyword">new</span>[] &#123; <span class="string">&#x27;;&#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">            <span class="comment">// Fall back to &quot;*&quot; to disable.</span></span><br><span class="line">            options.AllowedHosts = (hosts?.Length &gt; <span class="number">0</span> ? hosts : <span class="keyword">new</span>[] &#123; <span class="string">&quot;*&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// Change notification</span></span><br><span class="line">    services.AddSingleton&lt;IOptionsChangeTokenSource&lt;HostFilteringOptions&gt;&gt;(</span><br><span class="line">                <span class="keyword">new</span> ConfigurationChangeTokenSource&lt;HostFilteringOptions&gt;(hostingContext.Configuration));</span><br><span class="line"></span><br><span class="line">    services.AddTransient&lt;IStartupFilter, HostFilteringStartupFilter&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.Equals(<span class="string">&quot;true&quot;</span>, hostingContext.Configuration[<span class="string">&quot;ForwardedHeaders_Enabled&quot;</span>], StringComparison.OrdinalIgnoreCase))</span><br><span class="line">    &#123;</span><br><span class="line">        services.Configure&lt;ForwardedHeadersOptions&gt;(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;</span><br><span class="line">            <span class="comment">// Only loopback proxies are allowed by default. Clear that restriction because forwarders are</span></span><br><span class="line">            <span class="comment">// being enabled by explicit configuration.</span></span><br><span class="line">            options.KnownNetworks.Clear();</span><br><span class="line">            options.KnownProxies.Clear();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        services.AddTransient&lt;IStartupFilter, ForwardedHeadersStartupFilter&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    services.AddRouting();</span><br><span class="line">&#125;)</span><br><span class="line">.UseIIS()</span><br><span class="line">.UseIISIntegration();</span><br></pre></td></tr></table></figure><h2 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        services.AddControllersWithViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">        &#123;</span><br><span class="line">            app.UseDeveloperExceptionPage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            app.UseExceptionHandler(<span class="string">&quot;/Home/Error&quot;</span>);</span><br><span class="line">            <span class="comment">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span></span><br><span class="line">            app.UseHsts();</span><br><span class="line">        &#125;</span><br><span class="line">        app.UseHttpsRedirection();</span><br><span class="line">        app.UseStaticFiles();</span><br><span class="line"></span><br><span class="line">        app.UseRouting();</span><br><span class="line"></span><br><span class="line">        app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">        app.UseEndpoints(endpoints =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            endpoints.MapControllerRoute(</span><br><span class="line">                name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                pattern: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="站点服务初始化配置"><a href="#站点服务初始化配置" class="headerlink" title="站点服务初始化配置"></a>站点服务初始化配置</h2><h3 id="RazorPage的路由解析服务"><a href="#RazorPage的路由解析服务" class="headerlink" title="RazorPage的路由解析服务"></a>RazorPage的路由解析服务</h3><blockquote><p>注册服务</p></blockquote><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/v5.0.11/src/Mvc/Mvc.RazorPages/src/DependencyInjection/MvcRazorPagesMvcCoreBuilderExtensions.cs">MvcRazorPagesMvcCoreBuilderExtensions.cs</a></p><ul><li><strong>AddRazorPages</strong> : 添加Razor Page服务</li><li><strong>WithRazorPagesRoot</strong> : 设置Razor Page根目录</li></ul><blockquote><p>映射终端</p></blockquote><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/v5.0.11/src/Mvc/Mvc.RazorPages/src/Builder/RazorPagesEndpointRouteBuilderExtensions.cs">RazorPagesEndpointRouteBuilderExtensions.cs</a></p><ul><li><strong>MapRazorPages</strong> : 设置默认映射路由路径</li><li><strong>MapFallbackToPage</strong> : 动态路由，找不到符合路径时自动跳转带设定路由</li><li><strong>MapFallbackToAreaPage</strong> : 动态路由，找不到符合路径时自动跳转带设定二级路由</li><li><strong>MapDynamicPageRoute</strong> : 动态路由，自定义路由规则</li></ul><blockquote><p>初始化</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddRazorPages();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapRazorPages();<span class="comment">//设置路由规则</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controllers的路由解析服务"><a href="#Controllers的路由解析服务" class="headerlink" title="Controllers的路由解析服务"></a>Controllers的路由解析服务</h3><blockquote><p>注册服务</p></blockquote><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/v5.0.11/src/Mvc/Mvc/src/MvcServiceCollectionExtensions.cs">MvcServiceCollectionExtensions.cs</a></p><ul><li><strong>AddMvcCore</strong> : 最轻量，仅使用了路由解析必要服务，其他身份验证和资料验证等功能就需要另外引用</li><li><strong>AddControllers</strong> : 次轻量，使用WebApi首选，比AddMvcCore多了资料、身份验证跟跨域等相关的服务</li><li><strong>AddControllersWithViews</strong> : 包含AddControllers再加上View Page的服务，使用标准MVC服务可以使用</li><li><strong>AddRazorPages</strong> : 使用RazorPage与部分AddControllers功能，前端使用RazorPage，不需要太多Api接口</li><li><strong>AddMVC</strong> : 功能最全的MVC服务</li></ul><blockquote><p>映射终端</p></blockquote><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/v5.0.11/src/Mvc/Mvc.Core/src/Builder/ControllerEndpointRouteBuilderExtensions.cs">ControllerEndpointRouteBuilderExtensions.cs</a></p><ul><li><strong>MapControllers</strong> : 将<code>UseRouting</code>的结果注册到终端</li><li><strong>MapDefaultControllerRoute</strong> : 同<code>MapControllers</code>只是多设置一条{controller&#x3D;Home}&#x2F;{action&#x3D;Idenx}&#x2F;{id?}的预设路径</li><li><strong>MapControllerRoute</strong> : 手动设定终端路由</li><li><strong>MapAreaControllerRoute</strong> : 与<code>MapControllerRouter</code>同，路径多了Area的前缀</li><li><strong>MapDynamicControllerRoute</strong> : 动态路由，自定义路由规则</li><li><strong>MapFallbackToController</strong> : 动态路由，当找不到符合的路径时自动跳转到自定路由</li></ul><blockquote><p>初始化</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddMvc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();<span class="comment">//设置路由规则</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SignalR的路由解析服务"><a href="#SignalR的路由解析服务" class="headerlink" title="SignalR的路由解析服务"></a>SignalR的路由解析服务</h3><blockquote><p>注册服务</p></blockquote><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/2924ca229b/src/SignalR/server/SignalR/src/SignalRDependencyInjectionExtensions.cs">SignalRDependencyInjectionExtensions.cs</a></p><ul><li><strong>AddSignalR</strong> : 添加SignalR服务</li><li><strong>AddHubOptions</strong> : 设置Signal配置，通过HubOptions自定义配置</li></ul><blockquote><p>映射终端</p></blockquote><p>文件位置：<a href="https://github.com/dotnet/aspnetcore/blob/2924ca229b/src/SignalR/server/SignalR/src/HubEndpointRouteBuilderExtensions.cs">HubEndpointRouteBuilderExtensions.cs</a></p><ul><li><strong>MapHub</strong> : 设置SignalR默认映射路由路径</li></ul><blockquote><p>初始化</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddSignalR();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapHub&lt;SignalMethod&gt;();<span class="comment">//设置路由规则</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gRPC的路由解析服务"><a href="#gRPC的路由解析服务" class="headerlink" title="gRPC的路由解析服务"></a>gRPC的路由解析服务</h3><blockquote><p>注册服务</p></blockquote><p>文件位置：<a href="https://github.com/grpc/grpc-dotnet/blob/v2.40.0/src/Grpc.AspNetCore.Server/GrpcServiceExtensions.cs">GrpcServiceExtensions.cs</a></p><ul><li><strong>AddGrpc</strong> : 注册Grpc服务端服务</li><li><strong>AddServiceOptions</strong> : 设置Grpc服务端配置</li></ul><p>文件位置：<a href="https://github.com/grpc/grpc-dotnet/blob/v2.40.0/src/Grpc.Net.ClientFactory/GrpcClientServiceExtensions.cs">GrpcClientServiceExtensions.cs</a></p><ul><li><strong>AddGrpcClient</strong> : 注册Grpc客户端服务</li></ul><p>文件位置：<a href="https://github.com/grpc/grpc-dotnet/blob/v2.40.0/src/Grpc.Net.ClientFactory/GrpcHttpClientBuilderExtensions.cs">GrpcHttpClientBuilderExtensions.cs</a></p><ul><li><strong>ConfigureChannel</strong> : 设置Grpc客户端的通道信息</li></ul><blockquote><p>映射终端</p></blockquote><p>文件位置：<a href="https://github.com/grpc/grpc-dotnet/blob/v2.40.0/src/Grpc.AspNetCore.Server/GrpcEndpointRouteBuilderExtensions.cs">GrpcEndpointRouteBuilderExtensions.cs</a></p><ul><li><strong>MapGrpcService</strong> : 设置Grpc服务端默认映射路由路径</li></ul><blockquote><p>服务端初始化</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddGrpc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapGrpcService&lt;GreeterService&gt;();<span class="comment">//设置路由规则</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>客户端初始化</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddGrpcClient&lt;Greeter.GreeterClient&gt;(o =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        o.Address = <span class="keyword">new</span> Uri(<span class="string">&quot;https://localhost:5001&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .ConfigureChannel(o=&gt;&#123;</span><br><span class="line">        o.Credentials = <span class="keyword">new</span> CustomCredentials();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> AspNetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目工程</title>
      <link href="/posts/64f8c07b/"/>
      <url>/posts/64f8c07b/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>刚入门前端，没有搭建过大型前端项目工程，觉得模块间引用很不方便，于是研究了下</p><h2 id="工程项目结构"><a href="#工程项目结构" class="headerlink" title="工程项目结构"></a>工程项目结构</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">react-ts-ui/</span><br><span class="line">├─ packages/</span><br><span class="line">├ ├─ react-components-a/</span><br><span class="line">├ ├ ├─ src/</span><br><span class="line">├ ├ ├ └─ index.tsx</span><br><span class="line">├ ├ ├─ package.json</span><br><span class="line">├ ├ └─ tsconfig.json</span><br><span class="line">├ └─ react-components-b/</span><br><span class="line">├   ├─ src/</span><br><span class="line">├   ├ └─ index.tsx</span><br><span class="line">├   ├─ package.json</span><br><span class="line">├   └─ tsconfig.json</span><br><span class="line">├─ src/</span><br><span class="line">├ └─ index.tsx</span><br><span class="line">├─ package.json</span><br><span class="line">└─ tsconfig.json</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="react-components-a"><a href="#react-components-a" class="headerlink" title="react-components-a"></a>react-components-a</h3><blockquote><p>.&#x2F;packages&#x2F;react-components-a&#x2F;tsconfig.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="react-components-b"><a href="#react-components-b" class="headerlink" title="react-components-b"></a>react-components-b</h3><blockquote><p>.&#x2F;packages&#x2F;react-components-b&#x2F;tsconfig.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="react-ts-ui"><a href="#react-ts-ui" class="headerlink" title="react-ts-ui"></a>react-ts-ui</h3><blockquote><p>.&#x2F;package.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workspace&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><blockquote><p>.&#x2F;tsconfig.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;react-components-a&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./packages/react-components-a/src&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;react-components-b&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./packages/react-components-b/src&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./packages/react-components-a&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./packages/react-components-b&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>.&#x2F;webpack.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;react-components-a&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;packages/react-components-a/src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;react-components-b&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;packages/react-components-b/src&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><p>packages&#x2F;react-components-a&#x2F;src&#x2F;index.tsx</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">componentsA</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;react-components-a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  componentsA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>packages&#x2F;react-components-b&#x2F;src&#x2F;index.tsx</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">componentsB</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;react-components-b&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  componentsB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>src&#x2F;index.tsx</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; componentsA &#125; <span class="keyword">from</span> <span class="string">&quot;react-components-a&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; componentsB &#125; <span class="keyword">from</span> <span class="string">&quot;react-components-b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentsA</span>();</span><br><span class="line"><span class="title function_">componentsB</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端 </category>
          
          <category> React </category>
          
          <category> Typescript </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
            <tag> Typescript </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript+React+Webpack整合</title>
      <link href="/posts/69aa5e6/"/>
      <url>/posts/69aa5e6/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.typescriptlang.org/">Typescript</a>TypeScript是一种由微软开发的开源、跨平台的编程语言。 他是JavaScript的超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程，遵循最新的ES5、ES6规范。</p><p><a href="https://reactjs.org/">React</a>是一个用于构建用户界面的JavaScript库，起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。React拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。</p><p><a href="https://webpack.js.org/">Webpack</a>是当前前端最热门的前端资源模块化管理和打包工具</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><blockquote><p>初始化项目结构</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> react-ts-ui</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> react-ts-ui</span><br></pre></td></tr></table></figure><p>Typescript文件会放在src文件夹里，通过TypeScript编译器编译，然后经webpack处理，最后生成一个bundle.js文件放在dist目录下。 我们自定义的组件将会放在 src&#x2F;components文件夹下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> src</span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="built_in">mkdir</span> components</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><blockquote><p>项目结构</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">react-ts-ui/</span><br><span class="line">├─ dist/</span><br><span class="line">└─ src/</span><br><span class="line">  └─ components/</span><br></pre></td></tr></table></figure><blockquote><p>初始化工程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// ./react-ts-ui</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><blockquote><p>安装<code>Typescript</code>依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D typescript awesome-typescript-loader source-map-loader</span><br></pre></td></tr></table></figure><blockquote><p>在根目录下创建<code>tsconfig.json</code>文件</p></blockquote><p><a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html">这里</a>可以查看<code>tsconfig</code>文件详细说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/**/*&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><blockquote><p>安装<code>React</code>依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom @types/react @types/react-dom</span><br></pre></td></tr></table></figure><blockquote><p>编写<code>React</code>组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">HelloProps</span> &#123; <span class="attr">compiler</span>: string; <span class="attr">framework</span>: string; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">props: HelloProps</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello from &#123;props.compiler&#125; and &#123;props.framework&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>接下来在<code>src</code>文件下创建<code>index.tsx</code>文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Hello</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./components/Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">compiler</span>=<span class="string">&quot;TypeScript&quot;</span> <span class="attr">framework</span>=<span class="string">&quot;React&quot;</span> /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;example&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>在根目录下创建<code>index.html</code>文件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Main --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><blockquote><p>安装<code>Webpack</code>依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g webpack</span><br></pre></td></tr></table></figure><blockquote><p>在根目录下创建<code>webpack.config.js</code>文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.tsx&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: __dirname + <span class="string">&quot;/dist&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable sourcemaps for debugging webpack&#x27;s output.</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="comment">// Add &#x27;.ts&#x27; and &#x27;.tsx&#x27; as resolvable extensions.</span></span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.tsx&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// All files with a &#x27;.ts&#x27; or &#x27;.tsx&#x27; extension will be handled by &#x27;awesome-typescript-loader&#x27;.</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>, <span class="attr">loader</span>: <span class="string">&quot;awesome-typescript-loader&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// All output &#x27;.js&#x27; files will have any sourcemaps re-processed by &#x27;source-map-loader&#x27;.</span></span><br><span class="line">            &#123; <span class="attr">enforce</span>: <span class="string">&quot;pre&quot;</span>, <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">&quot;source-map-loader&quot;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要注意一点我们是从node_modules引入的文件。 React和React-DOM的npm包里包含了独立的 .js文件，你可以在页面上引入它们，这里我们为了快捷就直接引用了。 可以随意地将它们拷贝到其它目录下，或者从CDN上引用。</p><ul><li>awesome-typescript-loader<ul><li>可以让Webpack使用TypeScript的标准配置文件 tsconfig.json编译TypeScript代码。<a href="https://www.npmjs.com/package/awesome-typescript-loader">npm_url</a></li></ul></li><li>source-map-loader<ul><li>使用TypeScript输出的sourcemap文件来告诉webpack何时生成 自己的sourcemaps。 这就允许你在调试最终生成的文件时就好像在调试TypeScript源码一样。<a href="https://www.npmjs.com/package/source-map-loader">npm_url</a></li></ul></li></ul><p>如果有css文件需要打包就需要引用以下两个包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">            <span class="attr">rules</span>: [</span><br><span class="line">                <span class="comment">// All files with a &#x27;.ts&#x27; or &#x27;.tsx&#x27; extension will be handled by &#x27;awesome-typescript-loader&#x27;.</span></span><br><span class="line">                &#123; <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>, <span class="attr">loader</span>: <span class="string">&quot;awesome-typescript-loader&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// All output &#x27;.js&#x27; files will have any sourcemaps re-processed by &#x27;source-map-loader&#x27;.</span></span><br><span class="line">                &#123; <span class="attr">enforce</span>: <span class="string">&quot;pre&quot;</span>, <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">&quot;source-map-loader&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">                &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>] &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><ul><li>css-loader<ul><li>用于将css文件打包到js文件中。<a href="https://www.npmjs.com/package/css-loader">npm_url</a></li></ul></li><li>style-loader<ul><li>将打包进js文件的css插入页面中。<a href="https://www.npmjs.com/package/style-loader">npm_url</a></li></ul></li></ul><h3 id="配置本地服务器"><a href="#配置本地服务器" class="headerlink" title="配置本地服务器"></a>配置本地服务器</h3><p><a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。</p><blockquote><p>全局安装<code>webpack-dev-server</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g webpack-dev-server</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>webpack.config.js</code>配置文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">        <span class="attr">static</span>:&#123;</span><br><span class="line">            <span class="attr">directory</span>:__dirname</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>启动服务器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack serve</span><br></pre></td></tr></table></figure><h3 id="创建站点页面"><a href="#创建站点页面" class="headerlink" title="创建站点页面"></a>创建站点页面</h3><p><a href="https://github.com/jantimon/html-webpack-plugin">html-webpack-plugin</a>简化了 HTML 文件的创建，以便为你的 webpack 包提供服务。这对于那些文件名中包含哈希值，并且哈希值会随着每次编译而改变的 webpack 包特别有用。你可以让该插件为你生成一个 HTML 文件，使用 lodash 模板提供模板，或者使用你自己的 loader。</p><blockquote><p>安装插件包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D html-webpack-plugin</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>webpack.config.js</code>配置文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"><span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span>,<span class="comment">//选择的模板</span></span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,<span class="comment">//指定创建的html文件名</span></span><br><span class="line">&#125;)</span><br><span class="line">],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h3><blockquote><p>修改<code>webpack.config.js</code>配置文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Cannot apply HMR update.&#x27;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端 </category>
          
          <category> React </category>
          
          <category> Typescript </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
            <tag> Typescript </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初试Storybook</title>
      <link href="/posts/c45b6c49/"/>
      <url>/posts/c45b6c49/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://storybook.js.org/">StoryBook</a>,独立开发构建前端UI插件、页面的开源工具。可用于Vue、React、Angular的UI组件</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>本例是采用React作为开发框架</p><h3 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h3><h4 id="初始化React-App"><a href="#初始化React-App" class="headerlink" title="初始化React-App"></a>初始化React-App</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line">npx create-react-app react-app</span><br><span class="line"></span><br><span class="line">cd react-app</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.chobon.top/blog/storybook/react-app.png" alt="React-App初始界面"></p><h4 id="初始化SotryBook"><a href="#初始化SotryBook" class="headerlink" title="初始化SotryBook"></a>初始化SotryBook</h4><ul><li>全局安装storybook</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -g sb</span><br></pre></td></tr></table></figure><ul><li>局部安装storybook</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add sb</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加storybook</span><br><span class="line">npx sb init</span><br><span class="line"></span><br><span class="line"># 在开发模式中启动storybook</span><br><span class="line">yarn storybook</span><br></pre></td></tr></table></figure><p><img src="https://img.chobon.top/blog/storybook/example-welcome.png" alt="storybook欢迎界面"></p><h4 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h4><blockquote><p>新增两个文件夹</p></blockquote><ul><li><code>.storybook</code></li></ul><p>存放storybook的配置文件，main.js、preview.js</p><ul><li><code>src/stories</code></li></ul><p>存放展示组件和数据，storybook初始化Button、Header、Page展示用</p><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>创建项目文件夹react-app并npm初始化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-app</span><br><span class="line"></span><br><span class="line">cd react-app</span><br></pre></td></tr></table></figure><p>添加react相关包</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D react react-dom</span><br></pre></td></tr></table></figure><p>添加storybook的react包</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D <span class="meta">@storybook</span>/react</span><br></pre></td></tr></table></figure><p>在根目录下增加<code>.storybook</code>文件夹，并创建main.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/main.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">stories</span>: [<span class="string">&#x27;../**/*.stories.[tj]sx&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在根目录下增加stories文件夹，文件内是作为storybook的数据和展示代码，直接从自动生成的文件拷贝过来就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
            <tag> Storybook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task的底层实现</title>
      <link href="/posts/d8b3a72c/"/>
      <url>/posts/d8b3a72c/</url>
      
        <content type="html"><![CDATA[<h2 id="async关键字"><a href="#async关键字" class="headerlink" title="async关键字"></a>async关键字</h2><p>我们将<code>async</code>修饰的方法叫做“异步方法”，但是并不意味着方法是异步执行，也不意味着该方法是异步方法。</p><blockquote><p>源码</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">MethodAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Run(()=&gt;Console.WriteLine(<span class="string">&quot;asynchronous run&quot;</span>));</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;synchronous run&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>反编译代码</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;<span class="title">MethodAsync</span>&gt;<span class="title">d__1</span> : <span class="title">IAsyncStateMachine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AsyncTaskMethodBuilder &lt;&gt;t__builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TaskAwaiter &lt;&gt;u__1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> num = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            TaskAwaiter awaiter;</span><br><span class="line">            <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                awaiter = Task.Run(&lt;&gt;c.&lt;&gt;<span class="number">9</span>__1_0 ?? (&lt;&gt;c.&lt;&gt;<span class="number">9</span>__1_0 = <span class="keyword">new</span> Action(&lt;&gt;c.&lt;&gt;<span class="number">9.</span>&lt;MethodAsync&gt;b__1_0))).GetAwaiter();</span><br><span class="line">                <span class="keyword">if</span> (!awaiter.IsCompleted)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">0</span>);</span><br><span class="line">                    &lt;&gt;u__1 = awaiter;</span><br><span class="line">                    &lt;MethodAsync&gt;d__1 stateMachine = <span class="keyword">this</span>;</span><br><span class="line">                    &lt;&gt;t__builder.AwaitUnsafeOnCompleted(<span class="keyword">ref</span> awaiter, <span class="keyword">ref</span> stateMachine);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                awaiter = &lt;&gt;u__1;</span><br><span class="line">                &lt;&gt;u__1 = <span class="literal">default</span>(TaskAwaiter);</span><br><span class="line">                num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            awaiter.GetResult();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;synchronous run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">            &lt;&gt;t__builder.SetException(exception);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">        &lt;&gt;t__builder.SetResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IAsyncStateMachine.MoveNext()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span></span><br><span class="line">        <span class="keyword">this</span>.MoveNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetStateMachine</span>(<span class="params">IAsyncStateMachine stateMachine</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine</span></span><br><span class="line">        <span class="keyword">this</span>.SetStateMachine(stateMachine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="meta">AsyncStateMachine(typeof(&lt;MethodAsync&gt;d__1))</span>]</span><br><span class="line">[<span class="meta">DebuggerStepThrough</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Task <span class="title">MethodAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    &lt;MethodAsync&gt;d__1 stateMachine = <span class="keyword">new</span> &lt;MethodAsync&gt;d__1();</span><br><span class="line">    stateMachine.&lt;&gt;t__builder = AsyncTaskMethodBuilder.Create();</span><br><span class="line">    stateMachine.&lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">    stateMachine.&lt;&gt;t__builder.Start(<span class="keyword">ref</span> stateMachine);</span><br><span class="line">    <span class="keyword">return</span> stateMachine.&lt;&gt;t__builder.Task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的<code>反编译代码</code>可以看出，只要被async修饰的方法都会生成状态机<code>IAsyncStateMachine</code>的实现和一个操作状态机的同名方法，状态机内部逻辑由<code>AsyncTaskMethodBuilder</code>控制，至于是否是异步取决于方法内有没有<code>await</code>修饰。</p><h2 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h2><p>await关键字会被编译器生成TaskAwaiter去接收异步方法的Task，负责后续与状态机交互，最终Task会被交给ThreadPool执行和调度。</p><blockquote><p>TaskAwaiter</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> num = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        TaskAwaiter awaiter;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            awaiter = Task.Run(&lt;&gt;c.&lt;&gt;<span class="number">9</span>__1_0 ?? (&lt;&gt;c.&lt;&gt;<span class="number">9</span>__1_0 = <span class="keyword">new</span> Action(&lt;&gt;c.&lt;&gt;<span class="number">9.</span>&lt;MethodAsync&gt;b__1_0))).GetAwaiter();</span><br><span class="line">            <span class="keyword">if</span> (!awaiter.IsCompleted)</span><br><span class="line">            &#123;</span><br><span class="line">                num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">0</span>);</span><br><span class="line">                &lt;&gt;u__1 = awaiter;</span><br><span class="line">                &lt;MethodAsync&gt;d__1 stateMachine = <span class="keyword">this</span>;</span><br><span class="line">                &lt;&gt;t__builder.AwaitUnsafeOnCompleted(<span class="keyword">ref</span> awaiter, <span class="keyword">ref</span> stateMachine);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            awaiter = &lt;&gt;u__1;</span><br><span class="line">            &lt;&gt;u__1 = <span class="literal">default</span>(TaskAwaiter);</span><br><span class="line">            num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        awaiter.GetResult();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;synchronous run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">        &lt;&gt;t__builder.SetException(exception);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">    &lt;&gt;t__builder.SetResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步状态机-IAsyncStateMachine"><a href="#异步状态机-IAsyncStateMachine" class="headerlink" title="异步状态机(IAsyncStateMachine)"></a>异步状态机(IAsyncStateMachine)</h2><blockquote><p>IAsyncStateMachine接口</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAsyncStateMachine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     Moves the state machine to its next state.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MoveNext</span>()</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     Configures the state machine with a heap-allocated replica.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Parameters:</span></span><br><span class="line">    <span class="comment">//   stateMachine:</span></span><br><span class="line">    <span class="comment">//     The heap-allocated replica.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetStateMachine</span>(<span class="params">IAsyncStateMachine stateMachine</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦<code>AsyncTaskMethodBuilder</code>执行<code>Start</code>方法，状态机就会开始启用。状态机通过<code>MoveNext</code>方法来管理状态，状态机第一次调用<code>MoveNext</code>方法,会检查Awaiter是否已完成，没有完成则交由ThreadPool来调度，然后改变状态值等待ThreadPool通知，一旦Task完成，状态机第二次执行<code>MoveNext</code>方法，最终会调用<code>SetResult</code>方法拿到结果，执行剩下代码，状态机结束。</p><p><strong>异步状态机实现原理</strong><br><img src="https://img.chobon.top/blog/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/StateMachine.png" alt="异步状态机"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Task底层是用了ThreadPool实现异步，简化了异步编程。不要在同步方法前用async修饰，会增加无端性能浪费。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> 异步编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于任务异步编程模式（TAP）</title>
      <link href="/posts/32e0f934/"/>
      <url>/posts/32e0f934/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TAP是基于Task的异步编程设计模式,</p><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><ul><li><strong>async</strong> : async关键字修饰的方法都会被视为异步方法，编译器会为方法生成一个对应的状态机</li><li><strong>await</strong> : await关键字后面代表可等待方法，编译器会转化成TaskAwait去处理异步</li></ul><blockquote><p>async修饰符代表了这个方法是异步方法，编译器会生成状态机。</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">MethodAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可等待方法，clr会挂起，等异步方法执行完才会执行剩下的逻辑</span></span><br><span class="line">    <span class="keyword">await</span> Method1Async();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步取消"><a href="#异步取消" class="headerlink" title="异步取消"></a>异步取消</h3><blockquote><p>采用CancellationToken来管理整个取消逻辑</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CancellationTokenSource source = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line">CancellationToken token = source.Token;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">var</span> result <span class="keyword">await</span> <span class="title">MethodAsync</span>(<span class="params">token</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部取消</span></span><br><span class="line">source.Cancel();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">MethodAsync</span>(<span class="params">CancellationToken token</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//内部取消</span></span><br><span class="line">    source.Cancel();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TAP转换APM"><a href="#TAP转换APM" class="headerlink" title="TAP转换APM"></a>TAP转换APM</h2><blockquote><p>采用TaskCompletionSource</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task&lt;<span class="built_in">int</span>&gt; <span class="title">ReadTask</span>(<span class="params"><span class="keyword">this</span> Stream stream, <span class="built_in">byte</span>[] buffer, <span class="built_in">int</span> offset, <span class="built_in">int</span> count, <span class="built_in">object</span> state</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> tcs = <span class="keyword">new</span> TaskCompletionSource&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    stream.BeginRead(buffer, offset, count, ar =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> </span><br><span class="line">        &#123; </span><br><span class="line">            tcs.SetResult(stream.EndRead(ar)); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception exc) </span><br><span class="line">        &#123; </span><br><span class="line">            tcs.SetException(exc); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, state);</span><br><span class="line">    <span class="keyword">return</span> tcs.Task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>官方封装了工具类TaskToApm</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Task转APM密封类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TaskAsyncResult</span>:<span class="title">IAsyncResult</span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Task转成APM对应的Begin方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAsyncResult <span class="title">Begin</span>(<span class="params">Task task, AsyncCallback? callback, <span class="built_in">object</span>? state</span>)</span> =&gt;</span><br><span class="line">            <span class="keyword">new</span> TaskAsyncResult(task, state, callback);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TResult <span class="title">End</span>&lt;<span class="title">TResult</span>&gt;(<span class="params">IAsyncResult asyncResult</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (GetTask(asyncResult) <span class="keyword">is</span> Task&lt;TResult&gt; task)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> task.GetAwaiter().GetResult();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ThrowArgumentException(asyncResult);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">default</span>!; <span class="comment">// unreachable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换后的Begin方法使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BeginMethod</span>(<span class="params">AsyncCallback callback,<span class="built_in">object</span>? </span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TaskToApm.Begin(MethodAsync(),callback,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>TAP已经让异步编程无感了，就像正常的方法一样，不用再关心如何去处理结果。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> 异步编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于事件异步编程模式（EAP）</title>
      <link href="/posts/f25b3530/"/>
      <url>/posts/f25b3530/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>EAP，全称Event-based Asynchronous Pattern，基于事件的异步模式，它提供了一系列的事件声明与方法，用于实现异步模式的各个阶段。</p><p>典型的内置组件为BackgroundWorker组件，本文中我们将使用它来探寻此种模式的执行过程。</p><h2 id="异步模型"><a href="#异步模型" class="headerlink" title="异步模型"></a>异步模型</h2><p>相较于APM的复杂性，基于事件异步编程（EAP）简化了编程，并可以方便得在异步方法过程中通过增加事件来回调，与主线程交互。</p><p>基于事件的异步模式的功能</p><ul><li>支持取消</li><li>支持IsBusy属性</li><li>支持完成通知</li><li>支持进度报告</li><li>支持返回增量结果</li></ul><p>官方提供了<code>AsyncCompletedEventArgs</code>、<code>ProgressChangedEventArgs</code>等基础事件参数，可以直接使用或者继承使用，以及<code>AsyncOperation</code>、<code>AsyncOperationManager</code>操作线程上下文的帮助类</p><p>官方给出一个简单的组件<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.componentmodel.backgroundworker">System.ComponentModel.BackgroundWorker</a></p><h2 id="如何实现异步"><a href="#如何实现异步" class="headerlink" title="如何实现异步"></a>如何实现异步</h2><ul><li>[<em><code>MethodName</code></em>]<strong>Async</strong></li><li>[<em><code>MethodName</code></em>]<strong>Completed</strong></li><li>[<em><code>MethodName</code></em>]<strong>CancelAsync</strong></li><li><strong>EventArgs</strong></li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><blockquote><p>异步方法</p></blockquote><p>对于同步方法创建对应的异步方法，以Async结尾。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="built_in">string</span> param, <span class="built_in">object</span> userState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodAsync</span>(<span class="params"><span class="built_in">string</span> param, <span class="built_in">object</span> userState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>异步完成方法</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完成事件委托声明</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MethodCompletedEventHandler</span>(<span class="params"><span class="built_in">object</span> sender, MethodCompletedEventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成事件参数类，继承自AsyncCompletedEventArgs，如果没有其它属性，直接父类本身即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MethodCompletedEventArgs</span> : <span class="title">System.ComponentModel.AsyncCompletedEventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> MyReturnType Result &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对外提供完成事件绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> MethodCompletedEventHandler MethodCompleted;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通知外部绑定完成事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OnMethodCompleted</span>(<span class="params">MethodCompletedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(MethodCompleted != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      MethodCompleted(<span class="keyword">this</span>,e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>进度更新和增量结果</p></blockquote><p>通常以ProgressChanged结尾，<code>ProgressChangedEventArgs</code>是相对应得事件参数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新事件处理委托声明</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">ProgressChangedEventHandler</span>(<span class="params">ProgressChangedEventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对外提供更新事件绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> MethodProgressChangeEventHandler MethodProgressChanged;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知外部绑定更新事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OnMethodProgressChanged</span>(<span class="params">ProgressChangedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(MethodProgressChanged != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      MethodProgressChanged(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相对应的取消方法</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类中具有多个异步操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodCancelAsync</span>(<span class="params"><span class="built_in">object</span> userState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整个类中具有一个异步操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CancelAsync</span>(<span class="params"><span class="built_in">object</span> userState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程处理和上下文"><a href="#线程处理和上下文" class="headerlink" title="线程处理和上下文"></a>线程处理和上下文</h3><p>同步方法最终是通过WorkerEventHandler委托方法执行，而<a href="https://docs.microsoft.com/zh-cn/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates">委托底层</a>是采用线程池来执行。方法执行完再用AsyncOperation通知主线程或UI线程</p><p><em><strong>注意：.NET Core已经不支持委托异步调用，EAP底层由Task承接异步操作</strong></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过委托来执行同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">WorkerEventHandler</span>(<span class="params">AsyncOperation asyncOp</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SendOrPostCallback onProgressChangeDelegate = <span class="keyword">new</span> SendOrPostCallback(MethodProgressChange);</span><br><span class="line"><span class="keyword">private</span> SendOrPostCallback onCompletedDelegate = <span class="keyword">new</span> SendOrPostCallback(MethodComplete);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MethodWoker</span>(<span class="params">AsyncOperation asyncOp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Method();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过AsyncOperation.Post，触发更新异步传递主线程或UI线程</span></span><br><span class="line">    asyncOp.Post(<span class="keyword">this</span>.onProgressChangeDelegate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do some thing</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行完成后操作</span></span><br><span class="line">    <span class="keyword">this</span>.CompletionMethod(asyncOp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发当前线程更新事件，</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MethodProgressChange</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> e = state <span class="keyword">as</span> ProgressChangedEventArgs;</span><br><span class="line">    OnMethodProgressChanged(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步后续完成逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CompletionMethod</span>(<span class="params">AsyncOperation asyncOp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> MethodCompletedEventArgs();</span><br><span class="line">    <span class="comment">//由AsyncOperation完成后通知主线程或UI线程</span></span><br><span class="line">    asyncOp.PostOperationCompleted(onCompletedDelegate,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发当前线程完成事件</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">MethodComplete</span>(<span class="params"><span class="built_in">object</span> operationState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="function">operationState <span class="keyword">as</span> MethodCompletedEventArgs</span></span><br><span class="line"><span class="function">    <span class="title">OnMethodCompleted</span>(<span class="params">e</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line"></span><br><span class="line">    AsyncOperation asyncOp = AsyncOperationManager.CreateOperation();</span><br><span class="line"></span><br><span class="line">    WorkerEventHandler work = <span class="keyword">new</span> WorkerEventHandler(MethodWoker);</span><br><span class="line"></span><br><span class="line">    work.BeginInvoke(asyncOp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>相较于APM的编程，EAP逻辑思维上更顺畅和丝滑，虽然底层都是用委托来实现异步，没有APM那么晦涩难懂，但是编码量还是不少。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> 异步编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core MVC 源码解读-应用程序模型</title>
      <link href="/posts/c29cb869/"/>
      <url>/posts/c29cb869/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><a href="#">ASP.NET Core MVC</a> 会定义一个 应用程序模型，用于表示 MVC 应用的各个组件。 读取并处理此模型，以修改 MVC 元素的行为方式。 默认情况下，MVC 遵循特定的约定来确定哪些类被视为控制器、这些类上的哪些方法是操作以及参数和路由的行为方式。 自定义此行为以满足应用程序的需求，方法是创建自定义约定，并将其作为全局或特性应用。</p><h2 id="模型-Model-和程序提供器-Provider"><a href="#模型-Model-和程序提供器-Provider" class="headerlink" title="模型(Model)和程序提供器(Provider)"></a>模型(Model)和程序提供器(Provider)</h2><blockquote><p>对象模型(Model)</p></blockquote><p><a href="#">ASP.NET Core MVC</a> 应用程序模型包括用于描述 MVC 应用程序的抽象接口和具体实现类。 此模型是 MVC 根据默认约定发现应用的控制器、操作、操作参数、路由和筛选器的结果。 通过使用应用程序模型，修改应用以遵循默认 MVC 行为中的不同约定。 参数、名称、路由和筛选器都用作操作和控制器的配置数据。<br>ASP.NET Core MVC 应用程序模型具有以下结构：</p><ul><li>ApplicationModel<ul><li>控制器 (ControllerModel)<ul><li>属性 (PropertyModel)</li></ul></li><li>操作 (ActionModel)</li><li>参数 (ParameterModel)</li></ul></li></ul><blockquote><p>程序提供器(IApplicationModelProvider)</p></blockquote><ul><li>IApplicationModelProvider<ul><li>默认提供器 (DefaultApplicationModelProvider)</li><li>权限相关提供器 (AuthorizationApplicationModelProvider)</li><li>跨域相关提供器 (CorsApplicationModelProvider)</li></ul></li></ul><p><code>DefaultApplicationModelProvider</code> 建立了由 ASP.NET Core MVC 使用的许多默认行为。 其职责包括：</p><ul><li>将全局筛选器添加到上下文</li><li>将控制器添加到上下文</li><li>将公共控制器方法作为操作添加</li><li>将操作方法参数添加到上下文</li><li>应用路由和其他属性</li></ul><p><code>AuthorizationApplicationModelProvider</code> 负责应用与 AuthorizeFilter 和 AllowAnonymousFilter 属性关联的行为。</p><p><code>CorsApplicationModelProvider</code> 与和关联的实现 IEnableCorsAttribute 行为 IDisableCorsAttribute 。</p><h2 id="约定-Convention"><a href="#约定-Convention" class="headerlink" title="约定(Convention)"></a>约定(Convention)</h2><p>应用程序模型定义了约定抽象，通过约定抽象来自定义模型行为比重写整个模型或提供程序更简单。 建议使用这些抽象方法修改应用的行为。 约定提供一种方法来编写动态应用自定义项的代码。 尽管 筛选器 提供了修改框架行为的方法，但自定义允许控制整个应用程序的工作方式。</p><p>可用约定如下：</p><ul><li>IApplicationModelConvention</li><li>IControllerModelConvention</li><li>IActionModelConvention</li><li>IParameterModelConvention</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><a href="#">ASP.NET Core MVC</a> 使用接口定义的提供程序模式加载应用程序模型 IApplicationModelProvider 。 此部分介绍此提供程序的工作原理的一些内部实现细节。 使用提供程序模式是一种高级主题，主要用于框架使用。 大多数应用程序应使用约定，而不是提供程序模式。</p><p>IApplicationModelProvider接口有两个方法OnProvidersExecuting和OnProvidersExecuted以及属性Order。</p><p>接口的每个实现OnProvidersExecuting方法基于其属性Order以升序调用。然后，按照相反的顺序调用OnProvidersExecuted方法。</p><p>首先(Order&#x3D;-1000):</p><ul><li><code>DefaultApplicationModelProvider</code></li></ul><p>然后(Order&#x3D;-990):</p><ul><li><code>AuthorizationApplicationModelProvider</code></li><li><code>CorsApplicationModelProvider</code></li></ul><p>最后(Order&#x3D;-900):</p><ul><li><code>ApiBehaviorApplicationModelProvider</code> 执行约定，</li></ul><p>ApplicationModelFactory对象内有IApplicationModelProvider数组和IApplicationModelConvention集合。统一构建ApplicationModel、ControllerModel、ActionModel、ParameterModel等对象</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><blockquote><p>修改ApplicationModel</p></blockquote><p>以下约定用于向应用程序模型添加属性：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ApplicationModels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppModelSample.Conventions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationDescription</span> : <span class="title">IApplicationModelConvention</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _description;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApplicationDescription</span>(<span class="params"><span class="built_in">string</span> description</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _description = description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ApplicationModel application</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            application.Properties[<span class="string">&quot;description&quot;</span>] = _description;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在中添加 MVC 时，应用程序模型约定作为选项应用 Startup.ConfigureServices ：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddMvc(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.Conventions.Add(<span class="keyword">new</span> ApplicationDescription(<span class="string">&quot;My Application Description&quot;</span>));</span><br><span class="line">        options.Conventions.Add(<span class="keyword">new</span> NamespaceRoutingConvention());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改 ControllerModel 说明</p></blockquote><p>控制器模型还可以包含自定义属性。 自定义属性将覆盖在应用程序模型中指定的同名的现有属性。 以下约定属性可在控制器级别添加说明：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ApplicationModels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppModelSample.Conventions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ControllerDescriptionAttribute</span> : <span class="title">Attribute</span>, <span class="title">IControllerModelConvention</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _description;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ControllerDescriptionAttribute</span>(<span class="params"><span class="built_in">string</span> description</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _description = description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ControllerModel controllerModel</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            controllerModel.Properties[<span class="string">&quot;description&quot;</span>] = _description;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此约定作为控制器上的属性应用：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ControllerDescription(<span class="string">&quot;Controller Description&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DescriptionAttributesController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Index</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Description: &quot;</span> + ControllerContext.ActionDescriptor.Properties[<span class="string">&quot;description&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改 ActionModel 说明</p></blockquote><p>可以将单独的特性约定应用于单个操作，重写已应用于应用程序或控制器级别的行为：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ApplicationModels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppModelSample.Conventions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ActionDescriptionAttribute</span> : <span class="title">Attribute</span>, <span class="title">IActionModelConvention</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _description;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ActionDescriptionAttribute</span>(<span class="params"><span class="built_in">string</span> description</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _description = description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ActionModel actionModel</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            actionModel.Properties[<span class="string">&quot;description&quot;</span>] = _description;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改 ParameterModel</p></blockquote><p>可将以下约定应用于操作参数，以修改其 BindingInfo。 以下约定要求参数是路由参数。 其他可能的绑定源（如查询字符串值）将被忽略：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ApplicationModels;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ModelBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppModelSample.Conventions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MustBeInRouteParameterModelConvention</span> : <span class="title">Attribute</span>, <span class="title">IParameterModelConvention</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ParameterModel model</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (model.BindingInfo == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                model.BindingInfo = <span class="keyword">new</span> BindingInfo();</span><br><span class="line">            &#125;</span><br><span class="line">            model.BindingInfo.BindingSource = BindingSource.Path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性可应用于任何操作参数：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ParameterModelController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Will bind:  /ParameterModel/GetById/123</span></span><br><span class="line">    <span class="comment">// WON&#x27;T bind: /ParameterModel/GetById?id=123</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetById</span>(<span class="params">[MustBeInRouteParameterModelConvention]<span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;Bound to id: <span class="subst">&#123;id&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要将约定应用于所有操作参数，请将添加 MustBeInRouteParameterModelConvention 到 MvcOptions 中的 Startup.ConfigureServices ：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options.Conventions.Add(<span class="keyword">new</span> MustBeInRouteParameterModelConvention());</span><br></pre></td></tr></table></figure><blockquote><p>修改 ActionModel 名称</p></blockquote><p>以下约定可修改 ActionModel，以更新其应用到的操作的 名称。 新名称以参数形式提供给该属性。 路由使用此新名称，因此它会影响用于访问此操作方法的路由：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ApplicationModels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppModelSample.Conventions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomActionNameAttribute</span> : <span class="title">Attribute</span>, <span class="title">IActionModelConvention</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _actionName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CustomActionNameAttribute</span>(<span class="params"><span class="built_in">string</span> actionName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _actionName = actionName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ActionModel actionModel</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// this name will be used by routing</span></span><br><span class="line">            actionModel.ActionName = _actionName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此属性应用于 HomeController 中的操作方法：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Route: /Home/MyCoolAction</span></span><br><span class="line">[<span class="meta">CustomActionName(<span class="string">&quot;MyCoolAction&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SomeName</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ControllerContext.ActionDescriptor.ActionName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使方法名称为 SomeName，该属性也会覆盖 MVC 使用该方法名称的约定，并将操作名称替换为 MyCoolAction。 因此，用于访问此操作的路由为 &#x2F;Home&#x2F;MyCoolAction。官方提供了类似功能的特性 ActionNameAttribute 。</p><blockquote><p>自定义路由约定</p></blockquote><p>使用 IApplicationModelConvention 自定义路由的工作方式。 例如，以下约定将控制器的命名空间合并到它们的路由中，并将命名空间中的替换为 . &#x2F; 路由：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ApplicationModels;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppModelSample.Conventions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NamespaceRoutingConvention</span> : <span class="title">IApplicationModelConvention</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ApplicationModel application</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> controller <span class="keyword">in</span> application.Controllers)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> hasAttributeRouteModels = controller.Selectors</span><br><span class="line">                    .Any(selector =&gt; selector.AttributeRouteModel != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!hasAttributeRouteModels</span><br><span class="line">                    &amp;&amp; controller.ControllerName.Contains(<span class="string">&quot;Namespace&quot;</span>)) <span class="comment">// affect one controller in this sample</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Replace the . in the namespace with a / to create the attribute route</span></span><br><span class="line">                    <span class="comment">// Ex: MySite.Admin namespace will correspond to MySite/Admin attribute route</span></span><br><span class="line">                    <span class="comment">// Then attach [controller], [action] and optional &#123;id?&#125; token.</span></span><br><span class="line">                    <span class="comment">// [Controller] and [action] is replaced with the controller and action</span></span><br><span class="line">                    <span class="comment">// name to generate the final template</span></span><br><span class="line">                    controller.Selectors[<span class="number">0</span>].AttributeRouteModel = <span class="keyword">new</span> AttributeRouteModel()</span><br><span class="line">                    &#123;</span><br><span class="line">                        Template = controller.ControllerType.Namespace.Replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;/[controller]/[action]/&#123;id?&#125;&quot;</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// You can continue to put attribute route templates for the controller actions depending on the way you want them to behave</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此约定作为选项添加到 Startup.ConfigureServices ：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddMvc(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.Conventions.Add(<span class="keyword">new</span> ApplicationDescription(<span class="string">&quot;My Application Description&quot;</span>));</span><br><span class="line">        options.Conventions.Add(<span class="keyword">new</span> NamespaceRoutingConvention());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的示例将约定应用于不使用属性路由的路由，其中控制器的 Namespace 名称如下所示：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppModelSample.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NamespaceRoutingController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// using NamespaceRoutingConvention</span></span><br><span class="line">        <span class="comment">// route: /AppModelSample/Controllers/NamespaceRouting/Index</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Index</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;This demonstrates namespace routing.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> AspNetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04安装Nginx</title>
      <link href="/posts/c72d5e78/"/>
      <url>/posts/c72d5e78/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx发音的“engine x”是一个免费的开源高性能HTTP和反向代理服务器，负责处理互联网上一些最大的网站的负载。 本教程将概述在Ubuntu 16.04机器上安装和管理Nginx的步骤。</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>Nginx的软件包在Ubuntu默认软件仓库中可用。 安装非常简单，只需键入以下命令：<br><code>sudo apt update</code><br><code>sudo apt install nginx</code></p><p>安装完成后，请检查Nginx服务状态和版本：</p><ul><li>服务状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# sudo systemctl status nginx</span><br><span class="line">● nginx.service - A high performance web server and a reverse proxy server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sun 2020-11-08 18:11:00 CST; 13s ago</span><br><span class="line"> Main PID: 19268 (nginx)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─19268 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">           └─19269 nginx: worker process                           </span><br><span class="line"></span><br><span class="line">Nov 08 18:11:00 vultr.guest systemd[1]: Starting A high performance web server and a reverse proxy server...</span><br><span class="line">Nov 08 18:11:00 vultr.guest systemd[1]: nginx.service: Failed to parse PID from file /run/nginx.pid: Invalid argument</span><br><span class="line">Nov 08 18:11:00 vultr.guest systemd[1]: Started A high performance web server and a reverse proxy server.</span><br></pre></td></tr></table></figure><ul><li>版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# sudo nginx -v</span><br><span class="line">nginx version: nginx/1.10.3 (Ubuntu)</span><br></pre></td></tr></table></figure><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><ul><li>如果您正在运行防火墙，则还需要打开端口80和443。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# sudo ufw allow &#x27;Nginx Full&#x27;</span><br><span class="line">Rules updated</span><br><span class="line">Rules updated (v6)</span><br></pre></td></tr></table></figure><ul><li>您可以通过以下方式验证更改：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# sudo ufw status</span><br><span class="line">Status: inactive</span><br></pre></td></tr></table></figure><ul><li>如果是显示inactive，说明未启用，启用即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# sudo ufw enable</span><br><span class="line">Command may disrupt existing ssh connections. Proceed with operation (y|n)? y</span><br><span class="line">Firewall is active and enabled on system startup</span><br><span class="line">root@vultr:~# sudo ufw status</span><br><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">Nginx Full                 ALLOW       Anywhere</span><br><span class="line">Nginx Full (v6)            ALLOW       Anywhere (v6)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="管理Nginx服务"><a href="#管理Nginx服务" class="headerlink" title="管理Nginx服务"></a>管理Nginx服务</h2><ul><li>您可以像任何其他systemd单位一样管理Nginx服务。 要停止Nginx服务，请运行：</li></ul><p><code>sudo systemctl stop nginx</code></p><ul><li>要再次启动，请键入：</li></ul><p><code>sudo systemctl start nginx</code></p><ul><li>重新启动Nginx服务：</li></ul><p><code>sudo systemctl restart nginx</code></p><ul><li>在进行一些配置更改后重新加载Nginx服务：</li></ul><p><code>$</code>sudo systemctl reload nginx&#96;</p><ul><li>如果你想禁用Nginx服务在启动时启动：</li></ul><p><code>$</code>sudo systemctl disable nginx&#96;</p><ul><li>并重新启用它：</li></ul><p><code>$</code>sudo systemctl enable nginx&#96;</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04上使用 Let&#39;s Encrypt 来保护Nginx</title>
      <link href="/posts/7b545b47/"/>
      <url>/posts/7b545b47/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Let’s Encrypt 是由 Internet Security Research Group（ISRG）开发的免费开放证书颁发机构。 今天几乎所有浏览器都信任 Let’s Encrypt 颁发的证书。</p><p>在本教程中，我们将提供有关如何使用 Ubuntu 16.04 上的 certbot 工具使用 Let’s Encrypt 来保护您的 Nginx 的分步说明。</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><p>在继续本教程之前，请确保您已满足以下先决条件：</p><ul><li>您有一个指向公共服务器 IP 的域名。 在本教程中，我们将使用 example.com。</li><li>您按照这些<a href="../c72d5e78/">说明安装</a>了 Nginx 。</li><li>您有一个适用于您的域的服务器块。 您可以按照本文获取有关如何创建一个的详细信息。</li></ul><h2 id="安装-Certbot"><a href="#安装-Certbot" class="headerlink" title="安装 Certbot"></a>安装 Certbot</h2><p>Certbot 是一个功能齐全且易于使用的工具，可以自动完成获取和更新 Let’s Encrypt SSL证书以及配置Web服务器以使用它们的任务。 certbot 包包含在默认的 Ubuntu 存储库中。</p><p>更新软件包列表并安装 certbot 软件包：</p><p><code>sudo apt update</code><br><code>sudo apt install certbot</code></p><h3 id="Certbot验证方式"><a href="#Certbot验证方式" class="headerlink" title="Certbot验证方式"></a>Certbot验证方式</h3><ul><li>cerbot验证方式有下面几种：apache，nginx，webroot，standalone，dns plugins，manual</li><li>apache，nginx申请的证书只用自身服务的，我们选择通常生产有Standanlone 、Webroot，Manual，DNS Plugins</li><li>Standalone 方式： certbot 会自己运行一个 web server 来进行验证，暂时占用服务器的 80 或者 443 端口。如果我们自己的服务器上已经有 web server 正在运行 （比如 Nginx 或 Apache ），用 standalone 方式的话需要先关掉它，以免冲突。</li><li>Webroot 方式： certbot 会利用既有的 web server，在其 web root目录下创建隐藏文件， Let’s Encrypt 服务端会通过域名来访问这些隐藏文件，以确认你的确拥有对应域名的控制权。</li><li>Manual：表示手动交互模式，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</li><li>DNS Plugins：使用各类型的DNS插件证明这个域名是属于你的，自动验证方式创建泛域名证书，不是所有的域名都能用自动验证方式创建证书，需要查看官方支持域名供应商，如阿里云是没有提供API来自动验证</li></ul><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>这里选择standalone方式</p><p><em><strong>注意：certbot 默认使用http方式对域名所有权进行验证，该操作需要绑定vps的80端口。如果80端口已被占用，请先停止占用的进程，例如停止Nginx：systemctl stop nginx</strong></em></p><blockquote><p>阿里云、腾讯云等购买的服务器，还需要在vps网页后台的安全组中放行80端口。</p></blockquote><p>如果有其他二级域名，继续添加-d参数即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~# certbot certonly --standalone -d example.com -d www.example.com ...</span><br></pre></td></tr></table></figure><blockquote><p>如果域名记录未指向服务器的IP，会报错并提示域名解析问题。</p></blockquote><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p>各个web服务器的配置不一样，本文提供Nginx的配置例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.example.com example.com;</span><br><span class="line">    rewrite ^(.*) https://$server_name/$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.example.com example.com;</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3; # TLSv1.3需要nginx 1.13.0以上版本</span><br><span class="line">    # 如果nginx版本低，建议使用这种加密算法配置</span><br><span class="line">    # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;</span><br><span class="line">    ssl_ecdh_curve secp384r1;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line">    keepalive_timeout 70;</span><br><span class="line"></span><br><span class="line">    # 这里填写其他配置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置分为两个server段，第一段是所有http请求都导向https；第二段以ssl开头的配置都和证书相关：设置证书和私钥的位置、证书采用的协议、证书的加密算法等信息。</p><p>为了增强安全性，ssl_protocols、ssl_ciphers和ssl_prefer_server_ciphers的配置建议采用以上配置。</p><p>配置好以后，运行nginx -t命令查看有无错误。配置正确的话用systemctl restart nginx 重新启动nginx。</p><p>https使用443端口，如果开启了防火墙，记得放行https服务：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-service=https</span><br><span class="line"># 如果监听了其他端口，使用下面的命令</span><br><span class="line"># firewall-cmd --permanent --add-port=端口号/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="证书自动更新"><a href="#证书自动更新" class="headerlink" title="证书自动更新"></a>证书自动更新</h2><p>Let’s Encrypt证书的有效期是三个月，超过期限则需要续签。证书续期可以手动完成，例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx</span><br><span class="line">certbot renew</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>也可以配置crontab任务自动续签，在&#x2F;etc&#x2F;crontab文件末添加一行：</p><p><code>0 0 1 */2 0 root systemctl stop nginx; /usr/local/bin/certbot renew; systemctl restart nginx</code></p><p>ubuntu默认安装的certbot路径是&#x2F;usr&#x2F;bin&#x2F;certbot，可使用 which certbot 查看，如果输出不同，请记得替换。该配置将每两个月自动运行certbot并续签证书。如果你的证书快到期了还没有续签，贴心的EFF（电子前哨基金会）会发邮件提醒，记得到期前续签就行。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2ray流量伪装</title>
      <link href="/posts/24a6c251/"/>
      <url>/posts/24a6c251/</url>
      
        <content type="html"><![CDATA[<p>本文转载自<a href="https://tlanyan.pp.ua/v2ray-traffic-mask/">V2Ray高级技巧：流量伪装</a>，因为原地址需要翻墙。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>本文假设读者已经具备以下条件：</p><ol><li>一台境外的vps，购买可参考：<a href="https://tlanyan.me/vps-merchant-collection/">一些VPS商家整理</a>;</li><li>一个域名，无备案要求（备案可使用国内CDN加速，但意味着万一有事，被喝茶更容易）。域名购买可参考：<a href="https://tlanyan.me/namesilo-domain-tutorial/">Namesilo域名注册和使用教程</a> 或从 <a href="https://tlanyan.me/domain-register-for-mainland/">适合国人的域名注册商推荐</a> 选购；</li><li>为域名申请一个证书，请参考：<a href="../8b9289f">从Let’s Encrypt获取免费证书</a> 或 <a href="https://tlanyan.me/get-free-ssl-certificates-from-aliyun/">从阿里云获取免费SSL证书</a>(伪装域名用来做站推荐使用)；</li><li>有基本linux技巧，能使用vim&#x2F;nano等编辑器。</li></ol><p>理论上来说，证书不是必须的。但没有tls加持或不做加密，防火墙直接能看出来流量真实意图从而进行干扰，这也是为什么不建议伪装http流量的原因。本文给出的方法采用合法机构签发的证书对流量进行加密，不是做特征混淆得到的TLS流量，从而更难被检测和干扰。</p><p>关于伪装技术的选择，V2ray web+websocket+tls 和 V2ray web+http2+tls 常用来做对比。理论上http2省去了upgrade的请求，性能更好。但实际使用中两者没有明显区别，加之某些web服务器（例如Nginx）不支持后端服务器为http2，所以websocket的方式更流行。如果你要上http2，记得web服务器不能用Nginx，要用支持反代http2的Caddy等软件。</p><p>下文介绍流量伪装的配置步骤，演示域名为tlanyan.me，服务器为Linux(CentOS)，web服务器软件用Nginx，web+websocket+tls组合，最终效果为：http&#x2F;https方式打开域名，显示正常的网页；V2Ray客户端请求特定的路径，例如<a href="https://tlanyan.me/awesomepath%EF%BC%8C%E8%83%BD%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%9B%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B4%E6%8E%A5%E8%AF%B7%E6%B1%82https://tlanyan.me/awesomepath%EF%BC%8C%E8%BF%94%E5%9B%9E%E2%80%9D400">https://tlanyan.me/awesomepath，能科学上网；浏览器直接请求https://tlanyan.me/awesomepath，返回”400</a> bad request”。即外部看起来完全是一个人畜无害的正规网站，特定手段请求特定网址才是科学上网的通道。</p><h2 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h2><p>先设置dns将域名解析到vps的ip，例如<code>www.tlanyan.pp.ua</code>解析到xxx.xxx.xx.xx。<br>如果你上了CDN，则dns要解析到cdn给的ip或者别名网址（cname）。使用cdn能隐藏真实vps的ip，避免vps被墙或能拯救被封锁ip的vps。上cdn有好处，但国内cdn要求域名备案，国外cdn基本上会降低网速，而且配置起来稍显麻烦。建议新手先摸透https流量伪装，有特殊需求再考虑上cdn。</p><p><em><strong>注意：</strong></em> 如果你要用Let’s Encrypt签发的证书，并且希望上cdn，那么应该先解析到vps的ip，获取到证书后再解析到cdn。</p><p><em><strong>更新：</strong></em> 上cdn可参考：<a href="https://tlanyan.pp.ua/go.php?key=cloudflare-forward">v2ray使用cloudflare中转流量，拯救被墙ip</a>，请务必记得先让伪装正常工作再上cdn！</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>如果你的域名并正确配置了SSL证书，可忽略这一步。<br>Nginx是市面上占有率最高的网站服务器软件，Centos 7系统安装nginx命令：<code>yum install -y epel-release &amp;&amp; yum install -y nginx</code>。</p><p>Linux系统上Nginx默认站点配置文件是<code>/etc/nginx/conf.d/</code>目录下的<code>default.conf</code>，我们对伪装网站进行全站https配置，示例内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xxxxx;  # 改成你的域名</span><br><span class="line">    rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    server_name xxxxx;</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    # ssl配置</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3; # tls 1.3要求nginx 1.13.0及以上版本</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line">    ssl_certificate xxxxx; # 改成你的证书地址</span><br><span class="line">    ssl_certificate_key xxxx; # 改成证书密钥文件地址</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/xxxx.access.log;</span><br><span class="line">    error_log /var/log/nginx/xxx.error.log;</span><br><span class="line"></span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好用<code>nginx -t</code>命令查看有无错误，没问题的话<code>systemctl restart nginx</code>启动Nginx。打开浏览器在地址栏输入域名，应该能看到https访问的Nginx欢迎页。</p><p>新域名如何快速做一个像模像样的网站？最简单的办法是从网上下载网站模板，上传到web服务器的根目录（默认是&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html）。对于伪装站来说，静态站足够。如果你的境外流量比较大，建议用爬虫或者其他手段做一个看起来受欢迎、流量大的站点，例如美食博客，图片站等。</p><h2 id="安装配置V2Ray"><a href="#安装配置V2Ray" class="headerlink" title="安装配置V2Ray"></a>安装配置V2Ray</h2><p>详细过程可参考上篇：<a href="../41b67497">V2Ray教程</a>。为了让V2ray能正常运行，请确认防火墙已放行对应端口，并且关闭了selinux：<code>setenforce 0</code>。</p><p>到此为止，Nginx和V2ray应该都能各自独立正常工作。如果有一个出现问题，应该先解决再继续下面的操作。</p><h2 id="Nginx配置websocket"><a href="#Nginx配置websocket" class="headerlink" title="Nginx配置websocket"></a>Nginx配置websocket</h2><p>接下来我们让Nginx和v2ray结合，完成服务端的配置。<br>首先我们选择一个<strong>伪装路径</strong>，建议为二级或者较长的一级路径，例如<code>/abc/def</code>或<code>/awesomepath</code></p><p>配置Nginx将伪装路径的访问都转发到v2ray。编辑&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf的第二个server段，增加以下转发配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location /awesomepath &#123; # 与 V2Ray 配置中的 path 保持一致</span><br><span class="line">      proxy_redirect off;</span><br><span class="line">      proxy_pass http://127.0.0.1:12345; # 假设v2ray的监听地址是12345</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">      proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好后重启Nginx：<code>systemctl restart nginx</code>。</p><p>配置v2ray接受Nginx传来的数据。编辑 <code>/etc/v2ray/config.json</code> 文件，在“inbounds”中新增“streamSetting”配置，设置传输协议为“websocket”。配置好后<code>config.json</code>文件看起来是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warning&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/v2ray/access.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/v2ray/error.log&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span> # 可以使用/usr/bin/v2ray/v2ctl uuid生成</span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>     # 载体配置段，设置为websocket</span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/awesomepath&quot;</span>  # 与nginx中的路径保持一致</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span> # 出于安全考虑，建议只接受本地链接</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geoip:private&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>注意：</strong></em></p><ol><li>json文件不支持注释，上述配置中”#”号及后续内容都要删掉</li><li>因为使用tls加密，<strong>强烈建议alterId改成0</strong>，以节省cpu加快v2ray的速度</li></ol></blockquote><p>配置无误后，重启v2ray服务：<code>systemctl restart v2ray</code>。</p><p>如何测试nginx与v2ray结合没有问题？打开浏览器，输入域名及其他路径，应该显示正常网页或者页面不存在，说明Nginx正常工作；输入域名加v2ray路径，例如<code>https://tlanyan.pp.ua/awesomepath</code>，应该出现”Bad Request”，说明Nginx将流量转发给了v2ray，并且v2ray收到了请求。</p><h2 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h2><p>最后是配置客户端，本文以Windows平台的V2RayN软件为例说明使用方法。</p><p>打开V2RayN，点击<strong>服务器</strong>。在弹框中选择<strong>添加[VMess]服务器</strong>，新建服务器，输入服务器ip，端口写443，把用户id、额外id信息填上。 <strong>底层传输方式(transport)</strong> 下方，接着点<strong>传输协议(network)</strong> ，找到<code>ws</code>，路径一栏输入nginx和v2ray中的路径，例如<strong>伪装域名(host)</strong> 输入：<code>www.tlanyan.me</code>、<strong>路径(path)</strong> 输入：<code>/awesomepath</code>。<br>截图如下：<br><img src="https://img.chobon.top/blog/V2Ray%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/V2Ray%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF.jpg" alt="客户端设置"></p><p>接着下拉<strong>底层传输安全(tls)</strong> ，选择<code>tls</code>。<br><strong>注意：选择加密会影响上网速度</strong></p><p>信息填写正确后，点击<strong>确定</strong>。打开浏览器访问<code>google.com</code>、<code>youtube.com</code>等网站，配置无误的话应该都能正常打开。</p>]]></content>
      
      
      <categories>
          
          <category> V2ray </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 20.04上搭建vpn服务器</title>
      <link href="/posts/8b9289f/"/>
      <url>/posts/8b9289f/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h2><p>OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Windows 2000&#x2F;XP&#x2F;Vista上运行，并包含了许多安全性的功能。</p><h2 id="OpenVPN服务端"><a href="#OpenVPN服务端" class="headerlink" title="OpenVPN服务端"></a>OpenVPN服务端</h2><ul><li>更新系统包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure><h3 id="查看主机网卡和公网IP"><a href="#查看主机网卡和公网IP" class="headerlink" title="查看主机网卡和公网IP"></a>查看主机网卡和公网IP</h3><ul><li>查看主机网卡</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:0b:8a:30 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.27.15.76/20 brd 172.27.32.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 315288418sec preferred_lft 315288418sec</span><br><span class="line">    inet6 fe80::216:3eff:fe0b:8a30/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@ubuntu:~# ip a show eth0</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:0b:8a:30 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.27.15.76/20 brd 172.27.32.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 315288410sec preferred_lft 315288410sec</span><br><span class="line">    inet6 fe80::216:3eff:fe0b:8a30/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><ul><li>查看公网Ip</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# dig +short myip.opendns.com @resolver1.opendns.com</span><br><span class="line">125.56.79.38</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F&#x27;&quot;&#x27; &#x27;&#123; print $2&#125;&#x27;</span><br><span class="line">125.56.79.38</span><br></pre></td></tr></table></figure><ul><li>关于IP地址<br>这里有两个地址，对应两个网卡<ul><li>公网IP：可以直接访问，</li><li>内网IP：只能在内网访问，</li></ul></li></ul><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><ul><li>下载安装脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# wget https://git.io/vpn -O openvpn-install.sh`</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>注意：</strong></em><br>这里可能会下载失败，这个地址会301重定向。如果下载失败，直接把地址换成这个，<code>https://raw.githubusercontent.com/Nyr/openvpn-install/master/openvpn-install.sh</code>。也可以本地下载<a href="https://img.chobon.top/blog/VPN/openvpn-install.sh">openvpn-install.sh</a></p></blockquote><h3 id="脚本安装OpenVPN"><a href="#脚本安装OpenVPN" class="headerlink" title="脚本安装OpenVPN"></a>脚本安装OpenVPN</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo chmod -x openvpn-install</span><br><span class="line">root@ubuntu:~# sudo sh ./openvpn-install.sh</span><br><span class="line">Welcome to this OpenVPN road warrior installer!</span><br><span class="line"></span><br><span class="line">Which IPv4 address should be used?</span><br><span class="line">     1) 172.27.15.76</span><br><span class="line">     2) 172.17.0.1</span><br><span class="line">IPv4 address [1]: 1</span><br><span class="line"></span><br><span class="line">This server is behind NAT. What is the public IPv4 address or hostname?</span><br><span class="line">Public IPv4 address / hostname [125.56.79.38]: </span><br><span class="line"></span><br><span class="line">Which protocol should OpenVPN use?</span><br><span class="line">   1) UDP (recommended)</span><br><span class="line">   2) TCP</span><br><span class="line">Protocol [1]: </span><br><span class="line"></span><br><span class="line">What port should OpenVPN listen to?</span><br><span class="line">Port [1194]: </span><br><span class="line"></span><br><span class="line">Select a DNS server for the clients:</span><br><span class="line">   1) Current system resolvers</span><br><span class="line">   2) Google</span><br><span class="line">   3) 1.1.1.1</span><br><span class="line">   4) OpenDNS</span><br><span class="line">   5) Quad9</span><br><span class="line">   6) AdGuard</span><br><span class="line">DNS server [1]: </span><br><span class="line"></span><br><span class="line">Enter a name for the first client:</span><br><span class="line">Name [client]: desktop</span><br><span class="line"></span><br><span class="line">OpenVPN installation is ready to begin.</span><br><span class="line">Press any key to continue...</span><br></pre></td></tr></table></figure><h3 id="安装后续"><a href="#安装后续" class="headerlink" title="安装后续"></a>安装后续</h3><ul><li>查看安装结果</li></ul><p>稍等片刻就可以执行完，查看安装是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# sudo systemctl status openvpn-server@server.service</span><br><span class="line">● openvpn-server@server.service - OpenVPN service for server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/openvpn-server@.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Fri 2021-12-03 19:48:38 CST; 1s ago</span><br><span class="line">       Docs: man:openvpn(8)</span><br><span class="line">             https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage</span><br><span class="line">             https://community.openvpn.net/openvpn/wiki/HOWTO</span><br><span class="line">   Main PID: 27120 (openvpn)</span><br><span class="line">     Status: &quot;Initialization Sequence Completed&quot;</span><br><span class="line">      Tasks: 1 (limit: 2315)</span><br><span class="line">     Memory: 1.0M</span><br><span class="line">     CGroup: /system.slice/system-openvpn\x2dserver.slice/openvpn-server@server.service</span><br><span class="line">             └─27120 /usr/sbin/openvpn --status /run/openvpn-server/status-server.log --status-version 2 --suppress-timestamps --config server.conf</span><br><span class="line"></span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: Could not determine IPv4/IPv6 protocol. Using AF_INET</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: Socket Buffers: R=[212992-&gt;212992] S=[212992-&gt;212992]</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: UDPv4 link local (bound): [AF_INET]172.26.5.75:1194</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: UDPv4 link remote: [AF_UNSPEC]</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: GID set to nogroup</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: UID set to nobody</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: MULTI: multi_init called, r=256 v=256</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: IFCONFIG POOL: base=10.8.0.2 size=252, ipv6=0</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: IFCONFIG POOL LIST</span><br><span class="line">Dec 03 19:48:38 iZbp1j7lkpb4u4etrx0dq7Z openvpn[27120]: Initialization Sequence Completed</span><br></pre></td></tr></table></figure><ul><li>检查防火墙</li></ul><p>如果VPC安全组没设置进站规则，需要设置一条http协议：UDP，端口：1194进站规则</p><p><img src="https://img.chobon.top/blog/VPN/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E5%85%A8%E7%BB%84%E9%85%8D%E7%BD%AE.png" alt="阿里云安全组配置"></p><h2 id="OpenVPN客户端"><a href="#OpenVPN客户端" class="headerlink" title="OpenVPN客户端"></a>OpenVPN客户端</h2><p>查看生成在服务端home路径下的<code>desktop.ovpn</code>客户端配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# ls</span><br><span class="line">desktop.ovpn</span><br></pre></td></tr></table></figure><p>复制OpenVPN服务端生成的客户端配置<code>desktop.ovpn</code>到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@125.56.79.38:~/desktop.ovpn .</span><br></pre></td></tr></table></figure><h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><ul><li>Debian</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~# sudo apt install openvpn</span><br></pre></td></tr></table></figure><ul><li>CentOS</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@centos:~# sudo yum install openvpn</span><br></pre></td></tr></table></figure><p>复制<code>desktop.ovpn</code>到<code>/etc/openvpn/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@linux:~# sudo cp desktop.ovpn /etc/openvpn/client.conf</span><br></pre></td></tr></table></figure><p>测试配置是否可以连通服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@linux:~# sudo openvpn --client --config /etc/openvpn/client.conf</span><br></pre></td></tr></table></figure><p>启动OpenVPN服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@linux:~# sudo systemctl start openvpn@client</span><br></pre></td></tr></table></figure><h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3><ul><li>下载客户端</li></ul><p>Windows客户端<a href="https://openvpn.net/community-downloads/">下载</a></p><p><img src="https://img.chobon.top/blog/VPN/Windows%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt="Windows客户端"></p><ul><li>配置客户端</li></ul><p>有两种方法</p><blockquote><p>第一种</p></blockquote><p>客户端里面选择<code>导入配置文件</code>，选择配置文件导入即可。</p><blockquote><p>第二种</p></blockquote><p>把客户端配置放在<code>C:\Users\&lt;登录名&gt;\OpenVPN\config</code>目录下</p><ul><li>启动OpenVPN</li></ul><p><img src="https://img.chobon.top/blog/VPN/Windows%E6%98%BE%E7%A4%BA%E7%8A%B6%E6%80%81.png" alt="Windows显示状态"></p><h2 id="OpenVPN路由配置"><a href="#OpenVPN路由配置" class="headerlink" title="OpenVPN路由配置"></a>OpenVPN路由配置</h2><p>默认情况是流量优先走了VPN，如果想给特定的IP走VPN，需要增加路由配置</p><blockquote><p>10.8.0.1&#x2F;24路由段走vpn</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route 10.8.0.0 255.255.255.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> OpenVpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abp vNext源码分析-多租户模块</title>
      <link href="/posts/c507985c/"/>
      <url>/posts/c507985c/</url>
      
        <content type="html"><![CDATA[<h2 id="多租户抽象"><a href="#多租户抽象" class="headerlink" title="多租户抽象"></a>多租户抽象</h2><h3 id="租户对象"><a href="#租户对象" class="headerlink" title="租户对象"></a>租户对象</h3><ul><li><code>ICurrentTenant</code> : 当前租户</li><li><code>ICurrentTenantAccessor</code> : 当前租户访问器</li><li><code>BasicTenantInfo</code> : 租户实际对象</li></ul><h3 id="租户存储"><a href="#租户存储" class="headerlink" title="租户存储"></a>租户存储</h3><p><code>ITenantStore</code>是多租户抽象数据源，可以实现ITenantStore，存储租户数据源</p><ul><li><code>ITenantStore</code> : 多租户存储</li></ul><blockquote><p>存储接口</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITenantStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task&lt;TenantConfiguration&gt; <span class="title">FindAsync</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task&lt;TenantConfiguration&gt; <span class="title">FindAsync</span>(<span class="params">Guid id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TenantConfiguration <span class="title">Find</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TenantConfiguration <span class="title">Find</span>(<span class="params">Guid id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置数据存储"><a href="#配置数据存储" class="headerlink" title="配置数据存储"></a>配置数据存储</h4><p>默认从配置文件中读取信息作为多租户存储</p><ul><li><code>DefaultTenantStore</code> : 从配置文件中读取多租户信息</li></ul><blockquote><p>配置对应选项类</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AbpDefaultTenantStoreOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 对应配置文件Tenants节点</span></span><br><span class="line">    <span class="keyword">public</span> TenantConfiguration[] Tenants &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbpDefaultTenantStoreOptions</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Tenants = <span class="keyword">new</span> TenantConfiguration[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件示例</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Tenants&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;446a5211-3d72-4339-9adc-845151f8ada0&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tenant1&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25388015-ef1c-4355-9c18-f6b6ddbaf89d&quot;</span><span class="punctuation">,</span> <span class="comment">// 租户的唯一Id</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tenant2&quot;</span><span class="punctuation">,</span> <span class="comment">// 租户的唯一名称</span></span><br><span class="line">        <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 如果这个租户有专门的数据库来存储数据.它可以提供数据库的字符串(它可以具有默认的连接字符串和每个模块的连接字符串).</span></span><br><span class="line">          <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...write tenant2&#x27;s db connection string here...&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="租户信息"><a href="#租户信息" class="headerlink" title="租户信息"></a>租户信息</h3><p><code>ITenantStore</code>跟<code>TenantConfiguration</code>类一起工作,并且包含了几个租户属性:</p><ul><li><code>Tenant</code> : 多租户领域聚合根</li><li><code>TenantConnectionString</code> : 多租户连接字符串实体</li><li><code>Id</code> : 租户的唯一Id.</li><li><code>Name</code> : 租户的唯一名称.</li><li><code>ConnectionStrings</code>: 如果这个租户有专门的数据库来存储数据.它可以提供数据库的字符串(它可以具有默认的连接字符串和每个模块的连接字符串).</li></ul><p>多租户应用程序可能需要其他租户属性,但这些属性是框架与多个租户一起使用的最低要求.</p><h3 id="租户解析"><a href="#租户解析" class="headerlink" title="租户解析"></a>租户解析</h3><h4 id="抽象定义"><a href="#抽象定义" class="headerlink" title="抽象定义"></a>抽象定义</h4><ul><li><code>ITenantResolver</code> : 租户解析器</li><li><code>ITenantResolveContext</code> : 租户解析上下文</li><li><code>ITenantResolveContributor</code> : 租户解析提供者</li><li><code>ITenantResolveResultAccessor</code> : 租户解析结果访问器</li><li><code>TenantResolveResult</code> : 租户解析结果</li></ul><blockquote><p>租户解析器</p></blockquote><h4 id="默认解析器"><a href="#默认解析器" class="headerlink" title="默认解析器"></a>默认解析器</h4><ul><li><code>TenantResolveContributorBase</code> : 解析提供者抽象类</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">TenantResolveContributorBase</span> : <span class="title">ITenantResolveContributor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> We can make this async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Resolve</span>(<span class="params">ITenantResolveContext context</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>CurrentUserTenantResolveContributor</code> : 当前用户解析器</li><li><code>ActionTenantResolveContributor</code> : 委托解析器，方便开发人员直接在AbpTenantResolveOptions添加设置租户信息逻辑</li></ul><blockquote><p>示例代码</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Configure&lt;AbpTenantResolveOptions&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.TenantResolvers.Add(<span class="keyword">new</span> ActionTenantResolveContributor(context =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">          context.TenantIdOrName = ... <span class="comment">//从其他地方获取租户id或租户名字...</span></span><br><span class="line">    &#125;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Volo.Abp.AspNetCore.MultiTenancy</code>包内实现了多种租户解析器，从当前Web请求(从子域名,请求头,cookie,路由…等</p><h2 id="多租户Web实现"><a href="#多租户Web实现" class="headerlink" title="多租户Web实现"></a>多租户Web实现</h2><h3 id="多租户中间件"><a href="#多租户中间件" class="headerlink" title="多租户中间件"></a>多租户中间件</h3><ul><li><code>MultiTenancyMiddleware</code> : 多租户中间件</li></ul><blockquote><p>多租户中间件</p></blockquote><p>负责解析租户信息，依次从解析方法提供者中解析</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context, RequestDelegate next</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> resolveResult = _tenantResolver.ResolveTenantIdOrName();</span><br><span class="line">    _tenantResolveResultAccessor.Result = resolveResult;</span><br><span class="line"></span><br><span class="line">    TenantConfiguration tenant = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (resolveResult.TenantIdOrName != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tenant = <span class="keyword">await</span> FindTenantAsync(resolveResult.TenantIdOrName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tenant == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(</span><br><span class="line">                code: <span class="string">&quot;Volo.AbpIo.MultiTenancy:010001&quot;</span>,</span><br><span class="line">                message: <span class="string">&quot;Tenant not found!&quot;</span>,</span><br><span class="line">                details: <span class="string">&quot;There is no tenant with the tenant id or name: &quot;</span> + resolveResult.TenantIdOrName</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (_currentTenant.Change(tenant?.Id, tenant?.Name))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> next(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="租户解析器"><a href="#租户解析器" class="headerlink" title="租户解析器"></a>租户解析器</h3><ul><li><code>HttpTenantResolveContributorBase</code> : Web租户解析器抽象类</li></ul><p><code>Volo.Abp.AspNetCore.MultiTenancy</code> 实现了多种租户解析器,从当前Web请求(按优先级排序)中确定当前租户.</p><ul><li><code>CurrentUserTenantResolveContributor</code> : 当前用户解析器（基础模块中实现），如果当前用户已登录,从当前用户的声明中获取租户Id. <strong>出于安全考虑,应该始终将其做为第一个Contributor</strong>.</li><li><code>QueryTenantResolveContributor</code> : 查询租户解析器，尝试从query string参数中获取当前租户,默认参数名为”__tenant”.</li><li><code>RouteTenantResolveContributor</code> : 路由租户解析器，尝试从当前路由中获取(URL路径),默认是变量名是”__tenant”.所以,如果你的路由中定义了这个变量,就可以从路由中确定当前租户.</li><li><code>HeaderTenantResolveContributor</code> : 请求头租户解析器，尝试从HTTP header中获取当前租户,默认的header名称是”__tenant”.</li><li><code>CookieTenantResolveContributor</code> : Cookie租户解析器，通过Cookie中取当前租户值，默认的Cookie名称是”__tenant”.</li></ul><p>可以通过配置文件类<code>AbpAspNetCoreMultiTenancyOptions</code>来更改参数名”__tenant”</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.Configure&lt;AbpAspNetCoreMultiTenancyOptions&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.TenantKey = <span class="string">&quot;MyTenantKey&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="域名租户解析器"><a href="#域名租户解析器" class="headerlink" title="域名租户解析器"></a>域名租户解析器</h4><p>实际项目中,大多数情况下你想通过子域名(如mytenant1.mydomain.com)或全域名(如mytenant.com)中确定当前租户.如果是这样,你可以配置AbpTenantResolveOptions添加一个域名租户解析器.</p><ul><li><code>DomainTenantResolveContributor</code> : 域名租户解析器</li></ul><h5 id="添加子域名解析器"><a href="#添加子域名解析器" class="headerlink" title="添加子域名解析器"></a>添加子域名解析器</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.AspNetCore.MultiTenancy;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Modularity;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.MultiTenancy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyCompany.MyProject</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DependsOn(typeof(AbpAspNetCoreMultiTenancyModule))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">AbpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">ServiceConfigurationContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Configure&lt;AbpTenantResolveOptions&gt;(options =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//子域名格式: &#123;0&#125;.mydomain.com (作为第二优先级解析器添加, 位于CurrentUserTenantResolveContributor之后)</span></span><br><span class="line">                options.TenantResolvers.Insert(<span class="number">1</span>, <span class="keyword">new</span> DomainTenantResolveContributor(<span class="string">&quot;&#123;0&#125;.mydomain.com&quot;</span>));</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多租户基础模块里默认添加CurrentUserTenantResolveContributor，如果使用<code>Volo.Abp.AspNetCore.MultiTenancy</code>模块包，则会添加上述几个解析器。</p><p>根据不同的需求可以在实际使用切换不同的解析器</p><h2 id="多租户模块实现"><a href="#多租户模块实现" class="headerlink" title="多租户模块实现"></a>多租户模块实现</h2><p>Abp框架提供了多个模块，TenantManagement就是其中之一，该模块提供了多租户的创建，存储，修改等功能的实现</p><h3 id="多租户存储数据库持久化"><a href="#多租户存储数据库持久化" class="headerlink" title="多租户存储数据库持久化"></a>多租户存储数据库持久化</h3><ul><li><code>TenantManager</code> : 多租户的领域服务，提供创建和修改业务</li><li><code>ITenantRepository</code> : 多租户的领域仓储，提供持久化实现</li><li><code>TenantStore</code> : 多租户存储实现</li></ul><blockquote><p>TenantManager</p></blockquote><p>将涉及到仓储对象和领域对象的复杂业务放在领域服务中，再通过应用服务暴露给其他模块</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TenantManager</span> : <span class="title">DomainService</span>, <span class="title">ITenantManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> ITenantRepository TenantRepository &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TenantManager</span>(<span class="params">ITenantRepository tenantRepository</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        TenantRepository = tenantRepository;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">async</span> Task&lt;Tenant&gt; <span class="title">CreateAsync</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Check.NotNull(name, <span class="keyword">nameof</span>(name));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> ValidateNameAsync(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tenant(GuidGenerator.Create(), name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">async</span> Task <span class="title">ChangeNameAsync</span>(<span class="params">Tenant tenant, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Check.NotNull(tenant, <span class="keyword">nameof</span>(tenant));</span><br><span class="line">        Check.NotNull(name, <span class="keyword">nameof</span>(name));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> ValidateNameAsync(name, tenant.Id);</span><br><span class="line">        tenant.SetName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">async</span> Task <span class="title">ValidateNameAsync</span>(<span class="params"><span class="built_in">string</span> name, Guid? expectedId = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> tenant = <span class="keyword">await</span> TenantRepository.FindByNameAsync(name);</span><br><span class="line">        <span class="keyword">if</span> (tenant != <span class="literal">null</span> &amp;&amp; tenant.Id != expectedId)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserFriendlyException(<span class="string">&quot;Duplicate tenancy name: &quot;</span> + name); <span class="comment">//<span class="doctag">TODO:</span> A domain exception would be better..?</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TenantStore</p></blockquote><p>基于数据库实现ITenantStore</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TenantStore</span> : <span class="title">ITenantStore</span>, <span class="title">ITransientDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> ITenantRepository TenantRepository &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">protected</span> IObjectMapper&lt;AbpTenantManagementDomainModule&gt; ObjectMapper &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">protected</span> ICurrentTenant CurrentTenant &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TenantStore</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        ITenantRepository tenantRepository, </span></span></span><br><span class="line"><span class="params"><span class="function">        IObjectMapper&lt;AbpTenantManagementDomainModule&gt; objectMapper,</span></span></span><br><span class="line"><span class="params"><span class="function">        ICurrentTenant currentTenant</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        TenantRepository = tenantRepository;</span><br><span class="line">        ObjectMapper = objectMapper;</span><br><span class="line">        CurrentTenant = currentTenant;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">async</span> Task&lt;TenantConfiguration&gt; <span class="title">FindAsync</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (CurrentTenant.Change(<span class="literal">null</span>)) <span class="comment">//<span class="doctag">TODO:</span> No need this if we can implement to define host side (or tenant-independent) entities!</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> tenant = <span class="keyword">await</span> TenantRepository.FindByNameAsync(name);</span><br><span class="line">            <span class="keyword">if</span> (tenant == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ObjectMapper.Map&lt;Tenant, TenantConfiguration&gt;(tenant);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> AspNetCore </category>
          
          <category> ABP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
            <tag> .NET </tag>
            
            <tag> ABP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abp vNext源码分析-功能模块和权限模块</title>
      <link href="/posts/585b74ea/"/>
      <url>/posts/585b74ea/</url>
      
        <content type="html"><![CDATA[<h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><p>功能管理-FeatureManagement是在多租户应用程序中使用，检查定义的功能是否对当前租户有效，功能是否启用。Abp系统功能定义，类似于权限功能一种延伸。</p><ul><li><p><code>FeatureDefinition</code> : 功能定义</p></li><li><p><code>FeatureGroupDefinition</code> : 功能组定义</p></li><li><p><code>FeatureValue</code> : 功能值，记录功能是否可用</p></li><li><p><code>IFeatureValueProvider</code> : 功能值提供器，负责检查功能是否可用。</p></li></ul><p>一般会结合功能存储<code>IFeatureStore</code>使用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FeatureValueProvider</span> : <span class="title">IFeatureValueProvider</span>, <span class="title">ITransientDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> IFeatureStore FeatureStore &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">FeatureValueProvider</span>(<span class="params">IFeatureStore featureStore</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FeatureStore = featureStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetOrNullAsync</span>(<span class="params">FeatureDefinition feature</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>IFeatureChecker</code> : 功能检查，负责连接功能值提供器和功能定义提供器。</li><li><code>IFeatureDefinitionContext</code> : 功能定义上下文，包含功能定义及操作功能定义</li></ul><blockquote><p>功能检查</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFeatureChecker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetOrNullAsync</span>(<span class="params">[NotNull] <span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task&lt;<span class="built_in">bool</span>&gt; <span class="title">IsEnabledAsync</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能定义提供器-FeatureDefinitionProvider"><a href="#功能定义提供器-FeatureDefinitionProvider" class="headerlink" title="功能定义提供器-FeatureDefinitionProvider"></a>功能定义提供器-FeatureDefinitionProvider</h3><ul><li><code>IFeatureDefinitionProvider</code> : 功能定义提供器</li><li><code>IFeatureDefinitionManager</code> : 功能管理器</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFeatureDefinitionManager</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">NotNull</span>]</span><br><span class="line">    <span class="function">FeatureDefinition <span class="title">Get</span>(<span class="params">[NotNull] <span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IReadOnlyList&lt;FeatureDefinition&gt; <span class="title">GetAll</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FeatureDefinition <span class="title">GetOrNull</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IReadOnlyList&lt;FeatureGroupDefinition&gt; <span class="title">GetGroups</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承FeatureDefinitionProvider，重写<code>Define</code>方法，调用<code>IFeatureDefinitionContext</code>内部方法<code>AddGroup</code>，添加功能组定义，<code>FeatureGroupDefinition</code>有<code>AddFeature</code>，可以增加子功能</p><h3 id="功能使用"><a href="#功能使用" class="headerlink" title="功能使用"></a>功能使用</h3><ul><li><code>RequiresFeatureAttribute</code> : 修饰于方法前，针对特定功能开放</li><li><code>DefaultValueFeatureValueProvider</code> : 默认功能值提供器，直接返回功能定义，不作限制</li><li><code>TenantFeatureValueProvider</code> : 租户功能值提供器，限制租户使用的功能</li><li><code>EditionFeatureValueProvider</code> : 编辑功能值提供器，限制用户使用可编辑功能</li></ul><h3 id="功能存储"><a href="#功能存储" class="headerlink" title="功能存储"></a>功能存储</h3><ul><li><code>IFeatureStore</code> : 从仓储中取功能值信息</li></ul><h2 id="权限模块"><a href="#权限模块" class="headerlink" title="权限模块"></a>权限模块</h2><p>权限模块-PermissionManagement，是用于检查用户是否允许在应用程序中执行某些特定的操作。</p><p>Abp继承了<a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/introduction?view=aspnetcore-5.0">ASP.NET Core Authorization</a>，通过增加<strong>permissions</strong>作为自动<a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/policies">策略</a>使得允许授权系统在应用程序服务中可用</p><h3 id="权限定义"><a href="#权限定义" class="headerlink" title="权限定义"></a>权限定义</h3><ul><li><code>PermissionDefinition</code> : 单一权限，例如增删改</li><li><code>PermissionGroupDefinition</code> : 权限组，例如对A的增删改，A就是分组</li></ul><h4 id="权限定义管理器"><a href="#权限定义管理器" class="headerlink" title="权限定义管理器"></a>权限定义管理器</h4><ul><li><code>IPermissionDefinitionContext</code> : 权限定义上下文，顾名思义，就是把权限和权限组定义存于这个类中</li><li><code>IPermissionDefinitionProvider</code> : 权限定义提供者，负责在权限定义上下文绑定权限和权限组定义</li><li><code>IPermissionDefinitionManager</code> : 权限定义管理，负责将上下文中的权限定义整合处理，对外提供调用</li></ul><blockquote><p><code>IPermissionDefinitionProvider</code>接口定义</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPermissionDefinitionProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义权限之前</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PreDefine</span>(<span class="params">IPermissionDefinitionContext context</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义权限</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Define</span>(<span class="params">IPermissionDefinitionContext context</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义权限之后</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostDefine</span>(<span class="params">IPermissionDefinitionContext context</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发者通过继承<code>PermissionDefinitionProvider</code>，在<code>Define()</code>方法内进行注册权限定义即可。<br>Abp框架会自动注入所有实现了IPermissionDefinitionProvider的类，在Abp.Authorization模块内部注册，在</p><blockquote><p>自动注入方法</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AutoAddDefinitionProviders</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> definitionProviders = <span class="keyword">new</span> List&lt;Type&gt;();</span><br><span class="line"></span><br><span class="line">    services.OnRegistred(context =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(IPermissionDefinitionProvider).IsAssignableFrom(context.ImplementationType))</span><br><span class="line">        &#123;</span><br><span class="line">            definitionProviders.Add(context.ImplementationType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将获取到的 Provider 传递给 PermissionOptions 。</span></span><br><span class="line">    services.Configure&lt;PermissionOptions&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.DefinitionProviders.AddIfNotContains(definitionProviders);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>IPermissionDefinitionManager</code>接口定义</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPermissionDefinitionManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 根据权限定义的唯一标识获取权限，一旦不存在就会抛出 AbpException 异常。</span></span><br><span class="line">    [<span class="meta">NotNull</span>]</span><br><span class="line">    <span class="function">PermissionDefinition <span class="title">Get</span>(<span class="params">[NotNull] <span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据权限定义的唯一标识获取权限，如果权限不存在，则返回 null。</span></span><br><span class="line">    [<span class="meta">CanBeNull</span>]</span><br><span class="line">    <span class="function">PermissionDefinition <span class="title">GetOrNull</span>(<span class="params">[NotNull] <span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有的权限。</span></span><br><span class="line">    <span class="function">IReadOnlyList&lt;PermissionDefinition&gt; <span class="title">GetPermissions</span>()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有的权限组。</span></span><br><span class="line">    <span class="function">IReadOnlyList&lt;PermissionGroupDefinition&gt; <span class="title">GetGroups</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理器会创建<code>IPermissionDefinitionContext</code>并传递给所有的<code>PermissionDefinitionProvider</code>，然后从上下文中取出权限保存管理器内部，绑定权限时再通过管理器获取到系统注册的所有权限</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> Dictionary&lt;<span class="built_in">string</span>, PermissionGroupDefinition&gt; <span class="title">CreatePermissionGroupDefinitions</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个临时范围用于解析 Provider，Provider 解析完成之后即被释放。</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> scope = _serviceProvider.CreateScope())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  创建一个权限定义上下文。</span></span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">new</span> PermissionDefinitionContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据之前的类型，通过 IoC 进行解析出实例，指定各个 Provider 的 Define() 方法，会向权限上下文填充权限。</span></span><br><span class="line">        <span class="keyword">var</span> providers = Options</span><br><span class="line">                .DefinitionProviders</span><br><span class="line">                .Select(p =&gt; scope.ServiceProvider.GetRequiredService(p) <span class="keyword">as</span> IPermissionDefinitionProvider)</span><br><span class="line">                .ToList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> provider <span class="keyword">in</span> providers)</span><br><span class="line">        &#123;</span><br><span class="line">            provider.PreDefine(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> provider <span class="keyword">in</span> providers)</span><br><span class="line">        &#123;</span><br><span class="line">            provider.Define(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> provider <span class="keyword">in</span> providers)</span><br><span class="line">        &#123;</span><br><span class="line">            provider.PostDefine(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回权限组名称 - 权限组定义的字典。</span></span><br><span class="line">        <span class="keyword">return</span> context.Groups;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个继承自 <code>PermissionDefinitionProvider</code> 的类,如下所示:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Volo.Abp.Authorization.Permissions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Permissions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStorePermissionDefinitionProvider</span> : <span class="title">PermissionDefinitionProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Define</span>(<span class="params">IPermissionDefinitionContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> myGroup = context.AddGroup(<span class="string">&quot;BookStore&quot;</span>);</span><br><span class="line"></span><br><span class="line">            myGroup.AddPermission(<span class="string">&quot;BookStore_Author_Create&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Abp会自动发现这个类，不需要进行配置</p></blockquote><p>你需要在 <code>Define</code> 方法中添加<strong>权限组</strong>或者获取已存在的权限组,并向权限组中添加<strong>权限</strong>.</p><p>在定义权限后就可以在ASP.NET Core权限系统中当做<strong>策略</strong>名称使用.</p><h3 id="权限值"><a href="#权限值" class="headerlink" title="权限值"></a>权限值</h3><ul><li><code>IPermissionValueProvider</code></li><li><code>IPermissionValuesCheckContext</code> : 负责承载权限值检查的上下文，含权限定义、用户声明</li></ul><p>负责生成权限值提供者<code>PermissionValueProvider</code>，通过使用<code>IPermissionStore</code>取权限值检查<code>IPermissionValuesCheckContext</code> 上下文中<code>ClaimsPrincipal</code>是否获得权限许可。</p><p>Abp提供了三种权限值实现，分别是<code>Client</code>、<code>Role</code>、<code>User</code></p><ul><li><code>ClientPermissionValueProvider</code> : 从当前声明中拿到当前客户端并检查客户端是否具有指定的权限. 这在没有当前登录用户的客户端交互特别有用. 客户端声明由 <code>AbpClaimTypes.ClientId</code> 静态属性定义</li><li><code>RolePermissionValueProvider</code> : 从当前的声明中拿到授予当前用户的角色集合并且判断角色是否具有指定的权限. 角色声明由 <code>AbpClaimTypes.Role</code> 静态属性定义</li><li><code>UserPermissionValueProvider</code> : 从当前的声明中拿到当前用户ID并检查用户授权. 用户声明由 <code>AbpClaimTypes.UserId</code> 静态属性定义</li></ul><p>开发者可以根据需求自己<code>PermissionValueProvider</code>拓展权限检查系统</p><blockquote><p>示例</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SystemAdminPermissionValueProvider</span> : <span class="title">PermissionValueProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemAdminPermissionValueProvider</span>(<span class="params">IPermissionStore permissionStore</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">permissionStore</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Name =&gt; <span class="string">&quot;SystemAdmin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;PermissionGrantResult&gt;</span></span><br><span class="line"><span class="function">           <span class="title">CheckAsync</span>(<span class="params">PermissionValueCheckContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.Principal?.FindFirst(<span class="string">&quot;User_Type&quot;</span>)?.Value == <span class="string">&quot;SystemAdmin&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> PermissionGrantResult.Granted;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> PermissionGrantResult.Undefined;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例<code>SystemAdminPermissionValueProvider</code>允许声明<code>User_Type</code>值为<code>SystemAdmin</code>的用户授予所有权限. 通常在<code>Provider</code>中使用当前声明和 <code>IPermissionStore</code>.</p><p><code>PermissionValueProvider</code> 的 <code>CheckAsync</code> 应该返回下面三个值之一:</p><ul><li><code>PermissionGrantResult.Granted</code> 授予用户权限,如果没有其他的授权值提供程序返回 <code>Prohibited</code>, 那么最后会返回 <code>Granted</code>.</li><li><code>PermissionGrantResult.Prohibited</code> 禁止授权用户,任何一个授权值提供程序返回了 <code>Prohibited</code>, 那么其他的提供程序返回的值都不再重要.</li><li><code>PermissionGrantResult.Undefined</code> 代表当前无法确定是否授予或禁止权限, 返回<code>UnDefined</code>由其他权限值提供程序检查权限.</li></ul><p>定义<code>Provider</code>后将其添加到 <code>AbpPermissionOptions</code>,如下所示:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configure&lt;AbpPermissionOptions&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.ValueProviders.Add&lt;SystemAdminPermissionValueProvider&gt;();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="权限检查管理器"><a href="#权限检查管理器" class="headerlink" title="权限检查管理器"></a>权限检查管理器</h4><ul><li><code>IPermissionValueProviderManager</code> : 负责提供权限设定值，可以从存储中获取，也可以从配置里获取</li></ul><p>负责管理应用程序中或者权限存储中的权限值，统一访问管理器</p><blockquote><p><code>IPermissionValueProviderManager</code>接口定义</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPermissionValueProviderManager</span></span><br><span class="line">&#123;</span><br><span class="line">    IReadOnlyList&lt;IPermissionValueProvider&gt; ValueProviders &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PermissionValueProviderManager</span> : <span class="title">IPermissionValueProviderManager</span>, <span class="title">ISingletonDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IReadOnlyList&lt;IPermissionValueProvider&gt; ValueProviders =&gt; _lazyProviders.Value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Lazy&lt;List&lt;IPermissionValueProvider&gt;&gt; _lazyProviders;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AbpPermissionOptions Options &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionValueProviderManager</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        IServiceProvider serviceProvider,</span></span></span><br><span class="line"><span class="params"><span class="function">        IOptions&lt;AbpPermissionOptions&gt; options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Options = options.Value;</span><br><span class="line"></span><br><span class="line">        _lazyProviders = <span class="keyword">new</span> Lazy&lt;List&lt;IPermissionValueProvider&gt;&gt;(</span><br><span class="line">            () =&gt; Options</span><br><span class="line">                .ValueProviders</span><br><span class="line">                .Select(c =&gt; serviceProvider.GetRequiredService(c) <span class="keyword">as</span> IPermissionValueProvider)</span><br><span class="line">                .ToList(),</span><br><span class="line">            <span class="literal">true</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><blockquote><p>Abp连接权限定义和权限值</p></blockquote><ul><li><code>IPermissionChecker</code> : 权限检查</li></ul><blockquote><p>权限检查类</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPermissionChecker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task&lt;<span class="built_in">bool</span>&gt; <span class="title">IsGrantedAsync</span>(<span class="params">[NotNull]<span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task&lt;<span class="built_in">bool</span>&gt; <span class="title">IsGrantedAsync</span>(<span class="params">[CanBeNull] ClaimsPrincipal claimsPrincipal, [NotNull]<span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task&lt;MultiplePermissionGrantResult&gt; <span class="title">IsGrantedAsync</span>(<span class="params">[NotNull]<span class="built_in">string</span>[] names</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task&lt;MultiplePermissionGrantResult&gt; <span class="title">IsGrantedAsync</span>(<span class="params">[CanBeNull] ClaimsPrincipal claimsPrincipal, [NotNull]<span class="built_in">string</span>[] names</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结合微软权限策略"><a href="#结合微软权限策略" class="headerlink" title="结合微软权限策略"></a>结合微软权限策略</h4><ul><li><code>PermissionRequirement</code> : 实现微软官方<code>IAuthorizationRequirement</code>，Abp自定义权限拓展</li><li><code>PermissionRequirementHandler</code> : 实现微软官方<code>AuthorizationHandler&lt;PermissionRequirement&gt;</code>，对权限值、权限定义、用户声明进行鉴权</li></ul><p>最终<code>PermissionRequirementHandler</code>会使用<code>IPermissionChecker</code>权限检查，Abp默认实现了<code>PermissionChecker</code>。<code>PermissionChecker</code>用到了上述<code>IPermissionDefinitionManager</code>、<code>IPermissionValueProviderManager</code>、<code>ICurrentPrincipalAccessor</code>、<code>ICurrentTenant</code>。</p><h5 id="微软提供的鉴权规范"><a href="#微软提供的鉴权规范" class="headerlink" title="微软提供的鉴权规范"></a>微软提供的鉴权规范</h5><ul><li><code>AuthorizationPolicy</code> : 微软提供集认证方案和若干<code>IAuthorizationRequirement</code>于一身</li><li><code>DefaultAuthorizationPolicyProvider</code> : 微软默认实现策略提供器</li><li><code>IAuthorizationRequirement</code> : 权限拓展</li><li><code>AuthorizationHandler</code> : 权限处理</li></ul><blockquote><p><code>IAbpAuthorizationPolicyProvider</code> 继承了IAuthorizationPolicyProvider</p></blockquote><p>参阅 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/policies">基于策略的授权</a> 文档了解如何自定义策略.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAbpAuthorizationPolicyProvider</span> : <span class="title">IAuthorizationPolicyProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    Task&lt;List&lt;<span class="built_in">string</span>&gt;&gt; GetPoliciesNamesAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbpAuthorizationPolicyProvider</code>继承AspNetCore提供的<code>DefaultAuthorizationPolicyProvider</code></p><p>该提供器负责从<code>PermissionDefinitionManager</code>获取权限定义生成<code>AuthorizationPolicy</code>，</p><h3 id="权限存储"><a href="#权限存储" class="headerlink" title="权限存储"></a>权限存储</h3><ul><li><code>IPermissionStore</code> : 存储权限值</li></ul><p>负责实现权限存储，从各自领域的仓储中取出权限值，Abp的Permission模块已经实现这块功能。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> AspNetCore </category>
          
          <category> ABP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
            <tag> .NET </tag>
            
            <tag> ABP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes基础概念</title>
      <link href="/posts/68562a4c/"/>
      <url>/posts/68562a4c/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><p><a href="https://www.kubernetes.org.cn/docs"><strong>官方中文文档</strong></a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><ul><li>Kubernetes是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。</li><li>Kubernetes一个核心的特点就是能够自主的管理容器来保证云平台中的容器按照用户的期望状态运行着（比如用户想让apache一直运行，用户不需要关心怎么去做，Kubernetes会自动去监控，然后去重启，新建，总之，让apache一直提供服务），管理员可以加载一个微型服务，让规划器来找到合适的位置，同时，Kubernetes也系统提升工具以及人性化方面，让用户能够方便的部署自己的应用。</li></ul><h3 id="Kubernetes组成"><a href="#Kubernetes组成" class="headerlink" title="Kubernetes组成"></a>Kubernetes组成</h3><ul><li>Kubernetes节点有运行应用容器必备的服务，而这些都是受Master的控制。</li><li>每个节点上都要运行容器（Docker）。容器来负责所有具体的映像下载和容器运行。</li><li>Kubernetes主要由以下几个核心组件组成：<ul><li><strong><code>etcd</code></strong> 保存了整个集群的状态</li><li><strong><code>apiserver</code></strong> 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制</li><li><strong><code>controller manager</code></strong> 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等</li><li><strong><code>scheduler</code></strong> 负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上</li><li><strong><code>kubelet</code></strong> 负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理</li><li><strong><code>container runtime</code></strong> 负责镜像管理以及Pod和容器的真正运行（CRI）</li><li><strong><code>kube-proxy</code></strong> 负责为Service提供cluster内部的服务发现和负载均衡</li></ul></li><li>除了核心组件，还有一些推荐的Add-ons：<ul><li>kube-dns负责为整个集群提供DNS服务</li><li>Ingress Controller为服务提供外网入口</li><li>Heapster提供资源监控</li><li>Dashboard提供GUI</li><li>Federation提供跨可用区的集群</li><li>Fluentd-elasticsearch提供集群日志采集、存储与查询</li></ul></li></ul><h2 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群(Cluster)"></a>集群(Cluster)</h2><h3 id="Kubernetes集群"><a href="#Kubernetes集群" class="headerlink" title="Kubernetes集群"></a>Kubernetes集群</h3><ul><li>Master<ul><li>master是指集群控制节点，来负责整个集群的管理和控制，基本上k8s的所有控制命令都是发给它。执行的命令基本都是在master节点上运行。通常它会占据一个独立的服务器（虚拟机）</li><li>master节点上运行的一些关键进程：<ul><li>kube-apiserver <em><code>(k8s API server)</code></em></li><li>kube-controller-manager</li><li>kube-scheduler</li><li>etcd server</li></ul></li></ul></li><li>Node<ul><li>k8s集群中其他机器被称为node节点，Node可以是一台物理机，也可以是一台虚拟机。当某个node宕机，其上的工作负载会被master自动转移到其他节点上。</li><li>node节点上运行的一些关键进程：<ul><li>kubelet</li><li>kube-proxy</li><li>容器引擎（docker engine、containerd）</li></ul></li></ul></li></ul><h3 id="Kubernetes集群最小工作单位Pod"><a href="#Kubernetes集群最小工作单位Pod" class="headerlink" title="Kubernetes集群最小工作单位Pod"></a>Kubernetes集群最小工作单位Pod</h3><p>Pod是kubernets的最小工作单元。每个pod包含一个或多个容器。pod中的容器会做为一个整体被master调度到一个node上运行。</p><h4 id="kubernets引入pod主要基于下面两个目的"><a href="#kubernets引入pod主要基于下面两个目的" class="headerlink" title="kubernets引入pod主要基于下面两个目的"></a>kubernets引入pod主要基于下面两个目的</h4><ol><li><p>可管理性<br>有些容器天生就是需要紧密联系，一起工作。Pod提供了比容器更高层次的抽象，将它们封装到一个部署单元中。Kubernetes以Pod为最小单元进行调度、扩展、资源共享、管理生命周期。</p></li><li><p>通信和资源共享<br>Pod中所有容器使用同一个网络namespace，即相同的IP地址和Port空间。它们可以直接使用localhost进行通信。同样的，这些容器可以共享存储，当kubernets挂在volume到pod，本质上是将volume挂在到pod中的每一个容器。</p></li></ol><h4 id="Pod有两种使用方式"><a href="#Pod有两种使用方式" class="headerlink" title="Pod有两种使用方式"></a>Pod有两种使用方式</h4><ol><li><p>运行单一容器<br>one-container-per-Pod 是 Kubernetes 最常见的模型，这种情况下，只是将单个容器简单封装成 Pod。即便是只有一个容器，Kubernetes 管理的也是 Pod 而不是直接管理容器</p></li><li><p>运行多个容器</p></li></ol><h2 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器(Controller)"></a>控制器(Controller)</h2><h3 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h3><p>ReplicaSet 确保任何时间都有指定数量的 Pod 副本在运行。ReplicaSet 是下一代的 Replication Controller。</p><h3 id="ReplicationController"><a href="#ReplicationController" class="headerlink" title="ReplicationController"></a>ReplicationController</h3><p>ReplicationController 确保任何时候都有特定数量的Pod副本处于运行状态，新版本推荐ReplicaSet来代替</p><h3 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h3><p>Deployment 是一个更高级的概念，它管理 ReplicaSet，并向 Pod 提供声明式的更新以及许多其他有用的功能。 </p><h3 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h3><p>在每个节点上运行一个Pod，对于管理那些提供主机级别功能（如主机监控和主机日志）的容器</p><h3 id="StatefulSets"><a href="#StatefulSets" class="headerlink" title="StatefulSets"></a>StatefulSets</h3><p>有状态的Pod</p><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>自行终止的Pod，执行一次</p><h4 id="CronbJob"><a href="#CronbJob" class="headerlink" title="CronbJob"></a>CronbJob</h4><p>基于时间调度的Jobs。一个 CronJob 对象就像 crontab (cron table) 文件中的一行。它用 Cron 格式进行编写，并周期性地在给定的调度时间执行 Job。</p><h2 id="存储-Storage"><a href="#存储-Storage" class="headerlink" title="存储(Storage)"></a>存储(Storage)</h2><h3 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h3><p>Volume是Pod中能够被多个容器访问的共同目录。也就是被定义在Pod上，然后被一个Pod中的多个容器挂载到具体的文件目录下，其次，vVolume与Pod生命周期相同，但与容器生命周期不相关，当容器终止或重启，Volume中的数据也不会丢失。</p><h3 id="Persistent-Volumes"><a href="#Persistent-Volumes" class="headerlink" title="Persistent Volumes"></a>Persistent Volumes</h3><p>Persistent Volumes 是已经由管理员提供或者动态使用供应的集群中的一块存储的Storage Class。创建PersistentVolumes，绑定StorageClass，再由PersistentVolumesClaims使用。</p><h3 id="Storage-Class"><a href="#Storage-Class" class="headerlink" title="Storage Class"></a>Storage Class</h3><p>定义存储的类型，不同的类型可能会映射到不同的的服务质量等级或备份策略，或是由集群管理员制定的任意策略。动态卷供应首先需要定义不同的Storage Class对象，当动态供应被调用时，根据Storage Class对象设置的参数，哪些持久卷将被使用。</p><h2 id="网络和负载均衡"><a href="#网络和负载均衡" class="headerlink" title="网络和负载均衡"></a>网络和负载均衡</h2><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Service 为Pods提供自己的IP地址和一组Pod的单个DNS名称，并且可以在它们之间进行负载平衡，可以提供外界对Pod访问的接口</p><p>暴露方式分三种</p><ol><li>ExternalName<br>通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， foo.bar.example.com）。 没有任何类型代理被创建。</li><li>ClusterIP<br>通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问，这也是默认的 ServiceType。</li><li>NodePort<br>通过每个 Node 上的 IP 和静态端口（<code>NodePort</code>）暴露服务。<code>NodePort</code> 服务会路由到 <code>ClusterIP</code> 服务，这个 ClusterIP 服务会自动创建。通过请求 <code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code>，可以从集群的外部访问一个 <code>NodePort</code> 服务。</li><li>LoadBalancer<br>使用云提供商的负载局衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 <code>NodePort</code> 服务和 <code>ClusterIP</code> 服务。</li><li><em><strong>HostPort</strong></em><br>这种比较特殊，在Pod里面配置Ports里配置HostPort。暴露Pod运行的主机端口，供外部访问，如：1.2.3.4:30000</li></ol><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。通过Ingress连接Service，对外部提供更丰富的访问方式</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s和k3s常用命令笔记</title>
      <link href="/posts/e8f50adc/"/>
      <url>/posts/e8f50adc/</url>
      
        <content type="html"><![CDATA[<h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><p><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands">kubectl doc</a></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>创建命令</p><ul><li>+create </li><li>apply</li><li>run</li><li>set</li></ul></li><li><p>操作命令</p><ul><li>get</li><li>edit</li><li>delete</li></ul></li><li><p>查看命令</p><ul><li>describe</li><li>exec</li><li>logs</li></ul></li><li><p>可选参数</p><p><code>-n</code> <code>--namespaces</code> 不加命名空间默认default命名空间</p></li></ul><h3 id="使用命令示例"><a href="#使用命令示例" class="headerlink" title="使用命令示例"></a>使用命令示例</h3><h4 id="资源操作"><a href="#资源操作" class="headerlink" title="资源操作"></a>资源操作</h4><p><em><strong>其他资源deployment、service、job等与pod操作一样</strong></em></p><ul><li><p>创建pod</p><p>默认是创建pod，其他资源可以增加相应名称，<code>job</code>、<code>deployment</code>、<code>service</code> 等</p><p><code>kubectl create  -f &#123;filename&#125; </code></p><p><strong>示例</strong></p><p><code>kubectl create -f ./pod.json</code></p><p>创建pod并启动指定容器</p><p><code>kubectl run &#123;pod-name&#125; --image=&#123;image-name&#125;</code> </p><p><strong>示例</strong></p><p><code>kubectl run nginx --image=nginx</code></p><p>声明式创建pod</p><p><code>kubectl apply (-f &#123;filename&#125; | -k &#123;directory&#125;)</code></p><p><strong>示例</strong></p><p><code>kubectl apply -f ./pod.json</code></p></li><li><p>查看pod</p><p><code>kubectl get pod &#123;pod-name&#125; -n &#123;namespace&#125;</code></p><p><strong>示例</strong></p><p>查看一个pod</p><p><code>kubectl get pods metrics-server-6d684c7b5-n9zr4</code></p><p>查询所有pod</p><p><code>kubectl get pods</code> </p></li><li><p>查看pod详情</p><p><code>kubectl describe pods &#123;pod-name&#125;</code></p><p><strong>示例</strong></p><p><code>kubectl describe pods metrics-server-6d684c7b5-n9zr4</code></p></li><li><p>查看pod内容器日志</p><p><code>kubectl logs &#123;pod-name&#125; -c &#123;container-name&#125;</code></p><p><strong>示例</strong></p><p>如果pod只有一个容器可以省略容器名</p><p><code>kubectl logs metrics-server-6d684c7b5-n9zr4</code></p></li><li><p>在Pod容器内执行命令</p><p><code>kubectl exec &#123;pod-name&#125; -c &#123;container-name&#125; [-it] -- &#123;command&#125;</code></p><p><strong>示例</strong></p><p>如果pod只有一个容器可以省略容器名</p><p><code>kubectl exec metrics-server-6d684c7b5-n9zr4 -it -- /bin/bash </code></p></li><li><p>重启pod</p><p>方法一</p><p>有最新的 yaml 文件。</p><p>在有 yaml 文件的情况下可以直接使用<code>kubectl replace --force -f xxxx.yaml</code> 来强制替换Pod 的 API 对象，从而达到重启的目的</p><p>方法二</p><p>没有 yaml 文件，但是使用的是 Deployment 对象。<br><code>kubectl scale deployment esb-admin --replicas=0</code></p><p><code>kubectl scale deployment esb-admin --replicas=1</code></p><p>由于 Deployment 对象并不是直接操控的 Pod 对象，而是操控的 ReplicaSet 对象，而 ReplicaSet 对象就是由副本的数目的定义和Pod 模板组成的。所以这条命令分别是将ReplicaSet 的数量 scale 到 0，然后又 scale 到 1，那么 Pod 也就重启了。</p><p>方法三</p><p><code>kubectl delete pod &#123;podname&#125;</code></p><p>这个方法就很简单粗暴了，直接把 Pod 删除，因为 Kubernetes 是声明式 API，所以删掉了之后，Pod API 对象就与预期的不一致了，所以会自动重新创建 Pod 保持与预期一致，但是如果ReplicaSet 管理的 Pod 对象很多的话，那么要一个个手动删除，会很麻烦，所以可以使用</p><p><code>kubectl delete replicaset &#123;rs_name&#125;</code></p><p>方法四</p><p><code>kubectl get pod &#123;podname&#125; -o yaml | kubectl replace --force -f -</code></p><p>这种情况下，由于没有 yaml 文件，且启动的是 Pod 对象，那么是无法直接删除或者 scale 到 0 的，但可以通过上面这条命令重启。这条命令的意思是 get 当前运行的 pod 的 yaml声明，并管道重定向输出到 kubectl replace命令的标准输入，从而达到重启的目的。</p></li><li><p>删除pod</p><p><code>kubectl delete &#123;pod-name&#125; </code></p><p>示例</p><p><code>kubectl delete -f ./pod.json</code></p></li></ul><h2 id="清除k8s环境"><a href="#清除k8s环境" class="headerlink" title="清除k8s环境"></a>清除k8s环境</h2><p>sudo docker kill $(sudo docker ps -q)</p><p>#remove all containers<br>sudo docker rm –force $(sudo docker ps -a -q) </p><p>#remove all docker images<br>sudo docker rmi –force $(sudo docker images -q)</p><p>#remove all unused volumes<br>sudo docker volume prune –force</p><p>#k8s<br>sudo service docker stop</p><p>sudo rm -rf &#x2F;etc&#x2F;cni <br>rm -rf &#x2F;etc&#x2F;kubernetes <br>rm -rf &#x2F;opt&#x2F;cni <br>rm -rf &#x2F;var&#x2F;lib&#x2F;calico&#x2F; <br>rm -rf &#x2F;var&#x2F;lib&#x2F;cni&#x2F; <br>rm -rf &#x2F;var&#x2F;lib&#x2F;etcd&#x2F; <br>rm -rf &#x2F;var&#x2F;lib&#x2F;rancher&#x2F;* <br>rm -rf &#x2F;var&#x2F;run&#x2F;calico</p><p>sudo service docker start </p><p>通过rke安装<br><a href="https://www.jianshu.com/p/b082ebdc93bf">https://www.jianshu.com/p/b082ebdc93bf</a></p><p>rke remove</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rancher搭建Kubernetes集群环境</title>
      <link href="/posts/12df9359/"/>
      <url>/posts/12df9359/</url>
      
        <content type="html"><![CDATA[<h2 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h2><p>Rancher 是为使用容器的公司打造的容器管理平台。Rancher 简化了使用 Kubernetes 的流程，开发者可以随处运行 Kubernetes（Run Kubernetes Everywhere），满足 IT 需求规范，赋能 DevOps 团队。</p><h2 id="部署Rancher-Server"><a href="#部署Rancher-Server" class="headerlink" title="部署Rancher Server"></a>部署Rancher Server</h2><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><ul><li>3台CentOS虚拟机<ul><li>Master 1台</li><li>Node 2台</li></ul></li><li>为每台虚拟机安装Docker环境</li></ul><h3 id="安装Rancher-2-x"><a href="#安装Rancher-2-x" class="headerlink" title="安装Rancher 2.x"></a>安装Rancher 2.x</h3><p><em><strong>注意：端口绑定8080和8443，ingress-nginx controller需要占用80和443端口</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=unless-stopped -p 8080:80 -p 8443:443 rancher/rancher</span><br></pre></td></tr></table></figure><h3 id="登录-Rancher-界面并配置初始设置"><a href="#登录-Rancher-界面并配置初始设置" class="headerlink" title="登录 Rancher 界面并配置初始设置"></a>登录 Rancher 界面并配置初始设置</h3><p>稍等一会，登录 Rancher，然后再开始使用 Rancher。登录以后，您需要完成一些一次性的配置。</p><ol><li>打开浏览器，输入主机的IP地址：<code>https://&lt;SERVER_IP&gt;</code></li><li>首次登陆需要设置密码</li><li>设置Rancher Server Url</li></ol><h3 id="创建业务集群"><a href="#创建业务集群" class="headerlink" title="创建业务集群"></a>创建业务集群</h3><p>在Rancher中创建一个Kubernetes集群，使用<strong>自定义集群</strong>选项。</p><ol><li><p>访问<strong>集群</strong>页面，单击<strong>添加集群</strong>。</p></li><li><p>选择<strong>自定义</strong>选项。</p></li><li><p>输入<strong>集群名称</strong>。</p></li><li><p>跳过<strong>集群角色</strong>和<strong>集群选项</strong>。</p></li><li><p>单击<strong>下一步</strong>。</p></li><li><p>勾选<strong>主机选项 - 角色选择</strong>中的所有角色： <strong>Etcd</strong>、 <strong>Control</strong> 和 <strong>Worker</strong>。</p></li><li><p><strong>可选</strong>： Rancher 会自动探查用于 Rancher 通信和集群通信的 IP 地址。您可以通过<strong>主机选项 &gt; 显示高级选项</strong>中的<code>公网地址</code>和<code>内网地址</code>指定 IP 地址。</p></li><li><p>跳过<strong>主机标签</strong>参数，因为对快速入门来说，这部分的参数不太重要。</p></li><li><p>复制代码框中的命令。</p></li><li><p>登录您的 Linux 主机，打开命令行工具，粘贴命令，单击回车键运命令。</p></li><li><p>运行完成后，回到 Rancher 界面，单击<strong>完成</strong>。</p></li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>镜像仓库地址最好改成阿里云，可以加快速度</li></ol><p>  修改docker镜像仓库地址</p><p>  <code>vi /etc/docker/daemon.json</code></p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://lo831hm4.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>  重启docker服务</p><p>  <code>systemctl stop docker</code></p><ol start="2"><li>如果之前装过rancher或者kubernetes环境，需要对环境进行清除</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除docker容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(<span class="built_in">sudo</span> docker ps -aq);</span><br><span class="line"><span class="comment">#删除docker存储卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> $(<span class="built_in">sudo</span> docker volume <span class="built_in">ls</span> -q);</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果是通过yum安装的kubernetes环境，需要卸载kubeadm、kubelet，</span></span><br><span class="line"><span class="comment">#kubectl可以保留，后续方便操作</span></span><br><span class="line"></span><br><span class="line">yum remove kubeadm kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除kubernetes相关文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/ceph \</span><br><span class="line">/etc/cni \</span><br><span class="line">/etc/kubernetes \</span><br><span class="line">/opt/cni \</span><br><span class="line">/opt/rke \</span><br><span class="line">/run/secrets/kubernetes.io \</span><br><span class="line">/run/calico \</span><br><span class="line">/run/flannel \</span><br><span class="line">/var/lib/calico \</span><br><span class="line">/var/lib/etcd \</span><br><span class="line">/var/lib/cni \</span><br><span class="line">/var/lib/kubelet \</span><br><span class="line">/var/lib/rancher \</span><br><span class="line">/var/log/containers \</span><br><span class="line">/var/log/pods \</span><br><span class="line">/var/run/calico</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> Rancher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReSharper快捷键</title>
      <link href="/posts/90e6d807/"/>
      <url>/posts/90e6d807/</url>
      
        <content type="html"><![CDATA[<h2 id="完整的快捷键列表"><a href="#完整的快捷键列表" class="headerlink" title="完整的快捷键列表"></a>完整的快捷键列表</h2><h3 id="代码分析（Code-analysis）"><a href="#代码分析（Code-analysis）" class="headerlink" title="代码分析（Code analysis）"></a>代码分析（Code analysis）</h3><table><thead><tr><th align="left"><strong>Command</strong></th><th align="left"><strong>Shortcut</br>(Visual Studio)</strong></th><th align="left"><strong>Shortcut</br>(IntelliJ IDEA&#x2F;ReSharper 2.x)</strong></th></tr></thead><tbody><tr><td align="left">Toggle code analysis in the current file</td><td align="left">Ctrl+Shift+Alt+8</td><td align="left">Ctrl+Shift+Alt+8</td></tr><tr><td align="left">Go to next code issue (error, warning or suggestion)</td><td align="left">Alt+PgDn</td><td align="left">F12</td></tr><tr><td align="left">Go to previous code issue (error, warning or suggestion)</td><td align="left">Alt+PgUp</td><td align="left">Shift+F12</td></tr><tr><td align="left">Go to next error</td><td align="left">Shift+Alt+PgDn</td><td align="left">Alt+F12</td></tr><tr><td align="left">Go to next error in solution</td><td align="left">Shift+Alt+PgDn</td><td align="left">Alt+F12</td></tr><tr><td align="left">Go to previous error</td><td align="left">Shift+Alt+PgUp</td><td align="left">Shift+Alt+F12</td></tr><tr><td align="left">Go to previous error in solution</td><td align="left">Shift+Alt+PgUp</td><td align="left">Shift+Alt+F12</td></tr><tr><td align="left">Inspect this</td><td align="left">Ctrl+Shift+Alt+A</td><td align="left">Ctrl+Shift+Alt+A</td></tr><tr><td align="left">View type hierarchy</td><td align="left">Ctrl+E,H</td><td align="left">Ctrl+Alt+H</td></tr><tr><td align="left">Inspection Results window</td><td align="left">Ctrl+Alt+V</td><td align="left">Ctrl+Alt+V</td></tr></tbody></table><h3 id="编码援助（Coding-assistance）"><a href="#编码援助（Coding-assistance）" class="headerlink" title="编码援助（Coding assistance）"></a>编码援助（Coding assistance）</h3><table><thead><tr><th align="left"><strong>Command</strong></th><th align="left"><strong>Shortcut</br>(Visual Studio)</strong></th><th align="left"><strong>Shortcut</br>(IntelliJ IDEA&#x2F;ReSharper 2.x)</strong></th></tr></thead><tbody><tr><td align="left">Show action list</td><td align="left">Ctrl+R,W</td><td align="left">Ctrl+R,W</td></tr><tr><td align="left">Paste multiple</td><td align="left"></td><td align="left">Ctrl+Shift+V</td></tr><tr><td align="left">Code cleanup</td><td align="left">Ctrl+E,C</td><td align="left">Ctrl+Alt+F</td></tr><tr><td align="left">Silent code cleanup</td><td align="left">Ctrl+E,F</td><td align="left">Ctrl+Shift+Alt+F</td></tr><tr><td align="left">Symbol code completion</td><td align="left">Ctrl+Space</td><td align="left">Ctrl+Space</td></tr><tr><td align="left">Smart code completion</td><td align="left">Ctrl+Alt+Space</td><td align="left">Ctrl+Shift+Space</td></tr><tr><td align="left">Import symbol completion</td><td align="left">Shift+Alt+Space</td><td align="left">Ctrl+Alt+Space</td></tr><tr><td align="left">Complete statement</td><td align="left">Ctrl+Shift+Enter</td><td align="left">Ctrl+Shift+Enter</td></tr><tr><td align="left">Parameter information</td><td align="left">Ctrl+Shift+Space</td><td align="left">Ctrl+P</td></tr><tr><td align="left">Quick documentation</td><td align="left">Ctrl+Shift+F1</td><td align="left">Ctrl+Q</td></tr><tr><td align="left">Insert live template</td><td align="left">Ctrl+E,L</td><td align="left">Ctrl+J</td></tr><tr><td align="left">Surround with template</td><td align="left">Ctrl+E,U</td><td align="left">Ctrl+Alt+J</td></tr><tr><td align="left">Create file from template</td><td align="left">Ctrl+Alt+Insert</td><td align="left">Ctrl+Alt+Insert</td></tr><tr><td align="left">Generate code</td><td align="left">Alt+Insert</td><td align="left">Alt+Insert</td></tr><tr><td align="left">Move code up</td><td align="left">Ctrl+Shift+Alt+Up</td><td align="left">Ctrl+Shift+Alt+Up</td></tr><tr><td align="left">Move code down</td><td align="left">Ctrl+Shift+Alt+Down</td><td align="left">Ctrl+Shift+Alt+Down</td></tr><tr><td align="left">Move code left</td><td align="left">Ctrl+Shift+Alt+Left</td><td align="left">Ctrl+Shift+Alt+Left</td></tr><tr><td align="left">Move code right</td><td align="left">Ctrl+Shift+Alt+Right</td><td align="left">Ctrl+Shift+Alt+Right</td></tr><tr><td align="left">Extend selection</td><td align="left">Ctrl+Alt+Right</td><td align="left">Ctrl+W</td></tr><tr><td align="left">Shrink selection</td><td align="left">Ctrl+Alt+Left</td><td align="left">Ctrl+Shift+W</td></tr><tr><td align="left">Select containing declaration</td><td align="left">Ctrl+Shift+[</td><td align="left">Ctrl+Shift+[</td></tr><tr><td align="left">Duplicate a line or selection</td><td align="left">Ctrl+D</td><td align="left">Ctrl+D</td></tr><tr><td align="left">Comment with line comment</td><td align="left">Ctrl+Alt+&#x2F;</td><td align="left">Ctrl+&#x2F;</td></tr><tr><td align="left">Comment with block comment</td><td align="left">Ctrl+Shift+&#x2F;</td><td align="left">Ctrl+Shift+&#x2F;</td></tr></tbody></table><h3 id="导航和搜索（Navigation-and-search）"><a href="#导航和搜索（Navigation-and-search）" class="headerlink" title="导航和搜索（Navigation and search）"></a>导航和搜索（Navigation and search）</h3><table><thead><tr><th align="left"><strong>Command</strong></th><th align="left"><strong>Shortcut</br>(Visual Studio)</strong></th><th align="left"><strong>Shortcut</br>(IntelliJ IDEA&#x2F;ReSharper 2.x)</strong></th></tr></thead><tbody><tr><td align="left">Go to type</td><td align="left">Ctrl+T</td><td align="left">Ctrl+N</td></tr><tr><td align="left">Go To File</td><td align="left">Ctrl+Shift+T</td><td align="left">Ctrl+Shift+N</td></tr><tr><td align="left">Go to file member</td><td align="left">Alt+\</td><td align="left">Ctrl+F12</td></tr><tr><td align="left">Go to symbol</td><td align="left">Shift+Alt+T</td><td align="left">Ctrl+Shift+Alt+N</td></tr><tr><td align="left">Navigate To</td><td align="left">Alt+&#96;</td><td align="left">Ctrl+Shift+G</td></tr><tr><td align="left">Go to type of symbol</td><td align="left">Ctrl+Shift+F11</td><td align="left">Ctrl+Shift+T</td></tr><tr><td align="left">Go to declaration</td><td align="left">F12</td><td align="left">Ctrl+B</td></tr><tr><td align="left">Go to implementation</td><td align="left">Ctrl+F12</td><td align="left">Ctrl+Shift+Alt+B</td></tr><tr><td align="left">Go to base symbols</td><td align="left">Alt+Home</td><td align="left">Ctrl+U</td></tr><tr><td align="left">Go to derived symbols</td><td align="left">Alt+End</td><td align="left">Ctrl+Alt+B</td></tr><tr><td align="left">Go to usage</td><td align="left">Shift+Alt+F12</td><td align="left">Ctrl+Alt+F7</td></tr><tr><td align="left">Go to containing declaration</td><td align="left">Ctrl+[</td><td align="left">Ctrl+[</td></tr><tr><td align="left">Go to next member&#x2F;tag</td><td align="left">Alt+Down</td><td align="left">Alt+Down</td></tr><tr><td align="left">Go to previous member&#x2F;tag</td><td align="left">Alt+Up</td><td align="left">Alt+Up</td></tr><tr><td align="left">Find usages</td><td align="left">Shift+F12</td><td align="left">Alt+F7</td></tr><tr><td align="left">Find usages (advanced)</td><td align="left">Ctrl+Shift+Alt+F12</td><td align="left">Shift+Alt+F7</td></tr><tr><td align="left">Highlight usages in file</td><td align="left">Shift+Alt+F11</td><td align="left">Ctrl+Shift+F7</td></tr><tr><td align="left">Go to previous usage</td><td align="left">Ctrl+Alt+PgUp</td><td align="left">Ctrl+Alt+Up</td></tr><tr><td align="left">Go to next usage</td><td align="left">Ctrl+Alt+PgDn</td><td align="left">Ctrl+Alt+Down</td></tr><tr><td align="left">Remove highlighting of usages</td><td align="left">Esc</td><td align="left">Esc</td></tr><tr><td align="left">View recent files</td><td align="left">Ctrl++,</td><td align="left">Ctrl+E</td></tr><tr><td align="left">View recent edits</td><td align="left">Ctrl+Shift+,</td><td align="left">Ctrl+Shift+Alt+Backspace</td></tr><tr><td align="left">Go to previous edit</td><td align="left">Ctrl+Shift+Backspace</td><td align="left">Ctrl+Shift+Backspace</td></tr><tr><td align="left">Go to related files</td><td align="left">Ctrl+Alt+F7</td><td align="left">Ctrl+Shift+Alt+G</td></tr><tr><td align="left">View bookmarks</td><td align="left">Ctrl+`</td><td align="left">Ctrl+&#96;</td></tr><tr><td align="left">Go to a numbered bookmark</td><td align="left">Ctrl+[numeric key]</td><td align="left">Ctrl+[numeric key]</td></tr><tr><td align="left">Set&#x2F;remove a numbered bookmark</td><td align="left">Ctrl+Shift+[numeric key]</td><td align="left">Ctrl+Shift+[numeric key]</td></tr><tr><td align="left">Find Results window</td><td align="left">Ctrl+Alt+F12</td><td align="left">Ctrl+Alt+U</td></tr><tr><td align="left">File structure</td><td align="left">Ctrl+Alt+F</td><td align="left">Ctrl+F11</td></tr><tr><td align="left">To-do items</td><td align="left">Ctrl+Alt+D</td><td align="left"></td></tr><tr><td align="left">Stack Trace Explorer</td><td align="left">Ctrl+E,T</td><td align="left">Ctrl+Shift+E</td></tr><tr><td align="left">Locate in Solution Explorer</td><td align="left">Shift+Alt+L</td><td align="left">Shift+Alt+L</td></tr><tr><td align="left">Analyze references</td><td align="left">Shift+Alt+Y</td><td align="left">Shift+Alt+Y</td></tr></tbody></table><h3 id="重构（Refactorings）"><a href="#重构（Refactorings）" class="headerlink" title="重构（Refactorings）"></a>重构（Refactorings）</h3><table><thead><tr><th align="left"><strong>Command</strong></th><th align="left"><strong>Shortcut</br>(Visual Studio)</strong></th><th align="left"><strong>Shortcut</br>(IntelliJ IDEA&#x2F;ReSharper 2.x)</strong></th></tr></thead><tbody><tr><td align="left">Refactor this</td><td align="left">Ctrl+Shift+R</td><td align="left">Ctrl+Shift+R</td></tr><tr><td align="left">Rename</td><td align="left">Ctrl+R,R</td><td align="left">F2 or Shift+F6</td></tr><tr><td align="left">Move</td><td align="left">Ctrl+R,O</td><td align="left">F6</td></tr><tr><td align="left">Safe delete</td><td align="left">Ctrl+R,D or Alt+Del</td><td align="left">Alt+Del</td></tr><tr><td align="left">Extract method</td><td align="left">Ctrl+R,M</td><td align="left">Ctrl+Alt+M</td></tr><tr><td align="left">Introduce variable</td><td align="left">Ctrl+R,V</td><td align="left">Ctrl+Alt+V</td></tr><tr><td align="left">Introduce field</td><td align="left">Ctrl+R,F</td><td align="left">Ctrl+Alt+D</td></tr><tr><td align="left">Introduce parameter</td><td align="left">Ctrl+R,P</td><td align="left">Ctrl+Alt+P</td></tr><tr><td align="left">Inline variable&#x2F;method&#x2F;field</td><td align="left">Ctrl+R,I</td><td align="left">Ctrl+Alt+N</td></tr><tr><td align="left">Encapsulate field</td><td align="left">Ctrl+R,E</td><td align="left">Ctrl+R,E</td></tr><tr><td align="left">Change signature</td><td align="left">Ctrl+R,S</td><td align="left">Ctrl+F6</td></tr></tbody></table><h3 id="单元测试（Unit-testing）"><a href="#单元测试（Unit-testing）" class="headerlink" title="单元测试（Unit testing）"></a>单元测试（Unit testing）</h3><table><thead><tr><th align="left"><strong>Command</strong></th><th align="left"><strong>Shortcut</br>(Visual Studio)</strong></th><th align="left"><strong>Shortcut</br>(IntelliJ IDEA&#x2F;ReSharper 2.x)</strong></th></tr></thead><tbody><tr><td align="left">Run unit tests</td><td align="left">Ctrl+U,R</td><td align="left">Ctrl+T,R</td></tr><tr><td align="left">Debug unit tests</td><td align="left">Ctrl+U,D</td><td align="left">Ctrl+T,D</td></tr><tr><td align="left">Run all tests in solution</td><td align="left">Ctrl+U,L</td><td align="left">Ctrl+T,L</td></tr><tr><td align="left">Run current test session</td><td align="left">Ctrl+U,Y</td><td align="left">Ctrl+T,Y</td></tr><tr><td align="left">Repeat previous test run</td><td align="left">Ctrl+U,Y</td><td align="left">Ctrl+T,Y</td></tr><tr><td align="left">Append to test session</td><td align="left">Ctrl+U,A</td><td align="left">Ctrl+T,A</td></tr><tr><td align="left">Create new test session</td><td align="left">Ctrl+U,N</td><td align="left">Ctrl+T,N</td></tr><tr><td align="left">Unit Test Explorer</td><td align="left">Ctrl+Alt+U</td><td align="left">Ctrl+Alt+T</td></tr><tr><td align="left">Unit Test Sessions</td><td align="left">Ctrl+Alt+T</td><td align="left">Ctrl+Alt+R</td></tr></tbody></table><h3 id="工具窗口（Tool-windows）"><a href="#工具窗口（Tool-windows）" class="headerlink" title="工具窗口（Tool windows）"></a>工具窗口（Tool windows）</h3><table><thead><tr><th align="left"><strong>Command</strong></th><th align="left"><strong>Shortcut</br>(Visual Studio)</strong></th><th align="left"><strong>Shortcut</br>(IntelliJ IDEA&#x2F;ReSharper 2.x)</strong></th></tr></thead><tbody><tr><td align="left">File structure</td><td align="left">Ctrl+Alt+F</td><td align="left">Ctrl+F11</td></tr><tr><td align="left">Find Results window</td><td align="left">Ctrl+Alt+F12</td><td align="left">Ctrl+Alt+U</td></tr><tr><td align="left">Hierarchies window</td><td align="left">Ctrl+Alt+H</td><td align="left"></td></tr><tr><td align="left">Inspection Results window</td><td align="left">Ctrl+Alt+V</td><td align="left">Ctrl+Alt+V</td></tr><tr><td align="left">Stack Trace Explorer</td><td align="left">Ctrl+E,T</td><td align="left">Ctrl+Shift+E</td></tr><tr><td align="left">Templates Explorer window</td><td align="left">Alt+R,P</td><td align="left">Alt+R,P</td></tr><tr><td align="left">To-do items</td><td align="left">Ctrl+Alt+D</td><td align="left"></td></tr><tr><td align="left">Unit Test Explorer</td><td align="left">Ctrl+Alt+U</td><td align="left">Ctrl+Alt+T</td></tr><tr><td align="left">Unit Test Sessions</td><td align="left">Ctrl+Alt+T</td><td align="left">Ctrl+Alt+R</td></tr><tr><td align="left">Close recent tool</td><td align="left">Ctrl+Shift+F4</td><td align="left">Ctrl+Shift+F4</td></tr><tr><td align="left">Activate recent tool</td><td align="left">Ctrl+Alt+Backspace</td><td align="left">Ctrl+Alt+Backspace</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReSharper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中应用s6-overlay</title>
      <link href="/posts/694278be/"/>
      <url>/posts/694278be/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在最开始使用Docker容器的时候，一直把Docker当作一个Linux虚拟机，后来用久了发现Docker只会起来一个特殊的进程Pid&#x3D;1，Dockerfile里有两个关键字可以指定指令，<code>ENTRYPOINT</code> 和 <code>CMD</code>。当主进程退出的时候容器所拥有的PID命名空间就会被销毁，容器生命周期也会结束。<br>但是有时候需要在Docker容器中运行多个进程，基本做法用shell或者第三方守护进程（<a href="https://github.com/Yelp/dumb-init">dumb-init</a>、<a href="https://github.com/krallin/tini">tini</a>、<a href="https://github.com/arnaudsj/monit">Monit</a>、<a href="https://github.com/Supervisor/supervisor">Supervisor</a>、<a href="https://github.com/just-containers/skaware">skaware</a>、<a href="https://github.com/just-containers/s6-overlay">s6-overlay</a>、<a href="https://github.com/chef-cookbooks/runit">runit</a>、<a href="https://github.com/ibuildthecloud/systemd-docker">Systemd</a>）作为主进程运行其他程序。</p><h2 id="S6介绍"><a href="#S6介绍" class="headerlink" title="S6介绍"></a>S6介绍</h2><ul><li><p>s6程序<br><a href="https://github.com/skarnet/s6">s6</a> 是<a href="https://github.com/skarnet">skarnet（Laurent Bercot）</a> 开发的一款轻量级守护进程套件</p></li><li><p>s6-overlay<br><a href="https://github.com/just-containers/s6-overlay">s6-overlay</a> 是容器内部初始化s6的工具包，我在搜索基础镜像的时候在github上发现，看到readme描述我就被吸引了。</p></li><li><p>文档<br>s6在Linux程序中应用的文章<a href="http://skarnet.org/software/s6/s6-svscan-1.html">《s6-svscan作为初始进程如何运作》</a><br><a href="http://skarnet.org/software/s6/index.html">文档</a></p></li></ul><h2 id="S6使用"><a href="#S6使用" class="headerlink" title="S6使用"></a>S6使用</h2><p><em><strong>这里主要介绍s6-overlay使用</strong></em></p><ul><li>s6-overlay生命周期：<ul><li><strong>step1</strong>：容器初始化会启动s6-svscan作为pid1</li><li><strong>step2</strong>：s6-svscan扫描服务目录并由s6-supervise执行相应脚本和服务<ul><li>1、使用修复所有权和权限&#x2F;etc&#x2F;fix-attrs.d</li><li>2、执行中包含的初始化脚本&#x2F;etc&#x2F;cont-init.d</li><li>3、将服务（&#x2F;etc&#x2F;services.d）复制到s6文件夹下，并向s6-supervise发出信号，并交由s6-supervise接管。</li></ul></li><li><strong>step3</strong>：收到<code>docker stop</code>，转送s6-supervise进程，停止服务并执行终结脚本<code>/etc/cont-finish.d</code>，确保内置服务不会成为僵尸进程。</li></ul></li></ul><p>依照文档描述，系统启动会扫描几个文件夹</p><ul><li><code>/etc/fix-attrs.d</code> : 权限脚本文件夹</li><li><code>/etc/cont-init.d</code> ：初始化脚本文件夹</li><li><code>/etc/services.d</code> ： 服务启动执行脚本文件夹</li><li><code>/etc/cont-finish.d</code> ： 服务结束执行脚本文件夹</li></ul><h3 id="脚本例子"><a href="#脚本例子" class="headerlink" title="脚本例子"></a>脚本例子</h3><h4 id="权限脚本"><a href="#权限脚本" class="headerlink" title="权限脚本"></a>权限脚本</h4><p>linux下执行程序需要很多权限授权，例如文件挂载后需要对挂载文件进行赋予权限等，需要在容器启动后操作。s6-overlay提供了初始化脚本文件夹<code>/etc/fix-attrs.d</code>。匹配格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(路径) recurse(是否嵌套) account(用户名) fmode(文件模式) dmode(目录模式)</span><br></pre></td></tr></table></figure><ul><li><code>path</code>: 文件或路径</li><li><code>recurse</code>: 如果时文件夹，是否嵌套所有子文件</li><li><code>account</code>: 用户名。如果用户没找到就按照默认UID和GID</li><li><code>fmode</code>: 文件模式。如：0644</li><li><code>dmode</code>: 目录模式。如：0755</li></ul><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/mysql <span class="literal">true</span> mysql 0600 0700</span><br></pre></td></tr></table></figure><h4 id="初始化脚本"><a href="#初始化脚本" class="headerlink" title="初始化脚本"></a>初始化脚本</h4><p>执行完权限脚本(<code>/etc/fix-attrs.d/</code>)后，在启动服务(<code>/etc/services.d/</code>)前可以做一些准备工作，如环境变量设置、文件夹创建等。</p><p>举例：</p><p><code>/etc/cont-init.d/02-confd-onetime</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/execlineb -P</span></span><br><span class="line"></span><br><span class="line">with-contenv</span><br><span class="line">s6-envuidgid nginx</span><br><span class="line">multisubstitute</span><br><span class="line">&#123;</span><br><span class="line">  import -u -D0 UID</span><br><span class="line">  import -u -D0 GID</span><br><span class="line">  import -u CONFD_PREFIX</span><br><span class="line">  define CONFD_CHECK_CMD <span class="string">&quot;/usr/sbin/nginx -t -c &#123;&#123; .src &#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">confd --onetime --prefix=<span class="string">&quot;<span class="variable">$&#123;CONFD_PREFIX&#125;</span>&quot;</span> --tmpl-uid=<span class="string">&quot;<span class="variable">$&#123;UID&#125;</span>&quot;</span> --tmpl-gid=<span class="string">&quot;<span class="variable">$&#123;GID&#125;</span>&quot;</span> --tmpl-src=<span class="string">&quot;/etc/nginx/nginx.conf.tmpl&quot;</span> --tmpl-dest=<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span> --tmpl-check-cmd=<span class="string">&quot;<span class="variable">$&#123;CONFD_CHECK_CMD&#125;</span>&quot;</span> etcd</span><br></pre></td></tr></table></figure><h4 id="服务启动脚本"><a href="#服务启动脚本" class="headerlink" title="服务启动脚本"></a>服务启动脚本</h4><ul><li>自定义启动脚本</li></ul><p><code>/etc/services.d/myapp/run</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/execlineb -P</span></span><br><span class="line"></span><br><span class="line">nginx -g <span class="string">&quot;daemon off;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>自定义重启策略</li></ul><p>守护进程默认是自动重启服务，如果想要不自动重启可以在finish脚本里写终止</p><p><code>/etc/services.d/myapp/finish</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/execlineb -S0</span></span><br><span class="line"></span><br><span class="line">s6-svscanctl -t /var/run/s6/services</span><br></pre></td></tr></table></figure><ul><li>可以实现更高级做法，当服务崩溃，就不再重启</li></ul><p><code>/etc/services.d/myapp/finish</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/execlineb -S1</span></span><br><span class="line"><span class="keyword">if</span> &#123; s6-test <span class="variable">$&#123;1&#125;</span> -ne 0 &#125;</span><br><span class="line"><span class="keyword">if</span> &#123; s6-test <span class="variable">$&#123;1&#125;</span> -ne 256 &#125;</span><br><span class="line"></span><br><span class="line">s6-svscanctl -t /var/run/s6/services</span><br></pre></td></tr></table></figure><h4 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h4><p>s6-overlay采用s6已经提供了开箱即用的s6-log，在这基础上提供了进一步封装<code>logutil-service</code>，主要提供以下几个功能</p><ul><li>在s6-log中执行环境变量<code>S6_LOGGING_SCRIPT</code>中的脚本</li><li>移除权限，任何人都可以写文件，不需要再通过<code>s6-setuidgid</code>来启动</li><li>清除所有环境变量</li><li>初始化s6-log日志程序</li></ul><p>在初始化时候创建日志文件夹和任意操作权限</p><p><code>/etc/cont-init.d/myapp-logfolder</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/log/myapp</span><br><span class="line"><span class="built_in">chown</span> nobody:nogroup /var/log/myapp</span><br></pre></td></tr></table></figure><p>输出stdin所有日志</p><p><code>/etc/services.d/myapp/log/run</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">exec</span> logutil-service /var/log/myapp</span><br></pre></td></tr></table></figure><h3 id="Docker基础镜像"><a href="#Docker基础镜像" class="headerlink" title="Docker基础镜像"></a>Docker基础镜像</h3><p>Dockerfile文件参考<a href="https://github.com/smebberson/docker-alpine/blob/master/alpine-base/Dockerfile">smebberson&#x2F;docker-alpine</a>，我增加了镜像时区设置</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alipine:<span class="number">3.9</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> MAINTAINER=chobon@aliyun.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add s6-overlay</span></span><br><span class="line"><span class="keyword">ENV</span> S6_OVERLAY_VERSION=v1.<span class="number">22.1</span>.<span class="number">0</span> \</span><br><span class="line">    GO_DNSMASQ_VERSION=<span class="number">1.0</span>.<span class="number">7</span> \</span><br><span class="line">    TIME_ZONE=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --update --no-cache bind-tools curl libcap &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    curl -sSL https://github.com/just-containers/s6-overlay/releases/download/<span class="variable">$&#123;S6_OVERLAY_VERSION&#125;</span>/s6-overlay-amd64.tar.gz \</span></span><br><span class="line"><span class="language-bash">    | tar xfz - -C / &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    curl -sSL https://github.com/janeczku/go-dnsmasq/releases/download/<span class="variable">$&#123;GO_DNSMASQ_VERSION&#125;</span>/go-dnsmasq-min_linux-amd64 -o /bin/go-dnsmasq &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> +x /bin/go-dnsmasq &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk del curl &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="comment"># create user and give binary permissions to bind to lower port</span></span></span><br><span class="line">    addgroup go-dnsmasq &amp;&amp; \</span><br><span class="line">    adduser -D -g <span class="string">&quot;&quot;</span> -s /bin/sh -G go-dnsmasq go-dnsmasq &amp;&amp; \</span><br><span class="line">    setcap CAP_NET_BIND_SERVICE=+eip /bin/go-dnsmasq</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/<span class="variable">$&#123;TIME_ZONE&#125;</span> /etc/localtime &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;TIME_ZONE&#125;</span>&quot;</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> root /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/init&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> []</span></span><br></pre></td></tr></table></figure><p><code>root</code>文件下目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├─ configroot</span><br><span class="line">│  ├─etc</span><br><span class="line">│  │  ├─fix.attrs.d</span><br><span class="line">│  │  │  ├─01-resolver-resolv</span><br><span class="line">│  │  ├─cont.init.d</span><br><span class="line">│  │  │  ├─30-resolver</span><br><span class="line">│  │  │  ├─40-resolver</span><br><span class="line">│  │  ├─services.d</span><br><span class="line">│  │  │  ├─resolver</span><br><span class="line">│  │  │  │  ├─run</span><br><span class="line">│  │  │  │  ├─finish</span><br></pre></td></tr></table></figure><h3 id="构建S6程序"><a href="#构建S6程序" class="headerlink" title="构建S6程序"></a>构建S6程序</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>这里拿Hexo作为守护服务</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> dobor/alpine-base:latest</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> MAINTAINER=chobon@aliyun.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> HEXO_MODE=server</span><br><span class="line"></span><br><span class="line"><span class="comment"># change ALIYUN apk source</span></span><br><span class="line"><span class="comment">#RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> addgroup hexo &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    adduser -D -g <span class="string">&quot;&quot;</span> -s /bin/sh -G hexo hexo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/hexo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk --update --no-progress --no-cache add git nodejs npm openssh &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install -g hexo-cli &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    hexo init . &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install hexo-deployer-git &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="comment">#npm install hexo-generator-json-content &amp;&amp; \</span></span></span><br><span class="line"><span class="language-bash">    npm install hexo-tag-aplayer &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install cheerio@0.22.0 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install hexo-renderer-pug &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install hexo-renderer-stylus &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install hexo-wordcount &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install hexo-abbrlink &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/cache/apk/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy local files</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> root /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /home/hexo/source /home/hexo/themes /home/hexo/.ssh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R hexo .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4000</span></span><br></pre></td></tr></table></figure><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>新增<code>/root</code>文件结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─ configroot</span><br><span class="line">│  ├─etc</span><br><span class="line">│  │  ├─fix.attrs.d</span><br><span class="line">│  │  │  ├─02-hexo</span><br><span class="line">│  │  ├─cont.init.d</span><br><span class="line">│  │  │  ├─10-hexo</span><br><span class="line">│  │  │  ├─20-hexo</span><br><span class="line">│  │  ├─services.d</span><br><span class="line">│  │  │  ├─hexo</span><br><span class="line">│  │  │  │  ├─run</span><br></pre></td></tr></table></figure><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>给<code>git</code>配置文件<code>.config</code>赋予访问权限</p><p><code>/etc/fix-attrs.d/02-hexo</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/.config <span class="literal">true</span> root 0666 0666</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>设置执行命令的<code>HEXO_RUNAS</code>环境变量</p><p><code>/etc/cont-init.d/10-hexo</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/with-contenv sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unless this has already been defined, set it.</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$HEXO_RUNAS</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;hexo&quot;</span> &gt; /var/run/s6/container_environment/HEXO_RUNAS</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>生成博客静态文件和启用插件</p><p><code>/etc/cont-init.d/20-hexo</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/with-contenv sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate Blog</span></span><br><span class="line"><span class="built_in">exec</span> s6-setuidgid <span class="variable">$HEXO_RUNAS</span> hexo g -f --cwd /home/hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate Douban Page</span></span><br><span class="line"><span class="built_in">exec</span> s6-setuidgid <span class="variable">$HEXO_RUNAS</span> hexo douban --cwd /home/hexo</span><br></pre></td></tr></table></figure><h4 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h4><p>通过环境变量HEXO_MODE来作为web站点服务还是发布静态文件到GitHub上。</p><p><code>/etc/services.d/run</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/with-contenv sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$HEXO_MODE</span> = <span class="string">&#x27;s&#x27;</span> ] || [ <span class="variable">$HEXO_MODE</span> = <span class="string">&#x27;server&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Start Hexo Server.</span></span><br><span class="line">    <span class="built_in">exec</span> s6-setuidgid <span class="variable">$HEXO_RUNAS</span> hexo server -p 4000 --cwd /home/hexo</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$HEXO_MODE</span> = <span class="string">&#x27;d&#x27;</span> ] || [ <span class="variable">$HEXO_MODE</span> = <span class="string">&#x27;deploy&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Start Hexo Deploy.</span></span><br><span class="line">    <span class="built_in">exec</span> s6-setuidgid <span class="variable">$HEXO_RUNAS</span> hexo deploy --cwd /home/hexo</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过把s6整合进hexo镜像内部，使得hexo容器更新一个稳定的微型linux服务器，既保留容器占用资源低，启动快等特点，又使得容器内部可以执行多进程，可以整合更复杂的功能于一个容器内。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> s6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker私有仓库Harbor搭建</title>
      <link href="/posts/ad3a03b5/"/>
      <url>/posts/ad3a03b5/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为搭建k8s集群需要一个私有docker镜像仓库，可以在k8s集群内部搭建Harbor，也可以单独搭建。考虑到单独搭建稳定性会高一点，所以就在虚拟机上单独搭建。</p><h2 id="HarBor-安装与配置"><a href="#HarBor-安装与配置" class="headerlink" title="HarBor 安装与配置"></a>HarBor 安装与配置</h2><h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><table><thead><tr><th align="left">资源</th><th align="left">大小</th></tr></thead><tbody><tr><td align="left">CPU</td><td align="left">2 Core</td></tr><tr><td align="left">内存</td><td align="left">1 G</td></tr><tr><td align="left">磁盘</td><td align="left">40 G</td></tr></tbody></table><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>CentOS 7.4</li><li>Docker 19.03.8</li><li>Docker-Compose</li><li>openssl</li><li>python</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Docker和Docker-Compose安装就不赘述了</p><h4 id="下载Harbor"><a href="#下载Harbor" class="headerlink" title="下载Harbor"></a>下载Harbor</h4><p>Harbor 2.0.0-<a href="https://github.com/goharbor/harbor/releases">下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register ~]# curl -OL https://github.com/goharbor/harbor/releases/download/v2.0.0/harbor-offline-installer-v2.0.0.tgz</span><br></pre></td></tr></table></figure><p>这里选择下载离线安装包，下载完成后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register ~]# tar -zxf harbor-offline-installer-v2.0.0.tgz</span><br></pre></td></tr></table></figure><h4 id="配置Harbor"><a href="#配置Harbor" class="headerlink" title="配置Harbor"></a>配置Harbor</h4><p>解压完成后，修改配置文件harbor.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register ~]# cd harbor</span><br><span class="line">[root@k8s-docker-register harbor]# cp harbor.yml.tmpl harbor.yml</span><br><span class="line">[root@k8s-docker-register harbor]# vi harbor.yml</span><br></pre></td></tr></table></figure><p>只需要修改hostname，修改为自己的域名<code>hub.docker-local.com</code>，密码什么的就默认好了</p><p>保存好配置后，移动harbor文件夹到<code>/usr/local</code>下，删除下载文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register ~]# mv harbor /usr/local/</span><br><span class="line">[root@k8s-docker-register ~]# rm -rf *</span><br></pre></td></tr></table></figure><p>还有密钥文件夹需要创建好<code>\data\cert\server.crt</code>和<code>\data\cert\server.key</code></p><h5 id="生成HTTPS证书"><a href="#生成HTTPS证书" class="headerlink" title="生成HTTPS证书"></a>生成HTTPS证书</h5><p>首先生成私钥，两次密码要一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register harbor]# mkdir -p /data/cert</span><br><span class="line">[root@k8s-docker-register harbor]# cd !$</span><br><span class="line">cd /data/cert</span><br><span class="line">[root@k8s-docker-register cert]# openssl genrsa -des3 -out server.key 2048</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...+++</span><br><span class="line">................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase for server.key:</span><br><span class="line">Verifying - Enter pass phrase for server.key:</span><br></pre></td></tr></table></figure><p>生成证书请求CSR文件，填写一些信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register cert]# openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure><p>备份私钥，移除密码，输入上面填写的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register cert]# cp server.key server.key.org</span><br><span class="line">[root@k8s-docker-register cert]# openssl rsa -in server.key.org -out server.key</span><br><span class="line">Enter pass phrase for server.key.org:</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure><p>用私钥签名证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register cert]# openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.csr</span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=ZJ/L=HZ/O=Default Company Ltd</span><br><span class="line">Getting Private key</span><br></pre></td></tr></table></figure><p>赋予证书权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register cert]# chmod a+x *</span><br></pre></td></tr></table></figure><h4 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h4><p>回到之前路径<code>/usr/local/harbor</code>，执行安装脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-docker-register cert]# cd -</span><br><span class="line">/usr/local/harbor</span><br><span class="line">[root@k8s-docker-register cert]# ./install.sh</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>启动好就可以通过浏览器访问harbor界面了</p><h4 id="访问设置"><a href="#访问设置" class="headerlink" title="访问设置"></a>访问设置</h4><p>再每个需要访问Harbor的虚拟机上都加上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# echo &quot;192.168.1.3 hub.dockerlocal.com&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>至此所有节点都可以通过<code>hub.docker-local.com</code>访问到Harbor了</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyper-v搭建KoolShare路由器给k8s集群代理</title>
      <link href="/posts/5c373c7e/"/>
      <url>/posts/5c373c7e/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>k8s需要用到科学上网，以前的做法是在宿主机搭建一个代理，虚拟机通过代理上网，如果新增一个虚拟机就要配置，相对比较麻烦。更好的是k8s集群一个网络，通过一个路由器代理实现科学上网，新增虚拟机只需要加入这个网络即可。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>Hyper-v和LEDE固件（<a href="http://firmware.koolshare.cn/LEDE_X64_fw867">KoolShare改版</a>）</p><p>本身k8s集群就是搭建在windows上，而且Hyper-v相对VMware比较轻量，操作也便捷。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>路由器网线插口分两种，一种是WAN口一般只有一个，一种是LAN口有若干个。WAN口用来接入网络，一般连接网络猫或者交换机，LAN口用来设备接入，连接电脑或者服务器。</p><h3 id="LEDE"><a href="#LEDE" class="headerlink" title="LEDE"></a>LEDE</h3><p>Linux嵌入式开发环境项目（Linux Embedded Development Environment，LEDE），是路由器固件项目OpenWRT的一个复刻分支项目，并继承原来OpenWRT的开发目标。2018年1月 LEDE 和 OpenWRT 正式宣布合并，合并后的项目使用 OpenWrt的名字。</p><hr><p>实现原理就是在电脑里装一个LEDE虚拟机，分配一张网卡作为WAN口连接外部网络，LAN口开放给宿主机和其他虚拟机。<br>这样配置好后，相当于外部多了一个软路由（LEDE虚拟机），宿主机和其他虚拟机都是通过软路由连接外网，而外部网络也是先接入软路由。</p><h2 id="LEDE虚拟机安装"><a href="#LEDE虚拟机安装" class="headerlink" title="LEDE虚拟机安装"></a>LEDE虚拟机安装</h2><ol><li><p>Win10开启Hyper-v功能（应该只Windows10专业版企业版才会有），确认WIN10版本后，在启用或关闭Windows功能中勾选Hyper-V就好了，应该会重启。</p></li><li><p>在KoolShare论坛下载镜像-<a href="http://firmware.koolshare.cn/LEDE_X64_fw867">下载地址</a></p><table><thead><tr><th align="left">文件</th><th align="left">大小</th><th align="left">更新时间</th></tr></thead><tbody><tr><td align="left">..</td><td align="left">-</td><td align="left">2020-05-08 16:51:09</td></tr><tr><td align="left">openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-combined-squashfs.img.gz</td><td align="left">40.63MB</td><td align="left">2019-09-30 13:19:44</td></tr><tr><td align="left">openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-combined-squashfs.vmdk</td><td align="left">40.50MB</td><td align="left">2019-09-30 13:19:45</td></tr><tr><td align="left">openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-uefi-gpt-squashfs.img.gz</td><td align="left">41.13MB</td><td align="left">2019-09-30 13:19:45</td></tr><tr><td align="left">openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-uefi-gpt-squashfs.vmdk</td><td align="left">41.62MB</td><td align="left">2019-09-30 13:19:45</td></tr><tr><td align="left">openwrt-koolshare-mod-v2.34-r13929-b0a6daaa6b-x86-64-generic-squashfs-combined-efi.vmdk</td><td align="left">48.44MB</td><td align="left">2020-04-13 22:31:56</td></tr><tr><td align="left">openwrt-koolshare-mod-v2.34-r13929-b0a6daaa6b-x86-64-generic-squashfs-combined.vmdk</td><td align="left">47.94MB</td><td align="left">2020-04-13 22:31:56</td></tr></tbody></table><p> 选择<code>openwrt-koolshare-mod-v2.31-r10822-50aa0525d1-x86-64-uefi-gpt-squashfs.vmdk</code>版本</p></li><li><p>上面之所以选择虚拟机或PE下写盘专用的文件，是因为Hyper-v文件拓展名是vhdx，这里没提供，只能通过工具转换，vmdk是VMware虚拟机的文件拓展名。需要下载一个软件StarWind V2V Converter-<a href="https://www.starwindsoftware.com/starwind-v2v-converter#download">下载地址</a><br><strong>转换步骤</strong></p><ul><li>Local file</li><li>选择从koolshare下载的文件</li><li>Local file</li><li>VHD&#x2F;VHDX</li><li>这一步比较关键VHDX growable image和VHDX pre-allocated image这两个选项都是可以的，区别在于虚拟硬盘的空间是否可以增长。但是另外两个选项就不可以选了，我在安装过程中发现似乎只可以使用VHDX的虚拟硬盘。</li></ul></li><li><p>新建虚拟机<br>这一步比较简单，正常新建并使用已有虚拟硬盘的创建方式就可以了。<br><em><strong>注意</strong></em></p><ul><li>如果下载的是uefi版镜像或虚拟硬盘，自然选择第二代启动方式。</li><li>第二代启动方式情况下，先不急于启动虚拟机，在虚拟机设置 &gt; 安全 &gt; 启用安全启动的选项勾掉。</li></ul></li><li><p>启动虚拟机，加载完之后在页面上回车一下，如果出现OPENWRT的Logo说明安装成功了。</p></li></ol><h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><h3 id="内部网络"><a href="#内部网络" class="headerlink" title="内部网络"></a>内部网络</h3><p>新建一个内部虚拟网络交换机，作为LEDE虚拟机的的LAN口，然后所有的虚拟机和宿主机连接这块虚拟机网卡。</p><h3 id="外部网络"><a href="#外部网络" class="headerlink" title="外部网络"></a>外部网络</h3><p>新建一个外部虚拟网络交换机，如果是多网卡就选择接入网络的那块，如果是单网卡就默认好了，取消勾选<code>允许管理操作系统共享此网络适配器</code>，意思是这个网卡不给宿主机共享网络，这时候网络会断开。</p><h3 id="虚拟机网卡连接步骤"><a href="#虚拟机网卡连接步骤" class="headerlink" title="虚拟机网卡连接步骤"></a>虚拟机网卡连接步骤</h3><ul><li><p>LEDE虚拟机设置里，依次添加内部网卡和外部网卡。</p></li><li><p>添加好后在虚拟机上的硬件名称叫网络适配器，在这两个适配器的高级功能里勾选上启用MAC地址欺骗。</p></li><li><p>重启LEDE虚拟机，然后在本地电脑的网络适配器中找到上面新建的内部网络手动分配IP地址。我分配的信息如下：</p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">IP地址</td><td align="left">192.168.1.2</td></tr><tr><td align="left">子网掩码</td><td align="left">255.255.255.0</td></tr><tr><td align="left">默认网关</td><td align="left">192.168.1.1</td></tr><tr><td align="left">首选DNS服务器</td><td align="left">192.168.1.1</td></tr></tbody></table></li><li><p>如果不出问题的话，现在WIN10的网络和Internet的状态中应该可以看到连接了上面创建的内部网卡。</p></li></ul><h3 id="配置软路由"><a href="#配置软路由" class="headerlink" title="配置软路由"></a>配置软路由</h3><p>在宿主机浏览器里输入192.168.1.1即可访问软路由后台，密码为koolshare，进入之后将WAN口的桥接选项勾掉。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里网络所有配置就都完成了。所有虚拟机都可以配置内部网卡然后经由LEDE虚拟机访问外网，这样所有虚拟机同属于同一网段，不再因外部环境变化而受到影响。剩下只需要在路由器内部搭建科学上网和路由规则即可。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyper-v </tag>
            
            <tag> 代理 </tag>
            
            <tag> KoolShare </tag>
            
            <tag> LEDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2Ray服务搭建</title>
      <link href="/posts/41b67497/"/>
      <url>/posts/41b67497/</url>
      
        <content type="html"><![CDATA[<h2 id="V2Ray"><a href="#V2Ray" class="headerlink" title="V2Ray"></a>V2Ray</h2><p><a href="https://v2ray.com/">V2Ray</a>是近几年兴起的科学上网技术，采用新的协议，因功能强大，能有效抵抗墙的干扰而广受好评。V2Ray安装部署及流量伪装请参考：V2Ray教程 和 V2Ray高级技巧：流量伪装。</p><p>V2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目，而 V2Ray 属于最核心的一个。官方中介绍Project V 提供了单一的内核和多种界面操作方式。内核（V2Ray）用于实际的网络交互、路由等针对网络数据的处理，而外围的用户界面程序提供了方便直接的操作流程。不过从时间上来说，先有 V2Ray 才有 Project V。 如果还是不理解，那么简单地说，V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。</p><p>SSR也有<a href="https://github.com/shadowsocks/v2ray-plugin">V2Ray插件</a></p><p>V2Ray优势：</p><ul><li>更完善的协议 ：V2Ray 使用了新的自行研发的 VMess 协议，改正了 Shadowsocks 一些已有的缺点，更难被墙检测到</li><li>更强大的性能 ：网络性能更好，具体数据可以看 <a href="https://steemit.com/cn/@v2ray/3cjiux">V2Ray 官方博客</a></li><li>更丰富的功能 ：<ul><li>mKCP: KCP 协议在 V2Ray 上的实现，不必另行安装 kcptun</li><li>动态端口：动态改变通信的端口，对抗对长时间大流量端口的限速封锁</li><li>路由功能：可以随意设定指定数据包的流向，去广告、反跟踪都可以</li><li>传出代理：看名字可能不太好理解，其实差不多可以称之为多重代理。类似于 Tor 的代理</li><li>数据包伪装：类似于 Shadowsocks-rss 的混淆，另外对于 mKCP 的数据包也可伪装，伪装常见流量，令识别更困难</li><li>WebSocket 协议：可以 PaaS 平台搭建V2Ray，通过 WebSocket 代理。也可以通过它使用 CDN 中转，抗封锁效果更好</li><li>Mux:多路复用，进一步提高科学上网的并发性能</li></ul></li></ul><p>V2Ray缺点：</p><ul><li>配置复杂</li><li>产业链不成熟</li></ul><h2 id="安装V2Ray"><a href="#安装V2Ray" class="headerlink" title="安装V2Ray"></a>安装V2Ray</h2><p><em><strong>本次安装是在Ubuntu 16.04环境下</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:/etc/v2ray# bash &lt;(curl -sL https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><p>安装脚本用官方的就行，如果报错可能是ssl的问题，在 curl 上加个-k的参数，忽略ssl验证</p><p>安装过程很简单，全程自动化，不用操作</p><p>端口和用户密码会初始化，如果不更改就直接用</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>安装好后配置文件在&#x2F;etc&#x2F;v2ray&#x2F;config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;info&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/v2ray/access.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/v2ray/error.log&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0e879ceb-c1ce-4a48-a119-6b5beebd178a&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">87</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geoip:private&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>id:&quot;0e879ceb-c1ce-4a48-a119-6b5beebd178a&quot;</code>就是密码，<code>alterId</code>和<code>level</code>不是必须的</p><p>修改好保存，重启V2Ray服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:/etc/v2ray# systemctl restart v2ray</span><br></pre></td></tr></table></figure><h3 id="多用户配置"><a href="#多用户配置" class="headerlink" title="多用户配置"></a>多用户配置</h3><p>同端口下多用户</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0e879ceb-c1ce-4a48-a119-6b5beebd178a&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">87</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;790bfc89-8317-405c-bf0d-ebe471cce7cd&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">87</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>不同端口多用户</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0e879ceb-c1ce-4a48-a119-6b5beebd178a&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">87</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1081</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;790bfc89-8317-405c-bf0d-ebe471cce7cd&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">58</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>也可以两者相结合</p><h3 id="Windows客户端配置"><a href="#Windows客户端配置" class="headerlink" title="Windows客户端配置"></a>Windows客户端配置</h3><ul><li>V2RayN客户端</li></ul><p><img src="https://img.chobon.top/blog/V2Ray%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/V2RayN%E5%AE%A2%E6%88%B7%E7%AB%AF.jpg" alt="V2RayN客户端"></p><p>地址、端口、用户ID、额外ID按照服务器配置填好，其他不用动，点击确定就可以翻墙了</p><p>除了<a href="https://github.com/2dust/v2rayN/releases">V2RayN</a>还有其他V2Ray客户端，<a href="https://github.com/Cenmrev/V2RayW/releases">V2RayW</a>、<a href="https://github.com/Shinlor/V2RayS/releases">V2RayS</a> 等</p><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><p>V2Ray还可以伪装成https流量，需要nginx+tls</p>]]></content>
      
      
      <categories>
          
          <category> V2ray </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V2Ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程模型（APM）</title>
      <link href="/posts/c5a30916/"/>
      <url>/posts/c5a30916/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近改了个老项目，当初异步是用APM写的，于是重温了下APM</p><h3 id="你知道APM吗"><a href="#你知道APM吗" class="headerlink" title="你知道APM吗"></a>你知道APM吗</h3><p>APM即异步编程模型的简写（Asynchronous Programming Model），写代码的时候或者查看.NET的类库的时候肯定会经常看到和使用以BeginXXX和EndXXX类似的方法，其实你在使用这些方法的时候，你就再使用异步编程模型来编写程序。<br>对于给定XXX同步操作，异步版本的就是BeginXXX和EndXXX，BeginXXX启动操作，EdnXXX获取操作结果，此时如果操作未完成，则阻塞线程等待，变成同步方法。</p><h2 id="异步模型"><a href="#异步模型" class="headerlink" title="异步模型"></a>异步模型</h2><p>从.NET1.0开始就支持的异步编程模型，整个过程是围绕<code>IAsyncResult</code>对象进行的，异步操作通过<code>Begin</code>操作和<code>End</code>操作这两个方法实现。</p><p><code>IAsyncResult</code>对象存储有关异步操作的信息。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAsyncResult</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> IsCompleted</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WaitHandle AsyncWaitHandle</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">object</span> AsyncState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bool</span> CompletedSynchronously</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>AsyncState</strong> : 应用程序的可选对象，其中包含有关异步操作的信息。</li><li><strong>AsyncWaitHandle</strong> : 可用来在异步操作完成之前阻止应用程序执行。</li><li><strong>CompletedSynchronously</strong> : 指示异步操作是否是在用于调用Begin操作的线程上完成，而不是在单独的 ThreadPool 线程上完成。</li><li><strong>IsCompleted</strong> : 指示异步操作是否已完成</li></ul><h2 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h2><p>在调用<code>Begin</code>操作后，应用程序可以继续在调用线程上执行指令，同时异步操作在另一个线程上执行。 每次调用<code>Begin</code>操作时，应用程序还应调用<code>End</code>操作来获取结果。</p><h3 id="开始异步操作"><a href="#开始异步操作" class="headerlink" title="开始异步操作"></a>开始异步操作</h3><p><code>Begin</code>操作方法参数跟同步保持一致，另外增加两个参数。第一个参数是定义一个<code>AsyncCallback</code>委托，该委托是用于异步操作完成时调用的方法。另一个是参数自定义对象，用于传递给回调方法。</p><ul><li>以System.Net.Dns类为例</li></ul><p>BeginGetHostEntry异步方法前面参数是Ip地址对象，后面是回调方法和自定义对象，GetHostEntry是同步方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAsyncResult <span class="title">BeginGetHostEntry</span>(<span class="params">IPAddress address, AsyncCallback requestCallback, <span class="built_in">object</span> stateObject</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IPHostEntry <span class="title">GetHostEntry</span> (<span class="params">IPAddress address</span>)</span>;</span><br></pre></td></tr></table></figure><p>调用<code>Begin</code>操作方法立即返回当前线程的控制，将同步方法交由CLR在线程池中排队执行，主线程继续执行后续的过程</p><blockquote><p>下面的代码示例展示了如何使用Dns类中的异步方法，检索用户指定计算机的域名系统(DNS)信息。此示例创建引用AsyncCallback方法的 ProcessDnsInformation委托。每次异步请求获取DNS信息，都会调用一次此方法。</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> requestCounter;</span><br><span class="line"><span class="keyword">static</span> ArrayList hostData = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">static</span> StringCollection hostNames = <span class="keyword">new</span> StringCollection();</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateUserInterface</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Print a message to indicate that the application</span></span><br><span class="line">    <span class="comment">// is still working on the remaining requests.</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;&#123;0&#125; requests remaining.&quot;</span>, requestCounter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Create the delegate that will process the results of the</span></span><br><span class="line">    <span class="comment">// asynchronous request.</span></span><br><span class="line">    AsyncCallback callBack = <span class="keyword">new</span> AsyncCallback(ProcessDnsInformation);</span><br><span class="line">    <span class="built_in">string</span> host;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot; Enter the name of a host computer or &lt;enter&gt; to finish: &quot;</span>);</span><br><span class="line">        host = Console.ReadLine();</span><br><span class="line">        <span class="keyword">if</span> (host.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Increment the request counter in a thread safe manner.</span></span><br><span class="line">            Interlocked.Increment(<span class="keyword">ref</span> requestCounter);</span><br><span class="line">            <span class="comment">// Start the asynchronous request for DNS information.</span></span><br><span class="line">            Dns.BeginGetHostEntry(host, callBack, host);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (host.Length &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// The user has entered all of the host names for lookup.</span></span><br><span class="line">    <span class="comment">// Now wait until the threads complete.</span></span><br><span class="line">    <span class="keyword">while</span> (requestCounter &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        UpdateUserInterface();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Display the results.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i&lt; hostNames.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">object</span> data = hostData[i];</span><br><span class="line">        <span class="built_in">string</span> message = data <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">        <span class="comment">// A SocketException was thrown.</span></span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Request for &#123;0&#125; returned message: &#123;1&#125;&quot;</span>,</span><br><span class="line">                hostNames[i], message);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Get the results.</span></span><br><span class="line">        IPHostEntry h = (IPHostEntry) data;</span><br><span class="line">        <span class="built_in">string</span>[] aliases = h.Aliases;</span><br><span class="line">        IPAddress[] addresses = h.AddressList;</span><br><span class="line">        <span class="keyword">if</span> (aliases.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Aliases for &#123;0&#125;&quot;</span>, hostNames[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; aliases.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, aliases[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (addresses.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Addresses for &#123;0&#125;&quot;</span>, hostNames[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; addresses.Length; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>,addresses[k].ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结束异步操作"><a href="#结束异步操作" class="headerlink" title="结束异步操作"></a>结束异步操作</h3><p>结束异步操作必须要调用<code>End</code>操作方法，可以在回调方法里调用，也可以在调用线程里调用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessDnsInformation</span>(<span class="params">IAsyncResult result</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> hostName = (<span class="built_in">string</span>) result.AsyncState;</span><br><span class="line">    hostNames.Add(hostName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Get the results.</span></span><br><span class="line">        IPHostEntry host = Dns.EndGetHostEntry(result);</span><br><span class="line">        hostData.Add(host);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Store the exception message.</span></span><br><span class="line">    <span class="keyword">catch</span> (SocketException e)</span><br><span class="line">    &#123;</span><br><span class="line">        hostData.Add(e.Message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Decrement the request counter in a thread-safe manner.</span></span><br><span class="line">        Interlocked.Decrement(<span class="keyword">ref</span> requestCounter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用异步方法"><a href="#使用异步方法" class="headerlink" title="使用异步方法"></a>使用异步方法</h2><p>以操作FileSteam为例，FileSteam支持了异步操作，所以可以把调用过程从原来的同步改成异步</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// open filestream for asynchronous read</span></span><br><span class="line">    FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;somedata.dat&quot;</span>, FileMode.Open,</span><br><span class="line">        FileAccess.Read, FileShare.Read, <span class="number">1024</span>,</span><br><span class="line">        FileOptions.Asynchronous);</span><br><span class="line">    <span class="comment">// byte array to hold 100 bytes of data</span></span><br><span class="line">    Byte[] data = <span class="keyword">new</span> Byte[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initiate asynchronous read operation, reading first 100 bytes</span></span><br><span class="line">    IAsyncResult ar = fs.BeginRead(data, <span class="number">0</span>, data.Length, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// could do something in here which would run alongside file read...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// check for file read complete</span></span><br><span class="line">    <span class="keyword">while</span> (!ar.IsCompleted)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Operation not completed&quot;</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the result</span></span><br><span class="line">    <span class="built_in">int</span> bytesRead = fs.EndRead(ar);</span><br><span class="line">    fs.Close();</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Number of bytes read=&#123;0&#125;&quot;</span>, bytesRead);</span><br><span class="line">    Console.WriteLine(BitConverter.ToString(data, <span class="number">0</span>, bytesRead));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过委托实现异步编程"><a href="#通过委托实现异步编程" class="headerlink" title="通过委托实现异步编程"></a>通过委托实现异步编程</h2><blockquote><p><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates">微软文档</a><br>使用委托可通过异步方式调用同步方法。 如果同步调用委托，Invoke 方法将在当前线程上直接调用目标方法。 如果调用 BeginInvoke 方法，公共语言运行时 (CLR) 将对请求进行排队并立即返回给调用方。 目标方法将在线程池中的某个线程上异步调用。 提交请求的原始线程可以不受限制地继续与目标方法并行执行。 如果已在对 BeginInvoke 方法的调用中指定回叫方法，则目标方法结束时，将调用回叫方法。 在回叫方法中，EndInvoke 方法将获取返回值和所有输入&#x2F;输出或仅输出参数。 如果调用 BeginInvoke 时未指定回叫方法，则可能从调用 BeginInvoke 的线程上调用 EndInvoke。</p></blockquote><p><em><strong>注意：.Net Core已经不支持委托异步调用</strong></em></p><p>有些同步方法并未实现异步操作，这种时候可以通过委托来实现异步编程</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">DemoDelegate</span>(<span class="params"><span class="built_in">int</span> num</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DemoDelegate demoDelegate = <span class="keyword">new</span> DemoDelegate(SyncMethod);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line">    demoDelegate.BeginInvoke(num, CallBack, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do some things;</span></span><br><span class="line"></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SyncMethod</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;num&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CallBack</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = ar <span class="keyword">as</span> AsyncResult;</span><br><span class="line">    <span class="keyword">var</span> demoDelegate = result.AsyncDelegate <span class="keyword">as</span> DemoDelegate;</span><br><span class="line">    <span class="keyword">var</span> num = demoDelegate.EndInvoke(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>异步编程模型这个模式，就是微软利用委托和线程池帮助我们实现的一个模式</p><blockquote><p>该模式利用一个线程池线程去执行一个操作，在FileStream类BeginRead方法中就是执行一个读取文件操作，该线程池线程会立即将控制权返回给调用线程，此时线程池线程在后台进行这个异步操作；异步操作完成之后，通过回调函数来获取异步操作返回的结果。此时就是利用委托的机制。所以说异步编程模式时利用委托和线程池线程搞出来的模式，包括后面的基于事件的异步编程和基于任务的异步编程，还有C# 5中的async和await关键字，都是利用这委托和线程池搞出来的。他们的本质其实都是一样的，只是后面提出来的使异步编程更加简单罢了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> 异步编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 2019使用Source Link调试源码</title>
      <link href="/posts/42817bfe/"/>
      <url>/posts/42817bfe/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最开始在开发java的时候，eclipse可以直接调试源码，但是在微软开源前，基本上没办法调试源码，完全靠ReSharper反编译来调试。后来微软开源了.NetCore，在看.NetCore源码的时候发现测试项目用到了Source Link。于是好奇心驱使点进链接一看才知道是用于源码调试的工具，果断开整。</p><h2 id="Source-Link"><a href="#Source-Link" class="headerlink" title="Source Link"></a>Source Link</h2><p>Source Link是一种为二进制文件提供无关语言和源代码控制的调试系统。目的是为任何基于Nuget构建项目的用户提供几乎无感的源码调试。微软开发并维护。<br>Source Link是一组用于描述可嵌入到符号、二进制文件和包中的源代码控制元数据的包和规范。官网链接：<a href="https://github.com/dotnet/sourcelink">https://github.com/dotnet/sourcelink</a></p><p>SourceLink当前支持的源码来源</p><ul><li>Github</li><li>Azure DevOps(VSTS)</li><li>TFS</li><li>Gitlab</li><li>Bitbucket</li></ul><h2 id="如何在Visual-Studio-2019中使用Source-Link"><a href="#如何在Visual-Studio-2019中使用Source-Link" class="headerlink" title="如何在Visual Studio 2019中使用Source Link"></a>如何在Visual Studio 2019中使用Source Link</h2><p>Visual Studio 17 15.3以上版本中已经支持了Source Link，Visual Studio 17 15.7以上版本支持通过安全验证从Github私有库和Azure DevOps仓库下载源码。</p><p>首先在 <code>选项(Options)</code> &gt; <code>调试(Debugging)</code> &gt; <code>常规(General)</code>中取消勾选<code>启用&quot;仅我的代码&quot;(Enable Just My Code)</code>, 并勾选<code>启用源链接支持(Enable Source Link Support)</code></p><p><img src="https://img.chobon.top/blog/SourceLink%E8%B0%83%E8%AF%95%E6%BA%90%E7%A0%81/%E5%8F%96%E6%B6%88%E5%8B%BE%E9%80%89-%E5%90%AF%E7%94%A8%E2%80%9C%E4%BB%85%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%9D.jpg" alt="取消勾选-启用“仅我的代码”"></p><p><img src="https://img.chobon.top/blog/SourceLink%E8%B0%83%E8%AF%95%E6%BA%90%E7%A0%81/%E5%8B%BE%E9%80%89-%E5%90%AF%E7%94%A8%E6%BA%90%E9%93%BE%E6%8E%A5%E6%94%AF%E6%8C%81.jpg" alt="勾选-启用源链接支持"></p><p><img src="https://img.chobon.top/blog/SourceLink%E8%B0%83%E8%AF%95%E6%BA%90%E7%A0%81/%E5%8B%BE%E9%80%89-Microsoft%E7%AC%A6%E5%8F%B7%E6%9C%8D%E5%8A%A1%E5%99%A8.jpg" alt="勾选-Microsoft符号服务器"></p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>以下创建一个默认的 Asp.Net Core Mvc站点，并以调试方式启动项目。 这里我们还是将断点打在Program的CreateHostBuilder方法中。</p><p><img src="https://img.chobon.top/blog/SourceLink%E8%B0%83%E8%AF%95%E6%BA%90%E7%A0%81/%E6%96%AD%E7%82%B9.jpg" alt="断点"></p><p>点击F11进入源码</p><p><img src="https://img.chobon.top/blog/SourceLink%E8%B0%83%E8%AF%95%E6%BA%90%E7%A0%81/F11%E8%BF%9B%E5%85%A5%E6%BA%90%E7%A0%81.jpg" alt="F11进入源码"></p><p>还可以通过安全验证下载私有仓库源码调试</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SourceLink </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git子模块管理</title>
      <link href="/posts/5b735920/"/>
      <url>/posts/5b735920/</url>
      
        <content type="html"><![CDATA[<h2 id="子模块（Submodules）"><a href="#子模块（Submodules）" class="headerlink" title="子模块（Submodules）"></a>子模块（Submodules）</h2><p>大型项目都是按照子模块开发，子模块又是单独git管理，如果分成多个仓库合并的时候又很麻烦，放一个仓库又会频繁提交冲突，子模块命令就很好解决这个问题，多个git子模块仓库管理，统一组成项目仓库</p><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p><code>git submodule add &lt;repository&gt; &lt;path&gt;</code> 添加子模块</p><p><code>git submodule init</code> 初始化子模块</p><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><p>递归方式克隆整个项目，会克隆所有子模块</p><p><code>git clone &lt;repository&gt; --recursive</code></p><p>如果项目已存克隆，可以执行初始化子模块</p><p><code>git submodule update --init</code></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>当项目执行<code>git pull</code>并不会自动同步更新子模块，需要更新所有子模块，保持与项目子模块commit id一致</p><p><code>git submodule update</code></p><p>更新所有子模块,保持与项目远端同步</p><p><code>git submodule update --remote</code></p><p>更新指定子模块,保持与项目远端同步</p><p><code>git submodule update --remote module/&lt;ModuleName&gt;</code></p><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><p><code>git submodule foreach &#39;&lt;command&gt;&#39;</code></p><p>可以遍历所有子模块执行git指令</p><p>举例：清除和重置每个子模块</p><p><code>git submodule foreach &#39;git reset --hard; git clean -xfd&#39;</code></p><h3 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h3><p>查看子模块本地改动</p><p><code>git diff --submodule</code></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AspNetCore管道机制</title>
      <link href="/posts/fb967bcd/"/>
      <url>/posts/fb967bcd/</url>
      
        <content type="html"><![CDATA[<h2 id="Middleware理解"><a href="#Middleware理解" class="headerlink" title="Middleware理解"></a>Middleware理解</h2><p>Applicationbuilder维护着一个中间件集合</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IList&lt;Func&lt;RequestDelegate, RequestDelegate&gt;&gt; _components = <span class="keyword">new</span> List&lt;Func&lt;RequestDelegate, RequestDelegate&gt;&gt;();</span><br></pre></td></tr></table></figure><p>本质都是是往ApplicationBuilder对象的_components成员里添加中间件<code>Func&lt;RequestDelegate, RequestDelegate&gt;</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> Task <span class="title">RequestDelegate</span>(<span class="params">HttpContext context</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IList&lt;Func&lt;RequestDelegate, RequestDelegate&gt;&gt; _components</span><br></pre></td></tr></table></figure><p>通过传值和返回都是RequestDelegate委托，对HttpContext的处理，各个中间件首尾相连，形似管道</p><p><img src="https://img.chobon.top/blog/AspNetCore/Pipeline.png" alt="管道"></p><h2 id="Middleware使用"><a href="#Middleware使用" class="headerlink" title="Middleware使用"></a>Middleware使用</h2><h3 id="ApplicationBuilder添加中间件"><a href="#ApplicationBuilder添加中间件" class="headerlink" title="ApplicationBuilder添加中间件"></a>ApplicationBuilder添加中间件</h3><h4 id="ApplicationBuilder实例方法"><a href="#ApplicationBuilder实例方法" class="headerlink" title="ApplicationBuilder实例方法"></a>ApplicationBuilder实例方法</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.AspNetCore.Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IApplicationBuilder <span class="title">Use</span>(<span class="params">Func&lt;RequestDelegate, RequestDelegate&gt; middleware</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _components.Add(middleware);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ApplicationBuilder拓展方法"><a href="#ApplicationBuilder拓展方法" class="headerlink" title="ApplicationBuilder拓展方法"></a>ApplicationBuilder拓展方法</h4><ul><li><code>UseMiddleware</code></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UseMiddleware</span>&lt;<span class="title">TMiddleware</span>&gt;(<span class="params"><span class="keyword">this</span> IApplicationBuilder app, <span class="keyword">params</span> <span class="built_in">object</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> app.UseMiddleware(<span class="keyword">typeof</span>(TMiddleware), <span class="keyword">args</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UseMiddleware</span>&lt;<span class="title">TMiddleware</span>&gt;(<span class="params"><span class="keyword">this</span> IApplicationBuilder app, Type middleware, <span class="keyword">params</span> <span class="built_in">object</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(IMiddleware).GetTypeInfo().IsAssignableFrom(middleware.GetTypeInfo()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//省略校验</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用接口方法实现</span></span><br><span class="line">        <span class="keyword">return</span> UseMiddlewareInterface(app, middleware);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> applicationServices = app.ApplicationServices;</span><br><span class="line">    <span class="keyword">return</span> app.Use(next =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> methods = middleware.GetMethods(BindingFlags.Instance | BindingFlags.Public);</span><br><span class="line">        <span class="keyword">var</span> invokeMethods = methods.Where(m =&gt;</span><br><span class="line">            <span class="built_in">string</span>.Equals(m.Name, InvokeMethodName, StringComparison.Ordinal)</span><br><span class="line">            || <span class="built_in">string</span>.Equals(m.Name, InvokeAsyncMethodName, StringComparison.Ordinal)</span><br><span class="line">            ).ToArray();</span><br><span class="line">        <span class="comment">//省略一堆校验和数据拼装</span></span><br><span class="line">        <span class="keyword">var</span> methodInfo = invokeMethods[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//省略校验</span></span><br><span class="line">        <span class="keyword">var</span> parameters = methodInfo.GetParameters();</span><br><span class="line">        <span class="comment">//省略校验</span></span><br><span class="line">        <span class="comment">//下面是通过Expression树来创建中间件对象</span></span><br><span class="line">        <span class="keyword">var</span> ctorArgs = <span class="keyword">new</span> <span class="built_in">object</span>[<span class="keyword">args</span>.Length + <span class="number">1</span>];</span><br><span class="line">        ctorArgs[<span class="number">0</span>] = next;</span><br><span class="line">        Array.Copy(<span class="keyword">args</span>, <span class="number">0</span>, ctorArgs, <span class="number">1</span>, <span class="keyword">args</span>.Length);</span><br><span class="line">        <span class="keyword">var</span> instance = ActivatorUtilities.CreateInstance(app.ApplicationServices, middleware, ctorArgs);</span><br><span class="line">        <span class="keyword">if</span> (parameters.Length == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (RequestDelegate)methodInfo.CreateDelegate(<span class="keyword">typeof</span>(RequestDelegate), instance);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> factory = Compile&lt;<span class="built_in">object</span>&gt;(methodInfo, parameters);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> context =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> serviceProvider = context.RequestServices ?? applicationServices;</span><br><span class="line">            <span class="keyword">if</span> (serviceProvider == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(Resources.FormatException_UseMiddlewareIServiceProviderNotAvailable(<span class="keyword">nameof</span>(IServiceProvider)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> factory(instance, context, serviceProvider);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>Map</code></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">Map</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder app, PathString pathMatch, Action&lt;IApplicationBuilder&gt; configuration</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Map(app, pathMatch, preserveMatchedPathSegment: <span class="literal">false</span>, configuration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心方法，通过pathMatch参数判断给中间件加上执行条件。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">Map</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder app, PathString pathMatch, <span class="built_in">bool</span> preserveMatchedPathSegment, Action&lt;IApplicationBuilder&gt; configuration</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略一堆校验</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create branch</span></span><br><span class="line">    <span class="keyword">var</span> branchBuilder = app.New();</span><br><span class="line">    configuration(branchBuilder);</span><br><span class="line">    <span class="keyword">var</span> branch = branchBuilder.Build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> options = <span class="keyword">new</span> MapOptions</span><br><span class="line">    &#123;</span><br><span class="line">        Branch = branch,</span><br><span class="line">        PathMatch = pathMatch,</span><br><span class="line">        PreserveMatchedPathSegment = preserveMatchedPathSegment</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> app.Use(next =&gt; <span class="keyword">new</span> MapMiddleware(next, options).Invoke);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MapMiddleware</code>是对<code>RequestDelegate</code>的进一步封装，增加<code>MapOptions</code>，通过Invoke方法，形成一个中间件</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;RequestDelegate,RequestDelegate&gt; = (RequestDelegate next) = <span class="keyword">new</span> MapMiddleware(next,options).Invoke</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MapMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> MapOptions _options;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//省略校验</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (context.Request.Path.StartsWithSegments(_options.PathMatch, <span class="keyword">out</span> <span class="keyword">var</span> matchedPath, <span class="keyword">out</span> <span class="keyword">var</span> remainingPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> path = context.Request.Path;</span><br><span class="line">            <span class="keyword">var</span> pathBase = context.Request.PathBase;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!_options.PreserveMatchedPathSegment)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Update the path</span></span><br><span class="line">                context.Request.PathBase = pathBase.Add(matchedPath);</span><br><span class="line">                context.Request.Path = remainingPath;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> _options.Branch(context);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!_options.PreserveMatchedPathSegment)</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Request.PathBase = pathBase;</span><br><span class="line">                    context.Request.Path = path;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _next(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="MapWhen"><a href="#MapWhen" class="headerlink" title="MapWhen"></a>MapWhen</h5><p>通过WhenMapOptions条件匹配路由</p><p>这种方式更具有拓展性，相比较Map判断逻辑写在Invoke方法里，这个可以匹配规则通过传递委托形式自定义</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WhenMapOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Func&lt;HttpContext, <span class="built_in">bool</span>&gt; _predicate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">MapWhen</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder app, Predicate predicate, Action&lt;IApplicationBuilder&gt; configuration</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略校验</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create branch</span></span><br><span class="line">    <span class="keyword">var</span> branchBuilder = app.New();</span><br><span class="line">    configuration(branchBuilder);</span><br><span class="line">    <span class="keyword">var</span> branch = branchBuilder.Build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put middleware in pipeline</span></span><br><span class="line">    <span class="keyword">var</span> options = <span class="keyword">new</span> MapWhenOptions</span><br><span class="line">    &#123;</span><br><span class="line">        Predicate = predicate,</span><br><span class="line">        Branch = branch,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> app.Use(next =&gt; <span class="keyword">new</span> MapWhenMiddleware(next, options).Invoke);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h5><p>在管道增加终端中间件</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder app, RequestDelegate handler</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (app == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(app));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(handler));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.Use(_ =&gt; handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationBuilder构建管道"><a href="#ApplicationBuilder构建管道" class="headerlink" title="ApplicationBuilder构建管道"></a>ApplicationBuilder构建管道</h3><p>通过Build()方法，构建最终管道</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RequestDelegate <span class="title">Build</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    RequestDelegate app = context =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If we reach the end of the pipeline, but we have an endpoint, then something unexpected has happened.</span></span><br><span class="line">        <span class="comment">// This could happen if user code sets an endpoint, but they forgot to add the UseEndpoint middleware.</span></span><br><span class="line">        <span class="keyword">var</span> endpoint = context.GetEndpoint();</span><br><span class="line">        <span class="keyword">var</span> endpointRequestDelegate = endpoint?.RequestDelegate;</span><br><span class="line">        <span class="keyword">if</span> (endpointRequestDelegate != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> message =</span><br><span class="line">                <span class="string">$&quot;The request reached the end of the pipeline without executing the endpoint: &#x27;<span class="subst">&#123;endpoint.DisplayName&#125;</span>&#x27;. &quot;</span> +</span><br><span class="line">                <span class="string">$&quot;Please register the EndpointMiddleware using &#x27;<span class="subst">&#123;<span class="keyword">nameof</span>(IApplicationBuilder)&#125;</span>.UseEndpoints(...)&#x27; if using &quot;</span> +</span><br><span class="line">                <span class="string">$&quot;routing.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.Response.StatusCode = StatusCodes.Status404NotFound;</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> component <span class="keyword">in</span> _components.Reverse())</span><br><span class="line">    &#123;</span><br><span class="line">        app = component(app);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Middleware用法"><a href="#Middleware用法" class="headerlink" title="Middleware用法"></a>Middleware用法</h2><ul><li>app.Use()</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Middleware A</span></span><br><span class="line">        app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A (in)&quot;</span>);</span><br><span class="line">            <span class="keyword">await</span> next();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A (out)&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.UseMiddleware()</li></ul><p>有两种方式一种是实现IMiddleware，还有一种是符合中间件规范并提供同步Invoke方法或者异步InvokeAsync</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Middleware B</span></span><br><span class="line">        app.UseMiddleware&lt;MiddlewareB&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MiddlewareB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MiddlewareB</span>(<span class="params">RequestDelegate next</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext httpContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//省略校验</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;B (in)&quot;</span>);</span><br><span class="line">        _next.Invoke(httpContext);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;B (out)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.Map()</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Middleware B</span></span><br><span class="line">        app.Map(</span><br><span class="line">        <span class="keyword">new</span> PathString(<span class="string">&quot;/foo&quot;</span>),<span class="comment">//请求/foo才会执行这段</span></span><br><span class="line">        a =&gt; a.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;B (in)&quot;</span>);</span><br><span class="line">            <span class="keyword">await</span> next();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;B (out)&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.WhenMap()</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Middleware B</span></span><br><span class="line">        app.UseWhen(</span><br><span class="line">        context =&gt; context.Request.Path.StartsWithSegments(<span class="keyword">new</span> PathString(<span class="string">&quot;/foo&quot;</span>)),<span class="comment">//请求/foo才会执行这段</span></span><br><span class="line">        a =&gt; a.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;B (in)&quot;</span>);</span><br><span class="line">            <span class="keyword">await</span> next();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;B (out)&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.Run()</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Middleware C</span></span><br><span class="line">        app.Run(<span class="keyword">async</span> context =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">            <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">&quot;Hello World from the terminal middleware&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="官方中间件"><a href="#官方中间件" class="headerlink" title="官方中间件"></a>官方中间件</h2><ul><li>HealthCheckMiddleware</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HealthCheckMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> HealthCheckOptions _healthCheckOptions;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> HealthCheckService _healthCheckService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HealthCheckMiddleware</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        RequestDelegate next,</span></span></span><br><span class="line"><span class="params"><span class="function">        HealthCheckOptions healthCheckOptions,</span></span></span><br><span class="line"><span class="params"><span class="function">        HealthCheckService healthCheckService</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//省略校验</span></span><br><span class="line"></span><br><span class="line">        _next = next;</span><br><span class="line">        _healthCheckOptions = healthCheckOptions;</span><br><span class="line">        _healthCheckService = healthCheckService</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext httpContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上跟MapMiddleware实现是一样的，包括自定义中间件也可以这样实现</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> AspNetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspNetCore </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下source命令详解</title>
      <link href="/posts/67b1d632/"/>
      <url>/posts/67b1d632/</url>
      
        <content type="html"><![CDATA[<h2 id="source命令用法"><a href="#source命令用法" class="headerlink" title="source命令用法"></a>source命令用法</h2><p><code>source FileName</code></p><p><em><strong>通常用”<code>.</code>“来替代</strong></em></p><h2 id="source命令作用"><a href="#source命令作用" class="headerlink" title="source命令作用"></a>source命令作用</h2><blockquote><p>在当前bash环境下读取并执行FileName中的命令</p></blockquote><ul><li>功能：<br>使当前shell读入路径为filepath的shell文件并依次执行文件中的所有语句，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。例如，当我们修改了&#x2F;etc&#x2F;profile文件，并想让它立刻生效，而不用重新登录，就可以使用source命令，如source &#x2F;etc&#x2F;profile。<br>&amp;nbsp;<br><code>source</code>命令(从 C Shell 而来)是bash shell的内置命令。点命令(<code>.</code>)，就是个点符号(从Bourne Shell而来)是source的另一名称。</li></ul><h2 id="source命令应用"><a href="#source命令应用" class="headerlink" title="source命令应用"></a>source命令应用</h2><p>鉴于上述的描述，最简单的一种应用场景就是，进行交叉编译时，在当前shell内采用source命令临时指定系统的编译环境为嵌入式编译环境，然后进行源码的编译和调试。而在别的shell内或者你关闭本shell时，一切又恢复原样。</p><p>所以把编译所需环境放在一个脚本文件中，在当前shell需要编译时可以执行source即可获得编译环境，就可以操作编译了。</p><p>还有一种情况是命令串，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make mrproper</span><br><span class="line">make menuconfig</span><br><span class="line">make dep</span><br><span class="line">make clean</span><br><span class="line">make bzImage</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>这些命令既长，又繁琐。而且有时候容易输错，浪费你的时间和精力。如果把这些命令做成一个文件，让它自动按顺序执行，对于需要多次反复编译核心的用户来说，会很方便。</p><p>用source命令可以办到这一点。它的作用就是把一个文件的内容当成是shell来执行。</p><p>先在&#x2F;usr&#x2F;src&#x2F;linux-2.4.20目录下建立一个文件，取名为make_command，在其中输入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">make mrproper &amp;&amp;</span><br><span class="line">make menuconfig &amp;&amp;</span><br><span class="line">make dep &amp;&amp;</span><br><span class="line">make clean &amp;&amp;</span><br><span class="line">make bzImage &amp;&amp;</span><br><span class="line">make modules &amp;&amp;</span><br><span class="line">make modules_install &amp;&amp;</span><br><span class="line">cp arch/i386/boot/bzImge /boot/vmlinuz_new &amp;&amp;</span><br><span class="line">cp System.map /boot &amp;&amp;</span><br><span class="line">vi /etc/lilo.conf &amp;&amp;</span><br><span class="line">lilo -v</span><br></pre></td></tr></table></figure><p>文件建立好之后，以后每次编译核心，只需要在&#x2F;usr&#x2F;src&#x2F;linux-2.4.20下输入source make_command 就行了。这个文件也完全可以做成脚本，只需稍加改动即可。</p><p>shell编程中的命令有时和C语言是一样的。&amp;&amp;表示与，||表示或。把两个命令用&amp;&amp;联接起来，如 make mrproper &amp;&amp; make menuconfig，表示要第一个命令执行成功才能执行第二个命令。对执行顺序有要求的命令能保证一旦有错误发生，下面的命令不会盲目地继续执行。</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul><li><p><strong><code>source filepath</code> 与 <code>sh filepath</code> 、<code>./filepath</code>的区别</strong></p><ol><li><strong>source</strong></li></ol><blockquote><p><code>source a.sh</code></p></blockquote><p>  在当前 <strong><code>shell</code></strong> 内去读取、执行<code>a.sh</code>，而a.sh不需要有 <strong>“执行权限”</strong><br>  source命令可以简写为“.”</p><blockquote><p><code>. a.sh</code></p></blockquote><p>  总结：<code>source filename</code>其实只是简单地读取脚本里面的语句依次在当前shell里面执行，没有建立新的子shell。那么脚本里面所有新建、改变变量的语句都会保存在当前shell里面。<br>&amp;nbsp;<br>2. <strong>sh&#x2F;bash</strong></p><blockquote><p><code>sh a.sh</code><br><code>bash a.sh</code></p></blockquote><p>  都是打开一个 <strong><code>subshell</code></strong> 去读取、执行<code>a.sh</code>，而a.sh不需要有 <strong>“执行权限”</strong><br>  通常在subshell里运行的脚本里设置变量，不会影响到父shell的。</p><p>  总结：<code>sh filepath</code> 会重新建立一个子shell，在子shell中执行脚本里面的语句，该子shell继承父shell的环境变量，但子shell是新建的，其改变的变量不会被带回父shell。<br>&amp;nbsp;<br>3. <strong>.&#x2F;</strong></p><blockquote><p><code>./a.sh</code><br><code>#bash: ./a.sh: 权限不够</code><br><code>chmod +x a.sh</code><br><code>./a.sh</code></p></blockquote><p>  打开一个 <strong><code>subshell</code></strong> 去读取、执行<code>a.sh</code>，但<code>a.sh</code>需要有 <strong>“执行权限”</strong><br>  可以用chmod +x添加执行权限<br>  另外，使用.&#x2F;来执行的文件里有alias语句的话，shell并不会把alias别名扩展成对应的命令，要解决的话，得使用shopt命令来开启alias扩展选项</p><blockquote><p><code>shopt -s expand_aliases</code></p></blockquote><p>  总结：当shell脚本具有可执行权限时，用<code>sh filepath</code>与<code>./filepath</code>是没有区别的。<code>./filepath</code>是因为当前目录没有在PATH中，所有”.”是用来表示当前目录的。</p></li></ul><p>&amp;nbsp;</p><ul><li><p><strong>fork、source、exec区别</strong></p><ol><li>使用fork方式运行script时， 就是让shell(parent process)产生一个child process去执行该script，当child process结束后，会返回parent process，但parent process的环境是不会因child process的改变而改变的。</li><li>使用source方式运行script时， 就是让script在当前process内执行， 而不是产生一个child process来执行。由于所有执行结果均于当前process内完成，若script的环境有所改变， 当然也会改变当前process环境了。</li><li>使用exec方式运行script时， 它和source一样，也是让script在当前process内执行，但是process内的原代码剩下部分将被终止。同样，process内的环境随script改变而改变。</li></ol></li></ul><p>&amp;nbsp;</p><ul><li><p><strong>举例说明</strong></p><p>  <code>1.sh</code></p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=B</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PID for 1.sh before exec/source/fork:$$&quot;</span></span><br><span class="line"><span class="built_in">export</span> A</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1.sh: \$A is <span class="variable">$A</span>&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">exec</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;using exec...&quot;</span></span><br><span class="line">        <span class="built_in">exec</span> ./2.sh ;;</span><br><span class="line">    <span class="built_in">source</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;using source...&quot;</span></span><br><span class="line">        . ./2.sh ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;using fork by default...&quot;</span></span><br><span class="line">        ./2.sh ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PID for 1.sh after exec/source/fork:$$&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1.sh: \$A is <span class="variable">$A</span>&quot;</span></span><br></pre></td></tr></table></figure><p>  <code>2.sh</code></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;PID for 2.sh: $$&quot;</span><br><span class="line">echo &quot;2.sh get \$A=$A from 1.sh&quot;</span><br><span class="line">A=C</span><br><span class="line">export A</span><br><span class="line">echo &quot;2.sh: \$A is $A&quot;</span><br></pre></td></tr></table></figure><p>  运行结果：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x 1.sh</span><br><span class="line"><span class="built_in">chmod</span> +x 2.sh</span><br><span class="line">./1.sh fork</span><br><span class="line">./1.sh <span class="built_in">source</span></span><br><span class="line">./1.sh <span class="built_in">exec</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes集群-Kubernetes部署</title>
      <link href="/posts/2859ce8b/"/>
      <url>/posts/2859ce8b/</url>
      
        <content type="html"><![CDATA[<h2 id="kube-proxy开启ipvs的前置条件"><a href="#kube-proxy开启ipvs的前置条件" class="headerlink" title="kube-proxy开启ipvs的前置条件"></a>kube-proxy开启ipvs的前置条件</h2><ol><li><p>加载netfilter模块</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# modprobe br_netfilter  </span><br></pre></td></tr></table></figure></li><li><p>添加配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# cat  &gt;  /etc/sysconfig/modules/ipvs.modules  &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">modprobe  --  ip_vs</span><br><span class="line"></span><br><span class="line">modprobe  --  ip_vs_rr</span><br><span class="line"></span><br><span class="line">modprobe  --  ip_vs_wrr</span><br><span class="line"></span><br><span class="line">modprobe  --  ip_vs_sh</span><br><span class="line"></span><br><span class="line">modprobe  --  nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>赋予权限并引导</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# chmod 755 /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">[root@k8s-master-01 ~]# bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">[root@k8s-master-01 ~]# lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装docker软件"><a href="#安装docker软件" class="headerlink" title="安装docker软件"></a>安装docker软件</h2><ol><li><p>docker依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>导入阿里云的docker-ce仓库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>更新系统安装docker-ce</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# yum update -y &amp;&amp; yum install -y docker-ce</span><br></pre></td></tr></table></figure></li><li><p>uname -r  检测版本，再设置版本，后又重启reboot</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# grub2-set-default &quot;CentOS Linux (4.4.182-1.el7.elrepo.x86_64) 7 (Core)&quot;</span><br></pre></td></tr></table></figure></li><li><p>启动</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>开机自启</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl enable docker</span><br></pre></td></tr></table></figure></li><li><p>配置deamon</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line"></span><br><span class="line">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;log-opts&quot;: &#123;</span><br><span class="line"></span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>创建目录存放docker配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# mkdir -p  /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure></li><li><p>重启docker</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装Kubeadm-主从配置"><a href="#安装Kubeadm-主从配置" class="headerlink" title="安装Kubeadm(主从配置)"></a>安装Kubeadm(主从配置)</h2><ol><li><p>导入阿里云的YUM仓库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@k8s-master-01 ~]# cat  &lt;&lt;EOF &gt;  /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line"></span><br><span class="line">name=Kubernetes</span><br><span class="line"></span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line"></span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">repo_gpgcheck=0</span><br><span class="line"></span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line"></span><br><span class="line">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在每个节点安装kubeadm（初始化工具）、kubectl（命令行管理工具）、kubelet（与docker的cri交互创建容器）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# yum -y install kubeadm kubectl kubelet  </span><br></pre></td></tr></table></figure></li><li><p>k8s开机自启.kubelet需要与容器接口进行交互启动容器，而k8s通过Kubeadm安装出来以后都是以pod方式存在，也就是底层以容器的方式运行，所以一定要开机自启</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl enable kubelet.service</span><br></pre></td></tr></table></figure></li></ol><h2 id="初始化主节点（master）"><a href="#初始化主节点（master）" class="headerlink" title="初始化主节点（master）"></a>初始化主节点（master）</h2><ol><li><p>初始化文件生成</p><p> 显示init默认的初始化文件，并打印出来到kubeadm-config.yaml文件中</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure></li><li><p>修改默认配置</p><p> <code>vi kubeadm-config.yaml</code><br> &amp;nbsp;</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">24h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-master-01</span></span><br><span class="line">  <span class="attr">taints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">k8s.gcr.io</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.18.0</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>修改ip为自己的ip地址<br><code>advertiseAddress: 1.2.3.4</code> &#x3D;&gt; <code>advertiseAddress: 172.18.98.3</code></p></li><li><p>版本号修改<br><code>kubernetesVersion: v1.18.0</code> &#x3D;&gt; <code>kubernetesVersion: v1.18.1</code></p></li><li><p>添加pod网段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="number">10.122</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br></pre></td></tr></table></figure></li><li><p>修改默认调度</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line">  <span class="attr">SupportIPVSProxyMode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>初始化master</p><ul><li>指定配置文件启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubeadm init --config=kubeadm-config.yaml --experimental-upload-certs | tee kubeadm-init.log</span><br></pre></td></tr></table></figure><ul><li>可以在启动命令里指定参数配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubeadm init --kubernetes-version=1.18.0  \</span><br><span class="line">--apiserver-advertise-address=172.18.98.3   \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers  \</span><br><span class="line">--service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16</span><br></pre></td></tr></table></figure><p><em><strong>这一步很关键，由于kubeadm 默认从官网k8s.grc.io下载所需镜像，国内无法访问，因此需要通过–image-repository指定阿里云镜像仓库地址。</strong></em></p></li></ol><h2 id="初始化K8s集群（node）"><a href="#初始化K8s集群（node）" class="headerlink" title="初始化K8s集群（node）"></a>初始化K8s集群（node）</h2><ol><li><p>在工作节点执行注册</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.18.98.7:6443 --token wi7way.kt2398q4g7jp6528 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:e46d8fd7c9c7f6d1b4a4bcd1a3591f8b364d2c3c80366269a054fadaf1d79c07</span><br></pre></td></tr></table></figure><p> 记录生成的最后部分内容，此内容需要在其它节点加入Kubernetes集群时执行。<br> 根据提示创建kubectl</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# mkdir -p $HOME/.kube</span><br><span class="line">[root@k8s-master-01 ~]# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">[root@k8s-master-01 ~]# sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p> 执行下面命令，使kubectl可以自动补充</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h2><ol><li><p>查看节点</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubectl get node</span><br><span class="line">NAME            STATUS     ROLES    AGE     VERSION</span><br><span class="line">k8s-master-01   NotReady   master   2m29s   v1.18.1</span><br><span class="line">k8s-node-01     NotReady   &lt;none&gt;   1m17s   v1.18.1</span><br><span class="line">k8s-node-02     NotReady   &lt;none&gt;   37s     v1.18.1</span><br><span class="line">[root@k8s-master-01 ~]# kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-7ff77c879f-6fpj4                0/1     Pending   0          2m12s</span><br><span class="line">kube-system   coredns-7ff77c879f-7tjcn                0/1     Pending   0          2m12s</span><br><span class="line">kube-system   etcd-k8s-master-01                      1/1     Running   1          2m12s</span><br><span class="line">kube-system   kube-apiserver-k8s-master-01            1/1     Running   1          2m12s</span><br><span class="line">kube-system   kube-controller-manager-k8s-master-01   1/1     Running   1          2m12s</span><br><span class="line">kube-system   kube-proxy-2c2fs                        1/1     Running   1          2m12s</span><br><span class="line">kube-system   kube-proxy-cvmxt                        1/1     Running   1          2m12s</span><br><span class="line">kube-system   kube-proxy-k6ddp                        1/1     Running   1          2m12s</span><br><span class="line">kube-system   kube-scheduler-k8s-master-01            1/1     Running   1          2m12s</span><br></pre></td></tr></table></figure></li><li><p>安装calico网络</p><ul><li>node节点为NotReady，因为corednspod没有启动，缺少网络pod</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class="line">configmap/calico-config created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">daemonset.apps/calico-node created</span><br><span class="line">serviceaccount/calico-node created</span><br><span class="line">deployment.apps/calico-kube-controllers created</span><br><span class="line">serviceaccount/calico-kube-controllers created</span><br></pre></td></tr></table></figure><ul><li>查看node和pod</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubectl get pod --all-namespaces</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-555fc8cc5c-q2cc8   1/1     Running   0          36s</span><br><span class="line">calico-node-4968l                          1/1     Running   0          36s</span><br><span class="line">calico-node-7qr9w                          1/1     Running   0          36s</span><br><span class="line">calico-node-tszrb                          1/1     Running   0          36s</span><br><span class="line">coredns-7ff77c879f-6fpj4                   1/1     Running   0          5m22s</span><br><span class="line">coredns-7ff77c879f-7tjcn                   1/1     Running   0          5m22s</span><br><span class="line">etcd-k8s-master-01                         1/1     Running   0          5m32s</span><br><span class="line">kube-apiserver-k8s-master-01               1/1     Running   0          5m32s</span><br><span class="line">kube-controller-manager-k8s-master-01      1/1     Running   0          5m32s</span><br><span class="line">kube-proxy-2c2fs                           1/1     Running   0          5m32s</span><br><span class="line">kube-proxy-cvmxt                           1/1     Running   0          5m32s</span><br><span class="line">kube-proxy-k6ddp                           1/1     Running   0          5m32s</span><br><span class="line">kube-scheduler-k8s-master-01               1/1     Running   0          5m32s</span><br><span class="line">[root@k8s-master-01 ~]# kubectl get node</span><br><span class="line">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s-master-01   Ready    master   5m47s   v1.18.1</span><br><span class="line">k8s-node-01     Ready    &lt;none&gt;   4m35s   v1.18.1</span><br><span class="line">k8s-node-02     Ready    &lt;none&gt;   3m55s   v1.18.1</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><ul><li><p>查看日志</p><p>  <code>vim kubeadm-init.log</code></p></li><li><p>查看节点信息</p><p>  <code>kubectl get pod -n kube-system</code></p></li><li><p>监视</p><p>  <code>kubectl get pod -n kube-system -w</code></p></li><li><p>详细信息</p><p>  <code>kubectl get pod -n kube-system -o wide</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes集群-node节点配置</title>
      <link href="/posts/c6002814/"/>
      <url>/posts/c6002814/</url>
      
        <content type="html"><![CDATA[<h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# hostnamectl set-hostname xxx</span><br></pre></td></tr></table></figure><h2 id="修改hosts文件vim-x2F-etc-x2F-hosts"><a href="#修改hosts文件vim-x2F-etc-x2F-hosts" class="headerlink" title="修改hosts文件vim &#x2F;etc&#x2F;hosts"></a>修改hosts文件vim &#x2F;etc&#x2F;hosts</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# vim /etc/hosts</span><br><span class="line">127.0.0.1       k8s-master-01     k8s-master-01</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">172.18.98.3 k8s-master-01</span><br><span class="line">172.18.98.4 k8s-node-01</span><br><span class="line">172.18.98.5 k8s-node-02</span><br></pre></td></tr></table></figure><h2 id="将写好的hosts文件拷贝到其他节点"><a href="#将写好的hosts文件拷贝到其他节点" class="headerlink" title="将写好的hosts文件拷贝到其他节点"></a>将写好的hosts文件拷贝到其他节点</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# scp /etc/hosts  root@k8s-node-01:/etc/hosts</span><br></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wgetvimnet-tools git</span><br></pre></td></tr></table></figure><h2 id="设置防火墙为-Iptables"><a href="#设置防火墙为-Iptables" class="headerlink" title="设置防火墙为 Iptables"></a>设置防火墙为 Iptables</h2><ul><li>关闭防火墙</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl stop firewalld</span><br></pre></td></tr></table></figure><ul><li>防火墙自启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl disable firewalld</span><br></pre></td></tr></table></figure><ul><li>安装Iptables管理工具</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# yum -y install iptables-services</span><br></pre></td></tr></table></figure><ul><li>启动Iptables</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl start iptables</span><br></pre></td></tr></table></figure><ul><li>设为Iptables开机自启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl enable iptables</span><br></pre></td></tr></table></figure><ul><li>清空Iptables规则</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# iptables -F</span><br></pre></td></tr></table></figure><ul><li>保存Iptables规则</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# service iptables save</span><br></pre></td></tr></table></figure><h2 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# swapoff -a &amp;&amp; sed -i &#x27;/ swap / s/^\(.*\)$/#\1/g&#x27; /etc/fstab</span><br></pre></td></tr></table></figure><p><em><strong>关闭swap分区，永久关闭虚拟内存。K8s初始化init时，会检测swap分区有没有关闭，如果虚拟内存开启，容器pod就可能会放置在虚拟内存中运行，会大大降低运行效率</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# setenforce 0 &amp;&amp; sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><h2 id="调整内核参数，对于k8s"><a href="#调整内核参数，对于k8s" class="headerlink" title="调整内核参数，对于k8s"></a>调整内核参数，对于k8s</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line"></span><br><span class="line">vm.swappiness=0 #禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span><br><span class="line"></span><br><span class="line">vm.overcommit_memory=1 #不检查物理内存是否够用</span><br><span class="line"></span><br><span class="line">vm.panic_on_oom=0 #开启 OOM</span><br><span class="line"></span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line"></span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line"></span><br><span class="line">fs.file-max=52706963</span><br><span class="line"></span><br><span class="line">fs.nr_open=52706963</span><br><span class="line"></span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line"></span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li><p>其中必备参数</p><ul><li>开启网桥模式<br><code>net.bridge.bridge-nf-call-iptables=1</code><br><code>net.bridge.bridge-nf-call-ip6tables=1</code></li><li>关闭ipv6的协议<br><code>net.ipv6.conf.all.disable_ipv6=1</code></li></ul></li><li><p>其余为优化参数，可不设置<br>&amp;nbsp;</p></li><li><p>手动刷新</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# sysctl --system</span><br></pre></td></tr></table></figure><h2 id="调整系统时区"><a href="#调整系统时区" class="headerlink" title="调整系统时区"></a>调整系统时区</h2><ul><li>设置系统时区为中国&#x2F;上海</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><ul><li>将当前的 UTC 时间写入硬件时钟</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# timedatectl set-local-rtc 0</span><br></pre></td></tr></table></figure><ul><li>重启依赖于系统时间的服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl restart rsyslog</span><br><span class="line">[root@k8s-master-01 ~]# systemctl restart crond</span><br></pre></td></tr></table></figure><h2 id="关闭系统不需要的服务"><a href="#关闭系统不需要的服务" class="headerlink" title="关闭系统不需要的服务"></a>关闭系统不需要的服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl stop postfix &amp;&amp; systemctl disable postfix</span><br></pre></td></tr></table></figure><h2 id="设置-rsyslogd-和-systemd-journald"><a href="#设置-rsyslogd-和-systemd-journald" class="headerlink" title="设置 rsyslogd 和 systemd journald"></a>设置 rsyslogd 和 systemd journald</h2><ul><li>持久化保存日志的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@k8s-master-01 ~]# mkdir /var/log/journal</span><br><span class="line"></span><br><span class="line">[root@k8s-master-01 ~]# mkdir /etc/systemd/journald.conf.d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@k8s-master-01 ~]# cat  &gt;  /etc/systemd/journald.conf.d/99-prophet.conf  &lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">[Journal]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">持久化保存到磁盘</span></span><br><span class="line">Storage=persistent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩历史日志</span></span><br><span class="line">Compress=yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SyncIntervalSec=5m</span><br><span class="line"></span><br><span class="line">RateLimitInterval=30s</span><br><span class="line"></span><br><span class="line">RateLimitBurst=1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最大占用空间10G</span></span><br><span class="line">SystemMaxUse=10G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">单日志文件最大200M</span></span><br><span class="line">SystemMaxFileSize=200M</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志保存时间 2 周</span></span><br><span class="line">MaxRetentionSec=2week</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不将日志转发到 syslog</span></span><br><span class="line">ForwardToSyslog=no</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>重启journald配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# systemctl restart systemd-journald</span><br></pre></td></tr></table></figure><h2 id="升级内核为4-4版本"><a href="#升级内核为4-4版本" class="headerlink" title="升级内核为4.4版本"></a>升级内核为4.4版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>安装完成后检查 &#x2F;boot&#x2F;grub2&#x2F;grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装一次！</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# yum --enablerepo=elrepo-kernel install -y kernel-lt</span><br></pre></td></tr></table></figure><ul><li>设置开机从新内核启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# grub2-set-default &quot;CentOS Linux (4.4.182-1.el7.elrepo.x86_64) 7 (Core)&quot;</span><br></pre></td></tr></table></figure><!--***以上笔记根据尚硅谷官方k8s视频内容总结***链接：https://www.bilibili.com/video/av66617940/?p=7-->]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vagrant初体验</title>
      <link href="/posts/533bc648/"/>
      <url>/posts/533bc648/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h3><p><a href="https://www.vagrantup.com/">Vagrant</a> 就是为了方便的实现虚拟化环境而设计的，使用Ruby开发，基于VirtualBox等虚拟机管理软件的接口，提供了一个可配置、轻量级的便携式虚拟开发环境。使用Vagrant可以很方便的就建立起来一个虚拟环境，而且可以模拟多台虚拟机，这样我们平时还可以在开发机模拟分布式系统。</p><p>Vagrant还会创建一些共享文件夹，用来给你在主机和虚拟机之间共享代码用。这样就使得我们可以在主机上写程序，然后在虚拟机中运行。如此一来团队之间就可以共享相同的开发环境，就不会再出现类似“只有你的环境才会出现的bug”这样的事情。</p><p>团队新员工加入，常常会遇到花一天甚至更多时间来从头搭建完整的开发环境，而有了Vagrant，只需要直接将已经打包好的package（里面包括开发工具，代码库，配置好的服务器等）拿过来就可以工作了，这对于提升工作效率非常有帮助。</p><p>Vagrant不仅可以用来作为个人的虚拟开发环境工具，而且特别适合团队使用，它使得我们虚拟化环境变得如此的简单，只要一个简单的命令就可以开启虚拟之路。</p><hr><h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><p>VirtualBox 是一款开源虚拟机软件。VirtualBox 是由德国 Innotek 公司开发，由Sun Microsystems公司出品的软件，使用Qt编写，在 Sun 被 Oracle 收购后正式更名成 Oracle VM VirtualBox。Innotek 以 GNU General Public License (GPL) 释出 VirtualBox，并提供二进制版本及 OSE 版本的代码。使用者可以在VirtualBox上安装并且执行Solaris、Windows、DOS、Linux、OS&#x2F;2 Warp、BSD等系统作为客户端操作系统。已由甲骨文公司进行开发，是甲骨文公司xVM虚拟化平台技术的一部份。</p><p>VirtualBox号称是最强的免费虚拟机软件，它不仅具有丰富的特色，而且性能也很优异！它简单易用，可虚拟的系统包括Windows（从Windows 3.1到Windows10、Windows Server 2012，所有的Windows系统都支持）、Mac OS X、Linux、OpenBSD、Solaris、IBM OS2甚至Android等操作系统！使用者可以在VirtualBox上安装并且运行上述的这些操作系统！ 与同性质的VMware及Virtual PC比较下，VirtualBox独到之处包括远端桌面协定（RDP）、iSCSI及USB的支持，VirtualBox在客户端操作系统上已可以支持USB 3.0的硬件装置，不过要安装 VirtualBox Extension Pack。</p><hr><h3 id="虚拟开发环境"><a href="#虚拟开发环境" class="headerlink" title="虚拟开发环境"></a>虚拟开发环境</h3><p>平常我们经常会遇到这样的问题：在开发机上面开发完毕程序，放到正式环境之后会出现各种奇怪的问题：描述符少了、nginx配置不正确、MySQL编码不对、php缺少模块、glibc版本太低等。</p><p>所以我们就需要虚拟开发环境，我们虚拟和正式环境一样的虚拟开发环境，而随着个人开发机硬件的升级，我们可以很容易的在本机跑虚拟机，例如VMware、VirtualBox等。因此使用虚拟化开发环境，在本机可以运行自己喜欢的OS（Windows、Ubuntu、Mac等），开发的程序运行在虚拟机中，这样迁移到生产环境可以避免环境不一致导致的莫名错误。</p><p>虚拟开发环境特别适合团队中开发环境、测试环境、正式环境不同的场合，这样就可以使得整个团队保持一致的环境，我写这一章的初衷就是为了让大家和我的开发环境保持一致，让读者和我们整个大团队保持一致的开发环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Vagrant"><a href="#安装Vagrant" class="headerlink" title="安装Vagrant"></a>安装Vagrant</h3><p>目前唯一安装的办法就是到官方网站下载打包好的 <a href="http://www.vagrantup.com/downloads.html">安装包</a> 他的安装过程和VirtualBox的安装一样都是傻瓜化安装，一步一步执行就可以完成安装。</p><blockquote><p>&amp;nbsp;<code>尽量下载最新的程序，因为VirtualBox经常升级，升级后有些接口会变化，老的Vagrant可能无法使用。</code></p></blockquote><p>要想检测安装是否成功，可以打开终端命令行工具，输入vagrant，看看程序是不是已经可以运行了。如果不行，请检查一下环境变量里面是否包含vagrant所在的路径。</p><hr><h3 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h3><p>VirtualBox是Oracle开源的虚拟化系统，它支持多个平台，所以你可以到<a href="https://www.virtualbox.org/wiki/Downloads/">官网网站</a> 下载适合你平台的VirtualBox最新版本并安装，它的安装过程都很傻瓜化，一步一步执行就可以完成安装了。</p><p>本文使用VirtualBox版本<a href="https://dlc-cdn.sun.com/virtualbox/6.1.4/index.html">6.1.4</a></p><h2 id="Vagrant入门"><a href="#Vagrant入门" class="headerlink" title="Vagrant入门"></a>Vagrant入门</h2><h3 id="vagrant的命令详解"><a href="#vagrant的命令详解" class="headerlink" title="vagrant的命令详解"></a>vagrant的命令详解</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">vagrant box add</td><td align="left">添加box的操作</td></tr><tr><td align="left">vagrant init</td><td align="left">初始化box的操作，会生成vagrant的配置文件Vagrantfile</td></tr><tr><td align="left">vagrant up</td><td align="left">启动本地环境</td></tr><tr><td align="left">vagrant ssh</td><td align="left">通过 ssh 登录本地环境所在虚拟机</td></tr><tr><td align="left">vagrant halt</td><td align="left">关闭本地环境</td></tr><tr><td align="left">vagrant suspend</td><td align="left">暂停本地环境</td></tr><tr><td align="left">vagrant resume</td><td align="left">恢复本地环境</td></tr><tr><td align="left">vagrant reload</td><td align="left">修改了 Vagrantfile 后，使之生效（相当于先 halt，再 up）</td></tr><tr><td align="left">vagrant destroy</td><td align="left">彻底移除本地环境</td></tr><tr><td align="left">vagrant box list</td><td align="left">显示当前已经添加的box列表</td></tr><tr><td align="left">vagrant box remove</td><td align="left">删除相应的box</td></tr><tr><td align="left">vagrant package</td><td align="left">打包命令，可以把当前的运行的虚拟机环境进行打包</td></tr><tr><td align="left">vagrant plugin</td><td align="left">用于安装卸载插件</td></tr><tr><td align="left">vagrant status</td><td align="left">获取当前虚拟机的状态</td></tr><tr><td align="left">vagrant global-status</td><td align="left">显示当前用户Vagrant的所有环境状态</td></tr></tbody></table><hr><h3 id="Vagrant常用命令"><a href="#Vagrant常用命令" class="headerlink" title="Vagrant常用命令"></a>Vagrant常用命令</h3><p>前面讲了Vagrant的几个命令：</p><ul><li><strong>vagrant box add</strong> 添加box的操作</li><li><strong>vagrant init</strong> 初始化box的操作</li><li><strong>vagrant up</strong> 启动虚拟机的操作</li><li><strong>vagrant ssh</strong> 登录虚拟机的操作</li></ul><p>Vagrant还包括如下一些操作：</p><ul><li><p><strong>vagrant box list</strong><br>  显示当前已经添加的box列表</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant box list</span></span><br><span class="line">base (virtualbox)</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant box remove</strong><br>  删除相应的box</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant box remove base virtualbox</span></span><br><span class="line">Removing box &#x27;base&#x27; with provider &#x27;virtualbox&#x27;...</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant destroy</strong><br>  停止当前正在运行的虚拟机并销毁所有创建的资源</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant destroy</span></span><br><span class="line">Are you sure you want to destroy the &#x27;default&#x27; VM? [y/N] y</span><br><span class="line">[default] Destroying VM and associated drives...</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant halt</strong><br>  关机</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant halt</span></span><br><span class="line">[default] Attempting graceful shutdown of VM...</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant package</strong><br>  打包命令，可以把当前的运行的虚拟机环境进行打包</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant package</span></span><br><span class="line">[default] Attempting graceful shutdown of VM...</span><br><span class="line">[default] Clearing any previously set forwarded ports...</span><br><span class="line">[default] Creating temporary directory for export...</span><br><span class="line">[default] Exporting VM...</span><br><span class="line">[default] Compressing package to: C:\Users\DOBO\vagrant\package.box</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant plugin</strong><br>  用于安装卸载插件</p></li><li><p><strong>vagrant provision</strong><br>  通常情况下Box只做最基本的设置，而不是设置好所有的环境，因此Vagrant通常使用Chef或者Puppet来做进一步的环境搭建。那么Chef或者Puppet称为provisioning，而该命令就是指定开启相应的provisioning。按照Vagrant作者的说法，所谓的provisioning就是”The problem of installing software on a booted system”的意思。除了Chef和Puppet这些主流的配置管理工具之外，我们还可以使用Shell来编写安装脚本。<br>  &amp;nbsp;<br>  例如： vagrant provision –provision-with chef</p></li><li><p><strong>vagrant reload</strong><br>  重新启动虚拟机，主要用于重新载入配置文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant reload</span></span><br><span class="line">[default] Attempting graceful shutdown of VM...</span><br><span class="line">[default] Setting the name of the VM...</span><br><span class="line">[default] Clearing any previously set forwarded ports...</span><br><span class="line">[default] Creating shared folders metadata...</span><br><span class="line">[default] Clearing any previously set network interfaces...</span><br><span class="line">[default] Preparing network interfaces based on configuration...</span><br><span class="line">[default] Forwarding ports...</span><br><span class="line">[default] -- 22 =&gt; 2222 (adapter 1)</span><br><span class="line">[default] Booting VM...</span><br><span class="line">[default] Waiting for VM to boot. This can take a few minutes.</span><br><span class="line">[default] VM booted and ready for use!</span><br><span class="line">[default] Setting hostname...</span><br><span class="line">[default] Mounting shared folders...</span><br><span class="line">[default] -- /vagrant</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant resume</strong></p><p>  恢复前面被挂起的状态</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">vagrant resume</span></span><br><span class="line">[default] Resuming suspended VM...</span><br><span class="line">[default] Booting VM...</span><br><span class="line">[default] Waiting for VM to boot. This can take a few minutes.</span><br><span class="line">[default] VM booted and ready for use!</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant ssh-config</strong></p><p>  输出用于ssh连接的一些信息</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">vagrant ssh-config</span></span><br><span class="line">Host default</span><br><span class="line">    HostName 127.0.0.1</span><br><span class="line">    User vagrant</span><br><span class="line">    Port 2222</span><br><span class="line">    UserKnownHostsFile /dev/null</span><br><span class="line">    StrictHostKeyChecking no</span><br><span class="line">    PasswordAuthentication no</span><br><span class="line">    IdentityFile &quot;C:\Users/DOBO\.vagrant.d\insecure_private_key&quot;</span><br><span class="line">    IdentitiesOnly yes</span><br><span class="line">    LogLevel FATAL</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant status</strong></p><p>  获取当前虚拟机的状态</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">vagrant status</span></span><br><span class="line">Current machine states:</span><br><span class="line"></span><br><span class="line">default                   running (virtualbox)</span><br><span class="line"></span><br><span class="line">The VM is running. To stop this VM, you can run `vagrant halt` to</span><br><span class="line">shut it down forcefully, or you can run `vagrant suspend` to simply</span><br><span class="line">suspend the virtual machine. In either case, to restart it again,</span><br><span class="line">simply run `vagrant up`.</span><br></pre></td></tr></table></figure></li><li><p><strong>vagrant suspend</strong></p><p>  挂起当前的虚拟机</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant <span class="built_in">suspend</span></span></span><br><span class="line">[default] Saving VM state and suspending execution...</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vagrant配置"><a href="#Vagrant配置" class="headerlink" title="Vagrant配置"></a>Vagrant配置</h2><p>当我们安装好VirtualBox和Vagrant后，我们要开始考虑在VM上使用什么操作系统了，一个打包好的操作系统在Vagrant中称为Box，即Box是一个打包好的操作系统环境，目前网络上什么都有，所以你不用自己去制作操作系统或者制作Box：vagrantbox.es上面有大家熟知的大多数操作系统，你只需要下载就可以了，下载主要是为了安装的时候快速，当然Vagrant也支持在线安装。</p><h3 id="建立开发环境目录"><a href="#建立开发环境目录" class="headerlink" title="建立开发环境目录"></a>建立开发环境目录</h3><p>我的开发机是Windows，所以我建立了如下的开发环境目录，读者可以根据自己的系统不同建立一个目录就可以：</p><blockquote><p>C:\Users\DOBO\vagrant</p></blockquote><h3 id="下载Box"><a href="#下载Box" class="headerlink" title="下载Box"></a>下载Box</h3><p>添加box的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add base 远端的box地址或者本地的box文件名</span><br></pre></td></tr></table></figure><p>vagrant box add 是添加box的命令</p><p>base是box的名称，可以是任意的字符串，base是默认名称，主要用来标识一下你添加的box，后面的命令都是基于这个标识来操作的。</p><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add base http://files.vagrantup.com/lucid64.box</span><br><span class="line">vagrant box add base https://dl.dropbox.com/u/7225008/Vagrant/CentOS-6.3-x86_64-minimal.box</span><br><span class="line">vagrant box add base CentOS-6.3-x86_64-minimal.box</span><br><span class="line">vagrant box add &quot;CentOS 6.3 x86_64 minimal&quot; CentOS-6.3-x86_64-minimal.box</span><br></pre></td></tr></table></figure><p>我在开发机上面是这样操作的，首先进入我们的开发环境目录C:\Users\DOBO\vagrant，执行如下的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add base lucid64.box</span><br></pre></td></tr></table></figure><p>安装过程的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Downloading or copying the box...</span><br><span class="line">Extracting box...te: 47.5M/s, Estimated time remaining: --:--:--)</span><br><span class="line">Successfully added box &#x27;base&#x27; with provider &#x27;virtualbox&#x27;!</span><br></pre></td></tr></table></figure><p>box中的镜像文件被放到了：C:\Users\当前用户名.vagrant.d\boxes\目录下。</p><p>通过vagrant box add这样的方式安装远程的box，可能很慢，所以建议大家先下载box到本地再执行这样的操作。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init</span><br></pre></td></tr></table></figure><p>如果你添加的box名称不是base，那么需要在初始化的时候指定名称，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init &quot;CentOS 6.3 x86_64 minimal&quot;</span><br></pre></td></tr></table></figure><p>初始化过程的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A `Vagrantfile` has been placed in this directory.</span><br><span class="line">You are now ready to `vagrant up` your first virtual environment!</span><br><span class="line">Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information on using Vagrant.</span><br></pre></td></tr></table></figure><p>这样就会在当前目录生成一个 Vagrantfile的文件，里面有很多配置信息，后面我们会详细讲解每一项的含义，但是默认的配置就可以开箱即用。</p><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><p>启动虚拟机的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p>启动过程的信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">[default] Importing base box &#x27;base&#x27;...</span><br><span class="line">[default] Matching MAC address for NAT networking...</span><br><span class="line">[default] Setting the name of the VM...</span><br><span class="line">[default] Clearing any previously set forwarded ports...</span><br><span class="line">[default] Creating shared folders metadata...</span><br><span class="line">[default] Clearing any previously set network interfaces...</span><br><span class="line">[default] Preparing network interfaces based on configuration...</span><br><span class="line">[default] Forwarding ports...</span><br><span class="line">[default] -- 22 =&gt; 2222 (adapter 1)</span><br><span class="line">[default] Booting VM...</span><br><span class="line">[default] Waiting for VM to boot. This can take a few minutes.</span><br><span class="line">[default] VM booted and ready for use!</span><br><span class="line">[default] Mounting shared folders...</span><br><span class="line">[default] -- /vagrant</span><br></pre></td></tr></table></figure><h3 id="连接到虚拟机"><a href="#连接到虚拟机" class="headerlink" title="连接到虚拟机"></a>连接到虚拟机</h3><p>上面已经启动了虚拟机，之后我们就可以通过ssh来连接到虚拟机了。比如在我的开发机中可以像这样来连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><p>连接到虚拟机后的信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Linux lucid64 2.6.32-38-server #83-Ubuntu SMP Wed Jan 4 11:26:59 UTC 2012 x86_64 GNU/Linux</span><br><span class="line">Ubuntu 10.04.4 LTS</span><br><span class="line"></span><br><span class="line">Welcome to the Ubuntu Server!</span><br><span class="line"> * Documentation:  http://www.ubuntu.com/server/doc</span><br><span class="line">New release &#x27;precise&#x27; available.</span><br><span class="line">Run &#x27;do-release-upgrade&#x27; to upgrade to it.</span><br><span class="line"></span><br><span class="line">Welcome to your Vagrant-built virtual machine.</span><br><span class="line">Last login: Fri Sep 14 07:31:39 2012 from 10.0.2.2</span><br></pre></td></tr></table></figure><p>这样我们就可以像连接到一台服务器一样进行操作了。</p><blockquote><p>&amp;nbsp;<code>window机器不支持这样的命令，必须使用第三方客户端来进行连接，例如putty、Xshell4等.</code></p><p>&amp;nbsp;<code>putty为例：</code></p><p>&amp;nbsp;<code>主机地址: 127.0.0.1</code></p><p>&amp;nbsp;<code>端口: 2222</code></p><p>&amp;nbsp;<code>用户名: vagrant</code></p><p>&amp;nbsp;<code>密码: vagrant</code></p></blockquote><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><p>进入系统之后我们可以看一下系统的基础信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vagrant@lucid64:/vagrant$ df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/lucid64-root</span><br><span class="line">                       78G  945M   73G   2% /</span><br><span class="line">none                  179M  176K  179M   1% /dev</span><br><span class="line">none                  184M     0  184M   0% /dev/shm</span><br><span class="line">none                  184M   64K  184M   1% /var/run</span><br><span class="line">none                  184M     0  184M   0% /var/lock</span><br><span class="line">none                  184M     0  184M   0% /lib/init/rw</span><br><span class="line">none                   78G  945M   73G   2% /var/lib/ureadahead/debugfs</span><br><span class="line">/dev/sda1             228M   17M  199M   8% /boot</span><br><span class="line">/vagrant              298G   76G  222G  26% /vagrant</span><br></pre></td></tr></table></figure><p>&#x2F;vagrant这个目录是自动映射的，被映射到C:\Users\DOBO\vagrant，这样就方便我们以后在开发机中进行开发，在虚拟机中进行运行效果测试了。</p><h3 id="Vagrantfile配置文件详解"><a href="#Vagrantfile配置文件详解" class="headerlink" title="Vagrantfile配置文件详解"></a>Vagrantfile配置文件详解</h3><p>在我们的开发目录下有一个文件Vagrantfile，里面包含有大量的配置信息，主要包括三个方面的配置，虚拟机的配置、SSH配置、Vagrant的一些基础配置。Vagrant是使用Ruby开发的，所以它的配置语法也是Ruby的，但是我们没有学过Ruby的人还是可以跟着它的注释知道怎么配置一些基本项的配置。</p><ol><li><p>box设置</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.box = &quot;base&quot;</span><br></pre></td></tr></table></figure><p> 上面这配置展示了Vagrant要去启用那个box作为系统，也就是上面我们输入vagrant init Box名称时所指定的box，如果沒有输入box名称的話，那么默认就是base，VirtualBox提供了VBoxManage这个命令行工具，可以让我们设定VM，用modifyvm这个命令让我们可以设定VM的名称和内存大小等等，这里说的名称指的是在VirtualBox中显示的名称，我们也可以在Vagrantfile中进行设定，在Vagrantfile中加入如下这行就可以设定了：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;dobo&quot;, &quot;--memory&quot;, &quot;512&quot;]</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p> 这行设置的意思是调用VBoxManage的modifyvm的命令，设置VM的名称为dobo，内存为512MB。你可以类似的通过定制其它VM属性来定制你自己的VM。</p></li></ol><p>&amp;nbsp;<br>2. 网络设置</p><pre><code>Vagrant有两种方式来进行网络连接，一种是host-only(主机模式)，意思是主机和虚拟机之间的网络互访，而不是虚拟机访问internet的技术，也就是只有你一個人自High，其他人访问不到你的虚拟机。另一种是Bridge(桥接模式)，该模式下的VM就像是局域网中的一台独立的主机，也就是说需要VM到你的路由器要IP，这样的话局域网里面其他机器就可以访问它了，一般我们设置虚拟机都是自high为主，所以我们的设置一般如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network :private_network, ip: &quot;11.11.11.11&quot;</span><br></pre></td></tr></table></figure>这里我们虚拟机设置为hostonly，并且指定了一个IP，IP的话建议最好不要用192.168..这个网段，因为很有可能和你局域网里面的其它机器IP冲突，所以最好使用类似11.11..这样的IP地址。</code></pre><p>&amp;nbsp;<br>3. hostname设置</p><pre><code>hostname的设置非常简单，Vagrantfile中加入下面这行就可以了：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.hostname = &quot;go-app&quot;</span><br></pre></td></tr></table></figure>设置hostname非常重要，因为当我们有很多台虚拟服务器的时候，都是依靠hostname來做识别的，例如Puppet或是Chef，都是通过hostname來做识别的，既然设置那么简单，所以我们就別偷懒，设置一个。</code></pre><p>&amp;nbsp;<br>4. 同步目录</p><pre><code>我们上面介绍过/vagrant目录默认就是当前的开发目录，这是在虚拟机开启的时候默认挂载同步的。我们还可以通过配置来设置额外的同步目录：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder  &quot;C:\Users\DOBO\data&quot;, &quot;/vagrant_data&quot;</span><br></pre></td></tr></table></figure>上面这个设定，第一个参数是主机的目录，第二个参数是虚拟机挂载的目录</code></pre><p>&amp;nbsp;<br>5. 端口转发</p><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network :forwarded_port, guest: 80, host: 8080</span><br></pre></td></tr></table></figure>上面这句配置可厉害了，这一行的意思是把对host机器上8080端口的访问请求forward到虚拟机的80端口的服务上，例如你在你的虚拟机上使用nginx跑了一个Go应用，那么你在host机器上的浏览器中打开 `http://localhost:8080`时，Vagrant就会把这个请求转发到VM里面跑在80端口的nginx服务上，因此我们可以通过这个设置来帮助我们去设定host和VM之间，或是VM和VM之间的信息交互。&amp;nbsp;&gt;&amp;nbsp;`修改完Vagrantfile的配置后，记得要用vagrant reload命令来重启VM之后才能使用VM更新后的配置`</code></pre><h2 id="模拟打造多机器的分布式系统"><a href="#模拟打造多机器的分布式系统" class="headerlink" title="模拟打造多机器的分布式系统"></a>模拟打造多机器的分布式系统</h2><p>前面这些单主机单虚拟机主要是用来自己做开发机，从这部分开始的内容主要将向大家介绍如何在单机上通过虚拟机来打造分布式造集群系统。这种多机器模式特别适合以下几种人：</p><ol><li>快速建立产品网络的多机器环境，例如web服务器、db服务器</li><li>建立一个分布式系统，学习他们是如何交互的</li><li>测试API和其他组件的通信</li><li>容灾模拟，网络断网、机器死机、连接超时等情况<br>Vagrant支持单机模拟多台机器，而且支持一个配置文件Vagrntfile就可以跑分布式系统。</li></ol><p>现在我们来建立多台VM跑起來，並且让他们之间能够相通信，假设一台是应用服务器、一台是DB服务器，那么这个结构在Vagrant中非常简单，其实和单台的配置差不多，你只需要通过config.vm.define来定义不同的角色就可以了，现在我们打开配置文件进行如下设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.define :web do |web|</span><br><span class="line">    web.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">          v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;web&quot;, &quot;--memory&quot;, &quot;512&quot;]</span><br><span class="line">    end</span><br><span class="line">    web.vm.box = &quot;base&quot;</span><br><span class="line">    web.vm.hostname = &quot;web&quot;</span><br><span class="line">    web.vm.network :private_network, ip: &quot;11.11.1.1&quot;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  config.vm.define :db do |db|</span><br><span class="line">    db.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">          v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;db&quot;, &quot;--memory&quot;, &quot;512&quot;]</span><br><span class="line">    end</span><br><span class="line">    db.vm.box = &quot;base&quot;</span><br><span class="line">    db.vm.hostname = &quot;db&quot;</span><br><span class="line">    db.vm.network :private_network, ip: &quot;11.11.1.2&quot;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这里的设置和前面我们单机设置配置类似，只是我们使用了:web以及:db分別做了两个VM的设置，并且给每个VM设置了不同的hostname和IP，设置好之后再使用<code>vagrant up</code>将虚拟机跑起来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant up</span></span><br><span class="line">Bringing machine &#x27;web&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">Bringing machine &#x27;db&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">[web] Setting the name of the VM...</span><br><span class="line">[web] Clearing any previously set forwarded ports...</span><br><span class="line">[web] Creating shared folders metadata...</span><br><span class="line">[web] Clearing any previously set network interfaces...</span><br><span class="line">[web] Preparing network interfaces based on configuration...</span><br><span class="line">[web] Forwarding ports...</span><br><span class="line">[web] -- 22 =&gt; 2222 (adapter 1)</span><br><span class="line">[web] Running any VM customizations...</span><br><span class="line">[web] Booting VM...</span><br><span class="line">[web] Waiting for VM to boot. This can take a few minutes.</span><br><span class="line">[web] VM booted and ready for use!</span><br><span class="line">[web] Setting hostname...</span><br><span class="line">[web] Configuring and enabling network interfaces...</span><br><span class="line">[web] Mounting shared folders...</span><br><span class="line">[web] -- /vagrant</span><br><span class="line">[db] Setting the name of the VM...</span><br><span class="line">[db] Clearing any previously set forwarded ports...</span><br><span class="line">[db] Fixed port collision for 22 =&gt; 2222. Now on port 2200.</span><br><span class="line">[db] Creating shared folders metadata...</span><br><span class="line">[db] Clearing any previously set network interfaces...</span><br><span class="line">[db] Preparing network interfaces based on configuration...</span><br><span class="line">[db] Forwarding ports...</span><br><span class="line">[db] -- 22 =&gt; 2200 (adapter 1)</span><br><span class="line">[db] Running any VM customizations...</span><br><span class="line">[db] Booting VM...</span><br><span class="line">[db] Waiting for VM to boot. This can take a few minutes.</span><br><span class="line">[db] VM booted and ready for use!</span><br><span class="line">[db] Setting hostname...</span><br><span class="line">[db] Configuring and enabling network interfaces...</span><br><span class="line">[db] Mounting shared folders...</span><br><span class="line">[db] -- /vagrant</span><br></pre></td></tr></table></figure><p>看到上面的信息输出后，我们就可以通过vagrant ssh登录虚拟机了，但是这次和上次使用的不一样了，这次我们需要指定相应的角色，用来告诉ssh你期望连接的是哪一台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant ssh web</span></span><br><span class="line">vagrant@web:~$</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant ssh db</span></span><br><span class="line">vagrant@db:~$</span><br></pre></td></tr></table></figure><p>是不是很酷！现在接下来我们再来验证一下虚拟机之间的通信，让我们先使用ssh登录web虚拟机，然后在web虚拟机上使用ssh登录db虚拟机(默认密码是vagrant)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant ssh web</span></span><br><span class="line">Linux web 2.6.32-38-server #83-Ubuntu SMP Wed Jan 4 11:26:59 UTC 2012 x86_64 GNU/Linux</span><br><span class="line">Ubuntu 10.04.4 LTS</span><br><span class="line"></span><br><span class="line">Welcome to the Ubuntu Server!</span><br><span class="line"> * Documentation:  http://www.ubuntu.com/server/doc</span><br><span class="line">New release &#x27;precise&#x27; available.</span><br><span class="line">Run &#x27;do-release-upgrade&#x27; to upgrade to it.</span><br><span class="line"></span><br><span class="line">Welcome to your Vagrant-built virtual machine.</span><br><span class="line">Last login: Thu Aug  8 18:55:44 2013 from 10.0.2.2</span><br><span class="line">vagrant@web:~$ ssh 11.11.1.2</span><br><span class="line">The authenticity of host &#x27;11.11.1.2 (11.11.1.2)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is e7:8f:07:57:69:08:6e:fa:82:bc:1c:f6:53:3f:12:9e.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;11.11.1.2&#x27; (RSA) to the list of known hosts.</span><br><span class="line">vagrant@11.11.1.2&#x27;s password:</span><br><span class="line">Linux db 2.6.32-38-server #83-Ubuntu SMP Wed Jan 4 11:26:59 UTC 2012 x86_64 GNU/Linux</span><br><span class="line">Ubuntu 10.04.4 LTS</span><br><span class="line"></span><br><span class="line">Welcome to the Ubuntu Server!</span><br><span class="line"> * Documentation:  http://www.ubuntu.com/server/doc</span><br><span class="line">New release &#x27;precise&#x27; available.</span><br><span class="line">Run &#x27;do-release-upgrade&#x27; to upgrade to it.</span><br><span class="line"></span><br><span class="line">Welcome to your Vagrant-built virtual machine.</span><br><span class="line">Last login: Thu Aug  8 18:58:50 2013 from 10.0.2.2</span><br><span class="line">vagrant@db:~$</span><br></pre></td></tr></table></figure><p>通过上面的信息我们可以看到虚拟机之间通信是畅通的，所以现在开始你伟大的架构设计吧，你想设计怎么样的架构都可以，唯一限制你的就是你主机的硬件配置了。</p>]]></content>
      
      
      <categories>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10在鼠标右键中添加程序启动</title>
      <link href="/posts/3e38b720/"/>
      <url>/posts/3e38b720/</url>
      
        <content type="html"><![CDATA[<p><em><strong>注意：这里只是拿VS Code作为例子</strong></em><br>安装注册表，新建文本文件，以.reg为拓展名保存，双击安装</p><ul><li>文件的鼠标右击点击事件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode]</span><br><span class="line">@=&quot;Edit with VSCode&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;D:\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件夹上右击点击事件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\vscode] </span><br><span class="line">@=&quot;Open with VSCode&quot; </span><br><span class="line">&quot;Icon&quot;=&quot;\&quot;D:\\Microsoft VS Code\\Code.exe\&quot;,0&quot; </span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\vscode\command] </span><br><span class="line">@=&quot;\&quot;D:\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot; </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>桌面的鼠标右击点击事件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]</span><br><span class="line">@=&quot;Open Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;D:\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dnSpy化腐朽为神奇</title>
      <link href="/posts/e211e36c/"/>
      <url>/posts/e211e36c/</url>
      
        <content type="html"><![CDATA[<h2 id="项目没源码怎办"><a href="#项目没源码怎办" class="headerlink" title="项目没源码怎办"></a>项目没源码怎办</h2><p>刚到一个需求，对旧版本景区系统升级实名制，跟现场工程和研发部老员工沟通得知，该项目是当初直接使用的标准版本1.x，由于当初研发人员的失误，未对当时版本存档，现在版本已经迭代到2.x。</p><ul><li>解决方案有两个<ol><li>寻找距离最近的其他有源码项目版本进行修改，覆盖原有项目文件</li><li>采用反编译原有项目文件，修改后再编译替换原有项目文件</li></ol></li></ul><p>经过反复沟通后，找到一份版本最相近项目源码，又要来现场工程使用的原项目文件，并对原项目文件进行反编译，比较两个版本之间的差异。<br>最终确认相关需求在旧标准版种已经集成了，只是在客户端定制化开发的时候移除了这部分代码，按照现在得情况，选择第二个解决方案更稳妥。</p><h2 id="dnSpy反编译神器"><a href="#dnSpy反编译神器" class="headerlink" title="dnSpy反编译神器"></a>dnSpy反编译神器</h2><h3 id="dnSpy"><a href="#dnSpy" class="headerlink" title="dnSpy"></a>dnSpy</h3><ul><li><a href="https://github.com/0xd4d/dnSpy"><strong>dnSpy</strong></a> 由<a href="https://github.com/0xd4d">0xd04d</a> 开发的.NET程序集调试神器。可以在没有源码的情况下反编译程序集进行调试和修改。主要功能有<ul><li>调试.NET和Unity程序集</li><li>编辑.NET和Unity程序集</li><li>亮白和暗黑两个主题色</li></ul></li></ul><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><ul><li>dnSpy需要根据程序集选择对应的版本<ul><li>程序64位和32位</li><li>net472和netcore</li></ul></li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/dnSpy%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC.png" alt="dnSpy不同版本"></p><h4 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h4><p>界面样子跟Visual Studio类似，主题风格好像也是自动读取Visual Studio的设置<br><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/dnSpy%E7%95%8C%E9%9D%A2.png" alt="dnSpy界面"></p><h3 id="加载程序集"><a href="#加载程序集" class="headerlink" title="加载程序集"></a>加载程序集</h3><ul><li>可以将程序集拖入dnSpy窗口左侧程序集资源管理器框内，它自动加载相关依赖程序集</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%8A%A0%E8%BD%BD%E5%90%8E.png" alt="程序集加载后"></p><ul><li>可以看到程序集内部的命名空间以及资源文件</li><li>根据命名空间找到需要修改的类，这里业务是</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%AE%9A%E4%BD%8D.png" alt="修改类定位"></p><ul><li>找到业务所在的方法</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E5%AE%9A%E4%BD%8D%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%B3%95.png" alt="定位业务方法"></p><p>dnSpy反编译后生成的代码可能跟源码有些不一致，有些类拓展方法反编译后会生成原始代码。</p><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E7%9B%B8%E8%BF%91%E7%89%88%E6%9C%AC%E6%BA%90%E7%A0%81.png" alt="相近版本源码"></p><p>例如，下图中Linq拓展方法会被反编译成Linq原始代码<br><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/dnSpy%E5%8F%8D%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81.png" alt="dnSpy反编译源码"></p><h3 id="修改程序集"><a href="#修改程序集" class="headerlink" title="修改程序集"></a>修改程序集</h3><ul><li>找到要修改的地方，然后在类中右键“<code>编辑方法 (C#)</code>”：</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E9%80%89%E6%8B%A9%E7%BC%96%E8%BE%91%E6%96%B9%E6%B3%95.png" alt="选择编辑方法"></p><ul><li><p>参照相近版本源码的代码，可以看到只需要复制对应的代码，修改下变量名和提示语即可</p></li><li><p>这里赞一下dnSpy竟然连智能感知提示都有，这无疑是锦上添花</p></li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E6%99%BA%E8%83%BD%E6%84%9F%E7%9F%A5%E6%8F%90%E7%A4%BA.png" alt="智能感知提示"></p><ul><li>修改完毕后，点击下方编译</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E7%82%B9%E5%87%BB%E7%BC%96%E8%AF%91.png" alt="点击编译"></p><ul><li>如果业务比较复杂的可以编译后调试下新功能</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E8%B0%83%E8%AF%95.png" alt="调试"></p><ul><li>附加到进程，我打开的是64位dnSpy，只能找到64位的程序，</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E9%99%84%E5%8A%A0%E5%88%B0%E8%BF%9B%E7%A8%8B.png" alt="附加到进程"></p><p>在代码中设置断点就可以命中了，过程跟Visual Studio一样</p><h3 id="保存程序集"><a href="#保存程序集" class="headerlink" title="保存程序集"></a>保存程序集</h3><ul><li>点击<code>文件</code>-&gt;<code>保存模块</code>，保存的程序集名字最好加以区分下加个_crack后缀</li></ul><p><img src="https://img.chobon.top/blog/dnSpy%E5%8C%96%E8%85%90%E6%9C%BD%E4%B8%BA%E7%A5%9E%E5%A5%87/%E4%BF%9D%E5%AD%98%E7%A8%8B%E5%BA%8F%E9%9B%86.png" alt="保存程序集"></p><p>先备份原先程序集，用修改过的程序集替换，启动程序即可</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这不是我第一次使用dnSpy，但是这是第一次在项目上用这种方式改需求的，出现这种源码遗失的事情说明在项目管理上存在漏洞，不仅仅是源代码管理，还有对项目立项、需求分析、技术方案、产品交付、产品迭代、版本控制这一系列过程中没有形成一套标准的操作流程，导致项目文档遗失，无法追踪溯源。此举无奈！！！</p><p>dnSpy还可以干很多其他的事，例如，此处省略N字。可谓真香！</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> 反编译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dnSpy </tag>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK基于Docker简单实现</title>
      <link href="/posts/edff6ffe/"/>
      <url>/posts/edff6ffe/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>ELK</strong> 是ElasticSearch、Logstash、Kibana的简称，一般用于日志系统，从日志收集，日志转储，日志展示等入手，用以提供简洁高效的日志处理机制。</p><p><strong>ElasticSearch</strong> 是一个基于Lucene的搜索服务器，它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。</p><p><strong>Logstash</strong> 是开源的服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。</p><p><strong>Kibana</strong> 是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。</p><p><em><strong>本文中ELK需要用的组件有Elasticsearch、Logstash、Kibana、Filebeat，主要介绍组件部署以及一些注意事项</strong></em></p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul><li>本文采用docker镜像版本均为7.6.1</li></ul><p><img src="https://img.chobon.top/blog/ELK%E5%9F%BA%E4%BA%8EDocker%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/ELK.png" alt="ELK架构图"></p><h3 id="ElasticSearch部署"><a href="#ElasticSearch部署" class="headerlink" title="ElasticSearch部署"></a>ElasticSearch部署</h3><ul><li><code>elasticsearch.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 访问ID限定，0.0.0.0为不限制，生产环境请设置为固定IP</span></span><br><span class="line"><span class="attr">transport.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># elasticsearch节点名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment"># elasticsearch节点信息</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"><span class="comment"># 下面的配置是关闭跨域验证</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>docker命令</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -di \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">-v /d/docker/elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /d/docker/elk/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">elasticsearch:7.6.1</span><br></pre></td></tr></table></figure><h3 id="Kibana部署"><a href="#Kibana部署" class="headerlink" title="Kibana部署"></a>Kibana部署</h3><h4 id="Kibana配置文件"><a href="#Kibana配置文件" class="headerlink" title="Kibana配置文件"></a>Kibana配置文件</h4><ul><li><code>kibana.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://elasticsearch:9200&quot;</span>]</span><br><span class="line"><span class="comment"># 操作界面语言设置</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Docker启动Kibana命令"><a href="#Docker启动Kibana命令" class="headerlink" title="Docker启动Kibana命令"></a>Docker启动Kibana命令</h4><p>这里通过docker<code>--link</code>来链接已经创建好的elasticsearch容器，kibana容器内部可以通过<code>容器名:端口</code>形式进行访问，Kibana配置文件里可以这样设置 <code>elasticsearch.hosts: [&quot;http://elasticsearch:9200&quot;]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -di \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-v /d/docker/elk/kibana.yml:/usr/share/kibana/config/kibana.yml \</span><br><span class="line">--<span class="built_in">link</span> elasticsearch:elasticsearch --name kibana kibana:7.6.1</span><br></pre></td></tr></table></figure><h3 id="Logstash部署"><a href="#Logstash部署" class="headerlink" title="Logstash部署"></a>Logstash部署</h3><h4 id="Logstash配置文件"><a href="#Logstash配置文件" class="headerlink" title="Logstash配置文件"></a>Logstash配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter&#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">                &quot;message&quot; =&gt; &quot;%&#123;TIMESTAMP_ISO8601:date&#125;\s*\[%&#123;DATA:ip&#125;\]\s*\[%&#123;DATA:thread&#125;\]\s*%&#123;LOGLEVEL:level&#125;\s*%&#123;NOTSPACE:clazz&#125;\s*-\s*%&#123;DATA:method&#125;\s*(?&lt;body&gt;[\S\s]*)&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        remove_field =&gt; [&quot;@timestamp&quot;,&quot;host&quot;,&quot;@version&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">                &quot;source&quot; =&gt; &quot;/app/logs/%&#123;NOTSPACE:project&#125;/&quot;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        add_field =&gt; &#123;</span><br><span class="line">            &quot;env&quot; =&gt;&quot;%&#123;[fields][env]&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove_field =&gt; [&quot;fields&quot;,&quot;tags&quot;,&quot;offset&quot;,&quot;input_type&quot;,&quot;beat&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        replace =&gt; [&quot;date&quot;,&quot;%&#123;date&#125;+0800&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [&quot;date&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSSZ&quot;]</span><br><span class="line">        target =&gt; &quot;@timestamp&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    # 这个是logstash的控制台打印（进行安装调试的开启，稍后成功后去掉这个配置即可）</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">    # elasticsearch配置</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class="line">        index =&gt; &quot;testindex&quot;</span><br><span class="line">        document_type =&gt; &quot;testlog&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Docker启动Logstash命令"><a href="#Docker启动Logstash命令" class="headerlink" title="Docker启动Logstash命令"></a>Docker启动Logstash命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -di \</span><br><span class="line">-p 5044:5044 \</span><br><span class="line">-v /d/docker/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf \</span><br><span class="line">--<span class="built_in">link</span> elasticsearch:elasticsearch \</span><br><span class="line">--name logstash \</span><br><span class="line">logstash:7.6.1</span><br></pre></td></tr></table></figure><h3 id="Filebeat部署"><a href="#Filebeat部署" class="headerlink" title="Filebeat部署"></a>Filebeat部署</h3><h4 id="Filebeat配置文件"><a href="#Filebeat配置文件" class="headerlink" title="Filebeat配置文件"></a>Filebeat配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/app/logs/**/*.log</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">dev-1</span></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;logstash:5044&quot;</span>]</span><br><span class="line"><span class="attr">output.console:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">pretty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Docker启动Filebeat命令"><a href="#Docker启动Filebeat命令" class="headerlink" title="Docker启动Filebeat命令"></a>Docker启动Filebeat命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -di \</span><br><span class="line">-v /d/docker/elk/filebeat/logs:/app/logs \</span><br><span class="line">-v /d/docker/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml \</span><br><span class="line">-v /d/docker/elk/filebeat/data:/usr/share/filebeat/data \</span><br><span class="line">--<span class="built_in">link</span> logstash:logstash \</span><br><span class="line">--name filebeat \</span><br><span class="line">elastic/filebeat:7.6.1</span><br></pre></td></tr></table></figure><h4 id="Filebeat模拟数据"><a href="#Filebeat模拟数据" class="headerlink" title="Filebeat模拟数据"></a>Filebeat模拟数据</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-03-26T13:47:32.219Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;beat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;943d74347f9c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;943d74347f9c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.6.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dev-1&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;input_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-03-26 21:47:31.684 [10.111.12.217] [New I/O worker #16] DEBUG c.a.dubbo.remoting.exchange.support.header.HeartbeatHandler -  [DUBBO] Receive heartbeat response in thread New I/O worker #16, dubbo version: server, current host: 10.111.12.217&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span> <span class="number">11517459</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/app/logs/ttms-server/ttms-server-dubbo.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>该文件放在在<code>/app/logs</code>文件夹下，Filebeat配置文件里指定检查日志路径。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ELK </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> Logstash </tag>
            
            <tag> Kibana </tag>
            
            <tag> Filebeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像设置时区</title>
      <link href="/posts/90a6f46a/"/>
      <url>/posts/90a6f46a/</url>
      
        <content type="html"><![CDATA[<ul><li>设置环境变量<code>TIME_ZONE</code></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> TIME_ZONE=Asia/Shanghai</span><br></pre></td></tr></table></figure><ul><li>安装tzdata工具包</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk --update --no-cache tzdata</span></span><br></pre></td></tr></table></figure><ul><li>增加时区设置</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/<span class="variable">$&#123;TIME_ZONE&#125;</span> /etc/localtime &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;&#123;TIME_ZONE&#125;&quot;</span> &gt; /etc/timezone</span></span><br></pre></td></tr></table></figure><p>重新构建镜像即可</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alpine </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10突然端口不能绑定排查记录</title>
      <link href="/posts/ce2d8125/"/>
      <url>/posts/ce2d8125/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>突然SSR自启报错，如下图</p><p><img src="https://img.chobon.top/blog/Win10%E7%AA%81%E7%84%B6%E7%AB%AF%E5%8F%A3%E4%B8%8D%E8%83%BD%E7%BB%91%E5%AE%9A%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/SSR%E9%94%99%E8%AF%AF.png" alt="SSR端口不能绑定错误"></p><span id="more"></span><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>起先以为是某个程序占用了1080端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon | findstr 1080</span><br></pre></td></tr></table></figure><p>发现没有任何程序占用端口</p><p>于是更换原先端口1080，改成1088测试也不可以，基本可以排除掉自身程序和其他程序原因，应该是操作系统造成的。</p><p>后来网上搜索资料发现，这是win10的 <a href="https://support.microsoft.com/eu-es/help/4074588/windows-10-update-kb4074588">KB4074588</a> 补丁已知问题，系统预留了一些段，可以用命令查看系统保留了哪些端口段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 show excludedportrange protocol=tcp</span><br></pre></td></tr></table></figure><p>显示一排被预留的端口，里面就有1080端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 delete excludedportrange protocol=tcp startport=1080 numberofports=1</span><br></pre></td></tr></table></figure><p>结果提示access is denied。。。</p><p>通过继续谷歌搜索，终于在github上shadowsocks-windows里找到个<a href="https://github.com/shadowsocks/shadowsocks-windows/issues/1835">issue</a>描述了这个情景，底下有人提出是Hyper-V预留端口导致的</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>根据github上外国友人留言<a href="https://github.com/docker/for-win/issues/3171#issuecomment-459205576">comment</a><br>由于hyper-v保留了这些端口，所以需要先关闭hyper-v，保留想要保留的端口，再开启hyper-v功能</p><ol><li><p>Disable hyper-v (which will required a couple of restarts)<br><code>dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</code></p></li><li><p>When you finish all the required restarts, reserve the port you want so hyper-v doesn’t reserve it back<br><code>netsh int ipv4 add excludedportrange protocol=tcp startport=1080 numberofports=1</code></p></li><li><p>Re-Enable hyper-V (which will require a couple of restart)<br><code>dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</code></p></li></ol><p>重启就搞定了。。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>没事多看看github上issue，兴许可以学到不少</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020元旦-❄哈尔滨跨年之旅❄下</title>
      <link href="/posts/d370cf36/"/>
      <url>/posts/d370cf36/</url>
      
        <content type="html"><![CDATA[<h2 id="2020年01月04日"><a href="#2020年01月04日" class="headerlink" title="2020年01月04日"></a><strong>2020年01月04日</strong></h2><h3 id="从雪乡返程"><a href="#从雪乡返程" class="headerlink" title="从雪乡返程"></a>从雪乡返程</h3><p>跟司机约好时间在8点出发，7:30就起床洗漱，突然想起洒水成冰，于是匆匆忙忙烧了壶热水下楼玩。我帮同事拍得还可以，他帮我拍得不成样，放个同事得视频。</p><ul><li><strong>撒水成冰</strong><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/洒水成冰.mp4#t=1" type="video/mp4"></video></li></ul><span id="more"></span><ul><li><strong>亚布力俄罗斯民族家访</strong><ul><li><strong>喀秋莎</strong><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/俄罗斯家访1.mp4#t=1" type="video/mp4"></video></li><li><strong>这首歌忘记了</strong><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/俄罗斯家访2.mp4#t=1" type="video/mp4"></video></li></ul></li></ul><p>这两首歌，一些点心和茶水，每个人50块，听说是50块，具体不清楚，包含在行程费用里了。</p><h3 id="亚布力滑雪"><a href="#亚布力滑雪" class="headerlink" title="亚布力滑雪"></a>亚布力滑雪</h3><ul><li><p><strong>滑雪场</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E6%BB%91%E9%9B%AA%E5%85%A5%E5%9C%BA.jpg" alt="滑雪入场"></p></li><li><p><strong>滑雪</strong></p><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/滑雪.mp4#t=1" type="video/mp4"></video></li><li><p><strong>滑雪</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E6%BB%91%E9%9B%AA.jpg" alt="自拍"></p></li></ul><p>滑雪项目也非常赞，这是我第二次滑雪，刚开始熟悉得时候摔了几跤，后面就游刃有余了。哈尔滨还是太冷了点，特别是下午风吹过来都有点刺骨，在南方滑雪会比较舒服。</p><h3 id="哈尔滨市区晚餐"><a href="#哈尔滨市区晚餐" class="headerlink" title="哈尔滨市区晚餐"></a>哈尔滨市区晚餐</h3><p>返程得路上大家又是一顿瞌睡，差不多20点到了哈尔滨市区，找了一遍吃得，选择了大家都喜欢得口味四川火锅-大龙燚。说实话，东北菜太腻，大家都吃腻了。这顿饭也吃得挺爽得，吃饱喝足，再散步回去。</p><h2 id="2020年01月05日"><a href="#2020年01月05日" class="headerlink" title="2020年01月05日"></a>2020年01月05日</h2><h3 id="睡懒觉"><a href="#睡懒觉" class="headerlink" title="睡懒觉"></a>睡懒觉</h3><p>机票是下午16点，所以中午就要出发去机场了，索性早上就睡个大懒觉，睡到自然醒。悠闲得出去逛逛，找个寻常早餐店，吃点热包子喝点豆浆，东北人一天开始也是如此惬意。</p><h3 id="旅途返程"><a href="#旅途返程" class="headerlink" title="旅途返程"></a>旅途返程</h3><p>中午12点打车，第一单滴滴被司机拒绝了，还好第二单司机服务态度挺好的，再次吐槽下，服务意识太差了。到了哈尔滨站坐机场大巴去机场，飞机又误点1小时，20点到杭州萧山机场。整个行程完满结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
          <category> 哈尔滨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈尔滨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020元旦-❄哈尔滨跨年之旅❄中</title>
      <link href="/posts/17d4acb/"/>
      <url>/posts/17d4acb/</url>
      
        <content type="html"><![CDATA[<h2 id="2020年01月02日"><a href="#2020年01月02日" class="headerlink" title="2020年01月02日"></a><strong>2020年01月02日</strong></h2><h3 id="去雪谷"><a href="#去雪谷" class="headerlink" title="去雪谷"></a>去雪谷</h3><p>旅途得觉好像永远睡不够，司机早早在酒店门口等了，我们还在收拾行李。终于9点多坐上车出发去雪谷，整个车程预计3.5个小时，但是司机好像开得比较慢。中午12点才到五常市，13点到山河屯，下车吃了山河屯大锅炖，隐约感觉这家店应该是司机认识的。吃完中饭几点出发忘记了，路上都是些乡间道路，时而睡觉时而看看外面风景。</p><ul><li><strong>山河屯铁锅炖</strong><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/山河屯铁锅炖.mp4#t=1" type="video/mp4"></video><span id="more"></span></li></ul><h3 id="雪谷之夜"><a href="#雪谷之夜" class="headerlink" title="雪谷之夜"></a>雪谷之夜</h3><p>到雪谷的时候估计是在17-18点，但是天已经完全黑了，本来是安排下午包饺子，然后去雪地游乐园玩。我们一行人对包饺子都没啥兴趣，看天色已经黑了匆忙放下行李就去游乐园玩，结果令人咂舌。这个游乐园就是一个相对比较简陋的自建游玩场地，雪滑梯、冰上自行车、雪上碰碰球，我们玩了一会就腻了。住宿条件也比较差，伙食也比较差，本来路上大家都说想喝点酒，看到这菜瞬间都没兴趣了，也就老板娘自制的盐渍果肉算是特色。吃完饭大家说要出去逛逛，路上也没什么人了，就两侧的小店还开着，逛了一会拍了一会就回去了。</p><ul><li><strong>盐渍果肉</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E7%9B%90%E6%B8%8D%E6%9E%9C%E8%82%89.jpg" alt="盐渍果肉"></li></ul><h2 id="2020年01月03日"><a href="#2020年01月03日" class="headerlink" title="2020年01月03日"></a><strong>2020年01月03日</strong></h2><h3 id="徒步穿越羊草山"><a href="#徒步穿越羊草山" class="headerlink" title="徒步穿越羊草山"></a>徒步穿越羊草山</h3><p>整个穿越全程15公里<br>早上7.30点起来，准备行李，8点准时出发坐马拉雪橇穿过平坦的5公里路</p><ul><li><strong>马拉雪橇</strong><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/马拉雪橇.mp4#t=1" type="video/mp4"></video></li></ul><p>不过上山前最好准备雪地靴（雪套）和套在鞋底的冰爪，雪地山路比较滑，冰爪可以提供良好得抓地力和摩檫力，雪套既可以防止雪进入鞋里，又可以减轻腿部酸痛。</p><ul><li><p><strong>穿越羊草山</strong></p><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/穿越羊草山.mp4#t=1" type="video/mp4"></video><p>羊草山穿越雪山的过程倒是没有我想象的那样艰难，整个过程还挺舒服的，爬山的时候身体也没那么冷，反而还热得满身是汗，喝冷水降温。</p></li><li><p><strong>勇者标语</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%8B%87%E8%80%85%E6%A0%87%E8%AF%AD.jpg" alt="勇者标语"></p></li><li><p><strong>路标</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E8%B7%AF%E6%A0%87.jpg" alt="路标"></p></li><li><p><strong>登顶</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E7%99%BB%E9%A1%B6.jpg" alt="登顶"></p></li><li><p><strong>雪糕</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E9%9B%AA%E7%B3%95.jpg" alt="雪糕"></p></li><li><p><strong>同事合影</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%90%8C%E4%BA%8B%E5%90%88%E5%BD%B1.jpg" alt="同事合影"></p></li><li><p><strong>羊草山合影</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E7%A9%BF%E8%B6%8A%E7%BE%8A%E8%8D%89%E5%B1%B1%E5%90%88%E5%BD%B1.jpg" alt="穿越羊草山合影"></p></li><li><p><strong>雪乡石碑合影</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E9%9B%AA%E4%B9%A1%E7%9F%B3%E7%A2%91%E5%90%88%E5%BD%B1.jpg" alt="雪乡石碑合影"></p></li></ul><h3 id="雪乡中饭-军旅大串"><a href="#雪乡中饭-军旅大串" class="headerlink" title="雪乡中饭-军旅大串"></a>雪乡中饭-军旅大串</h3><p>到雪乡已经是下午2点多，我们把随身行李放置在住宿的地方就出去寻找吃的了，晃晃悠悠的选中了雪乡石碑附近的军旅大串，这家店价格实惠，味道正宗，强烈推荐！我们6个人吃了人均626元，吃得很爽，分量足，这是这趟旅行中最好吃得一顿，没有之一。由于吃得太爽，忘记拍照了。</p><ul><li><p><strong>雪韵大街</strong></p><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/雪韵大街.mp4#t=1" type="video/mp4"></video></li><li><p><strong>冰雪温泉</strong><br>这个温泉是最值得的，非常爽。  </p><video id="video" width="100%" controls="" preload="metadata"><source id="mp4" src="https://img.chobon.top/blog/2020元旦-哈尔滨跨年之旅/冰雪温泉.mp4#t=1" type="video/mp4"></video></li></ul><h3 id="雪乡之夜"><a href="#雪乡之夜" class="headerlink" title="雪乡之夜"></a>雪乡之夜</h3><ul><li><p><strong>雪乡夜景</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E9%9B%AA%E4%B9%A1%E5%A4%9C%E6%99%AF1.jpg" alt="雪乡夜景"></p></li><li><p><strong>雪乡夜景</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E9%9B%AA%E4%B9%A1%E5%A4%9C%E6%99%AF2.jpg" alt="雪乡夜景"></p></li><li><p><strong>雪乡夜景</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E9%9B%AA%E4%B9%A1%E5%A4%9C%E6%99%AF3.jpg" alt="雪乡夜景"></p></li><li><p><strong>雪乡夜景</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E9%9B%AA%E4%B9%A1%E5%A4%9C%E6%99%AF4.jpg" alt="雪乡夜景"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
          <category> 哈尔滨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈尔滨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020元旦-❄哈尔滨跨年之旅❄上</title>
      <link href="/posts/a477ffa0/"/>
      <url>/posts/a477ffa0/</url>
      
        <content type="html"><![CDATA[<h2 id="2019年12月31日"><a href="#2019年12月31日" class="headerlink" title="2019年12月31日"></a>2019年12月31日</h2><h3 id="赶飞机"><a href="#赶飞机" class="headerlink" title="赶飞机"></a>赶飞机</h3><p>2019年12月31日，16点许收到短信通知飞机从20:55延误到21:30，感觉赶飞机时间很充裕。18点下班，计划着离飞机起飞还有3.5个小时，于是乎打算坐公交到机场大巴候车点，可能是由于放假的缘故，公交一辆比一辆饱满，结果等了半小时也没上车。又打算去坐地铁，结果还是一样，每一列都是人挤人，好不容易挤上了地铁。<br>时间已经过去一个小时，慢悠悠的去肯德基点了餐，吃好去买机场大巴票。听大巴工作人员说时间有点紧巴了，顿时感觉有点紧迫了，心里还是担心可能赶不上飞机。好不容易等到大巴发车，又过了一小时，19:55到达机场，排队办理行李托运，感觉有点不对劲，携程app上显示已停止检票，心里咯噔一下，又去问工作人员，得知飞机因为延误还可以检票。大概21:00的时候检票进入候车厅，心终于可以放下了。结果飞机又延误了3次，最后22:30才登机。预计2:00到达哈尔滨太平机场。真是一场惊心动魄，跌宕起伏的赶飞机经历。。。<br>  <span id="more"></span></p><ul><li><strong>22:28分，摄于杭州萧山机场飞机起飞前</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E6%9D%AD%E5%B7%9E%E8%90%A7%E5%B1%B1%E6%9C%BA%E5%9C%BA%E9%A3%9E%E6%9C%BA%E8%B5%B7%E9%A3%9E%E5%89%8D.png" alt="杭州萧山机场飞机起飞前"></li></ul><h2 id="全世界，新年快乐！晚安！"><a href="#全世界，新年快乐！晚安！" class="headerlink" title="全世界，新年快乐！晚安！"></a><strong>全世界，新年快乐！晚安！</strong></h2><h2 id="2020年01月01日"><a href="#2020年01月01日" class="headerlink" title="2020年01月01日"></a>2020年01月01日</h2><ul><li><strong>01:45分，摄于哈尔滨太平机场飞机落地</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%93%88%E5%B0%94%E6%BB%A8%E5%A4%AA%E5%B9%B3%E6%9C%BA%E5%9C%BA%E9%A3%9E%E6%9C%BA%E8%90%BD%E5%9C%B0.jpg" alt="哈尔滨太平机场飞机落地"></li></ul><p>入住在机场附近的宾馆，性价比有点超出预期，免费接送机。到了宾馆洗漱完，03:30才睡觉。</p><h3 id="前往哈尔滨中央大街"><a href="#前往哈尔滨中央大街" class="headerlink" title="前往哈尔滨中央大街"></a>前往哈尔滨中央大街</h3><p>由于跟司机约好在08:30，所以早上8点就醒了，虽然只睡了4.5个小时，但是依然精神抖擞，这大概就是出去玩的buff吧，出来混迟早要还的。08:40上车经过1.5个小时的车程，到了今天要入住的宾馆，离中央大街一公里左右，环境很一般，装修大概3星级，房间内空间太小。<br>安置好行李，马不停蹄的赶往中央大街，寻找中午吃饭的地儿。</p><ul><li><strong>圣索菲亚教堂</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%9C%A3%E7%B4%A2%E8%8F%B2%E4%BA%9A%E6%95%99%E5%A0%82.jpg" alt="圣索菲亚教堂"></li></ul><h3 id="中央大街老厨家"><a href="#中央大街老厨家" class="headerlink" title="中央大街老厨家"></a>中央大街老厨家</h3><p>中午饭决定在网红店-老厨家解决，幸好我们马不停蹄的出来觅食，拿了个排队相对较少的票子，但是还是顶不住饿，就跟别人拼桌吃饭。拼桌得是一家子人出来游玩，夫妻带着2周岁的女儿和女方母亲，我们提议一起点餐吃，对方也觉得这个方式好，毕竟我们出来玩，只是为了体验下，多些人吃可以多点些菜品。</p><ul><li><strong>老厨家菜品</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E8%80%81%E5%8E%A8%E5%AE%B6%E8%8F%9C%E5%93%81.jpg" alt="老厨家菜品"><br>东北菜还是相对比较油腻的，而我又是纯肉食，这顿午餐不太符合我的口味。只有一盘回锅肉，酸甜适中，口感酥脆，肥而不腻，可能早饭没吃饿了吃什么都香的缘故。</li></ul><h3 id="中央大街上的冰雕"><a href="#中央大街上的冰雕" class="headerlink" title="中央大街上的冰雕"></a>中央大街上的冰雕</h3><p>漫步在中央大街上，随处可见的冰雕，熙熙攘攘的人群，让这座北方之城增添了不少人气。街道两侧是大大小小的商场和店铺，同行伙伴分别在这些店铺购置了御寒物品。</p><ul><li><strong>冰雕</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%951.jpg" alt="冰雕"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%952.jpg" alt="冰雕"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%953.jpg" alt="冰雕"></li><li><strong>王者荣耀</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E7%8E%8B%E8%80%85.jpg" alt="王者"></li><li><strong>抗洪碑</strong><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E6%8A%97%E6%B4%AA%E7%A2%91.jpg" alt="抗洪碑"></li><li><strong>松花江冰雪嘉年华</strong><br>由于刚到哈尔滨，还完全没适应这里的温度，而且前几天刚下完雪又在江面上，温度异常的寒冷…太冷了导致情绪不够高涨，没有玩任何活动，有点小遗憾。</li></ul><h3 id="哈尔滨冰雪大世界"><a href="#哈尔滨冰雪大世界" class="headerlink" title="哈尔滨冰雪大世界"></a>哈尔滨冰雪大世界</h3><p>由于在江面上浪费了太多时间，高估了哈尔滨打车效率，没有在设定时间（16点）前到冰雪大世界。入园得时候还被门口卖滑板得黑心商人骗了，说里面滑板卖50一个，外面只要20一个。结果里面价格也20，问题是外面买得质量差得要死，滑一次就坏了。以后买东西必须找可以售后，不然有些黑心商人丧失道德底线。<br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C%E9%97%A8%E5%8F%A3.jpg" alt="冰雪大世界门口"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C%E9%97%A8%E5%8F%A32.jpg" alt="门口"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C%E9%97%A8%E5%8F%A3%E9%92%9F.jpg" alt="门口钟"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C%E8%A7%82%E9%9F%B3.jpg" alt="观音"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C1.jpg" alt="童话世界"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C2.jpg" alt="童话世界"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C3.jpg" alt="冰雪邮局"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C4.jpg" alt="童话世界"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C5.jpg" alt="童话世界"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C6.jpg" alt="童话世界"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C7.jpg" alt="龙舟"><br><img src="https://img.chobon.top/blog/2020%E5%85%83%E6%97%A6-%E5%93%88%E5%B0%94%E6%BB%A8%E8%B7%A8%E5%B9%B4%E4%B9%8B%E6%97%85/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C%E5%85%A8%E6%99%AF.jpg" alt="全景"><br>担心去冰雪大世界迟了会人太多，所以我们没吃晚饭就去了，结果就是又冷又饿，玩得也不起劲，排队玩大冰滑梯，又花了2个小时。剩下得就是一些冰雕，走马观灯，草草结束了冰雪大世界。事实证明出去玩一定要温饱作为基础，不然玩不起来。。返程坐车也是一波三折，的士坐地起价，还好有返回中央大街得巴士，5元一位。</p><h3 id="夜宵"><a href="#夜宵" class="headerlink" title="夜宵"></a>夜宵</h3><p>坐巴士到了中央大街，距离酒店还有1公里路程，又冷又饿，大家都不想走，但是出租车又坐地起价（这里再次吐槽下哈尔滨得出租车，真的是让游客对哈尔滨印象非常差）。此时已经是八点多了，按照南方人正常思维，这个点吃饭也不算晚，但是商场周边饭店基本上已经关门了，大街也没心思去找吃得，索性回酒店得路上随便凑合一下。于是路过一家烧烤店，匆匆填饱肚子。</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
          <category> 哈尔滨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈尔滨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker更换为国内阿里镜像源</title>
      <link href="/posts/d075c0bd/"/>
      <url>/posts/d075c0bd/</url>
      
        <content type="html"><![CDATA[<p>首先去阿里云申请一个镜像资源地址</p><p>控制台&#x3D;&gt;容器镜像服务&#x3D;&gt;镜像加速器</p><p>修改Docker配置文件,<code>/etc/docker/daemon.json</code></p><p>没有这个文件就创建一个</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://lo831hm4.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>:wq</code>保存文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# systemctl daemon-reload</span><br><span class="line">[root@chobon ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><p>搞定了，可以咻咻的下载镜像了</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker私有Ip地址仓库</title>
      <link href="/posts/cc697ac5/"/>
      <url>/posts/cc697ac5/</url>
      
        <content type="html"><![CDATA[<h2 id="docker私有仓库"><a href="#docker私有仓库" class="headerlink" title="docker私有仓库"></a><strong>docker私有仓库</strong></h2><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a><strong>打标签</strong></h3><p><code>docker tag &lt;image&gt;:&lt;tag&gt; &lt;ip&gt;:&lt;port&gt;/&lt;image&gt;:&lt;tag&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# docker tag demo_service_20191230_184347:master 192.168.122.101:5000/library/demo_service:master</span><br></pre></td></tr></table></figure><h3 id="查看镜像是否已经创建好"><a href="#查看镜像是否已经创建好" class="headerlink" title="查看镜像是否已经创建好"></a><strong>查看镜像是否已经创建好</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# docker images</span><br><span class="line">REPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">demo_service_20191230_184347                        master              e636d97a1326        46 hours ago        246MB</span><br><span class="line">192.168.122.101:5000/library/demo_service           master              e636d97a1326        46 hours ago        246MB</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="推送镜像到私有仓库"><a href="#推送镜像到私有仓库" class="headerlink" title="推送镜像到私有仓库"></a><strong>推送镜像到私有仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# docker push 192.168.122.101:5000/library/demo_service</span><br><span class="line">Get https://192.168.122.101:5000/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p>这里报错是因为docker默认是https，想要推送到私有仓库还得在docker配置文件里加上一条设置。</p><h3 id="修改docker配置文件"><a href="#修改docker配置文件" class="headerlink" title="修改docker配置文件"></a><strong>修改docker配置文件</strong></h3><p>修改文件 <code>vi /etc/docker/daemon.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://d8b3zdiw.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">    <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.122.101:5000&quot;</span>]#新增</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载配置 <code>systemctl daemon-reload</code> 重启docker <code>systemctl restart docker</code></p><h3 id="重新推送镜像"><a href="#重新推送镜像" class="headerlink" title="重新推送镜像"></a><strong>重新推送镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# docker push 192.168.122.101:5000/library/demo_service:master</span><br><span class="line"></span><br><span class="line">The push refers to repository [192.168.122.101:5000/library/demo_service]</span><br><span class="line">25c442adb32f: Pushed</span><br><span class="line">51828ce7738a: Pushed</span><br><span class="line">cd464e998e4f: Pushed</span><br><span class="line">ade02cbbac9a: Pushed</span><br><span class="line">e36299e0cdf7: Pushed</span><br><span class="line">1be02b18dfe7: Pushed</span><br><span class="line">831c5620387f: Pushed</span><br><span class="line">master: digest: sha256:5cec75598864dcd5194024360695b8e74fd3e2aeadc3629e9b519222fd644673 size: 1794</span><br></pre></td></tr></table></figure><h3 id="查看私有仓库镜像"><a href="#查看私有仓库镜像" class="headerlink" title="查看私有仓库镜像"></a><strong>查看私有仓库镜像</strong></h3><p>先删除本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# docker rmi 192.168.122.101:5000/library/demo_service:master</span><br><span class="line">Untagged: 192.168.122.101:5000/library/demo_service:master</span><br><span class="line">Untagged: 192.168.122.101:5000/library/demo_service@sha256:5cec75598864dcd5194024360695b8e74fd3e2aeadc3629e9b519222fd644673</span><br><span class="line">[root@chobon ~]# docker images</span><br><span class="line">REPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">demo_service_20191230_184347                        master              e636d97a1326        46 hours ago        246MB</span><br></pre></td></tr></table></figure><p>从私有仓库拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# docker pull 192.168.122.101:5000/library/demo_service:master</span><br><span class="line">master: Pulling from library/demo_service</span><br><span class="line">Digest: sha256:5cec75598864dcd5194024360695b8e74fd3e2aeadc3629e9b519222fd644673</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> 192.168.122.101:5000/library/demo_service:master</span><br><span class="line">192.168.122.101:5000/library/demo_service:master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS学习KVM笔记-管理篇</title>
      <link href="/posts/e6e6d61e/"/>
      <url>/posts/e6e6d61e/</url>
      
        <content type="html"><![CDATA[<h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><p>KVM虚拟机的克隆分为两种</p><ul><li><strong>直接宿主机克隆</strong></li><li><strong>复制配置文件和磁盘文件</strong></li></ul><h3 id="直接克隆"><a href="#直接克隆" class="headerlink" title="直接克隆"></a>直接克隆</h3><blockquote><p>查看虚拟机状态</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon networks]# virsh list --all</span><br><span class="line"> Id    名称                         状态</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> 1     vm1_centos7                    running</span><br><span class="line"> 3     vm2_centos7                    running</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>关闭虚拟机vm2_centos7</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon networks]# virsh shutdown vm2_centos7</span><br><span class="line">域 vm2_centos7 被关闭</span><br></pre></td></tr></table></figure><blockquote><p>执行克隆指令，以<code>vm2_cnetos7</code>为源，克隆新虚拟机名称<code>vm3_centos7</code>，新虚拟机磁盘文件存储地址<code>/mnt/kvm/vfs/vm3.qcow2</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon networks]# virt-clone -o vm2_centos7 -n vm3_centos7 -f /mnt/kvm/vfs/vm3.qcow2</span><br><span class="line">正在分配 <span class="string">&#x27;vm3.qcow2&#x27;</span>                                                                                                                                                                                                             |  40 GB  00:00:00</span><br><span class="line"></span><br><span class="line">成功克隆 <span class="string">&#x27;vm3_centos7&#x27;</span>。</span><br></pre></td></tr></table></figure><h3 id="复制克隆"><a href="#复制克隆" class="headerlink" title="复制克隆"></a>复制克隆</h3><blockquote><p>第一步还是关闭虚拟机  </p></blockquote><p><code>virsh shutdown vm1_centos7</code></p><ul><li><strong>复制配置文件</strong></li></ul><blockquote><p>查看需要复制的虚拟机配置，这里复制可以通过任意方法<br>虚拟机配置文件存储在 <code>/etc/libvirt/qemu</code> 文件夹里</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon networks]# virsh dumpxml vm1_centos7</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span> <span class="attr">type</span>=<span class="string">&#x27;kvm&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>vm1_centos7<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uuid</span>&gt;</span>19854718-3319-4a9a-8e44-23c1e884af08<span class="tag">&lt;/<span class="name">uuid</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">currentMemory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">currentMemory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">placement</span>=<span class="string">&#x27;static&#x27;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">arch</span>=<span class="string">&#x27;x86_64&#x27;</span> <span class="attr">machine</span>=<span class="string">&#x27;pc-i440fx-rhel7.0.0&#x27;</span>&gt;</span>hvm<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boot</span> <span class="attr">dev</span>=<span class="string">&#x27;hd&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">features</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">acpi</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">apic</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">features</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpu</span> <span class="attr">mode</span>=<span class="string">&#x27;custom&#x27;</span> <span class="attr">match</span>=<span class="string">&#x27;exact&#x27;</span> <span class="attr">check</span>=<span class="string">&#x27;partial&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">model</span> <span class="attr">fallback</span>=<span class="string">&#x27;allow&#x27;</span>&gt;</span>Westmere-IBRS<span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">policy</span>=<span class="string">&#x27;require&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;md-clear&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">policy</span>=<span class="string">&#x27;require&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;spec-ctrl&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">policy</span>=<span class="string">&#x27;require&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;ssbd&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">clock</span> <span class="attr">offset</span>=<span class="string">&#x27;utc&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timer</span> <span class="attr">name</span>=<span class="string">&#x27;rtc&#x27;</span> <span class="attr">tickpolicy</span>=<span class="string">&#x27;catchup&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timer</span> <span class="attr">name</span>=<span class="string">&#x27;pit&#x27;</span> <span class="attr">tickpolicy</span>=<span class="string">&#x27;delay&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timer</span> <span class="attr">name</span>=<span class="string">&#x27;hpet&#x27;</span> <span class="attr">present</span>=<span class="string">&#x27;no&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">clock</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">on_poweroff</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_poweroff</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">on_reboot</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_reboot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">on_crash</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_crash</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">suspend-to-mem</span> <span class="attr">enabled</span>=<span class="string">&#x27;no&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">suspend-to-disk</span> <span class="attr">enabled</span>=<span class="string">&#x27;no&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">emulator</span>&gt;</span>/usr/libexec/qemu-kvm<span class="tag">&lt;/<span class="name">emulator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">device</span>=<span class="string">&#x27;disk&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">&#x27;qemu&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;qcow2&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">&#x27;/kvm/vfs/vm1.qcow2&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;vda&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;virtio&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x06&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">device</span>=<span class="string">&#x27;cdrom&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">&#x27;qemu&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;raw&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;hda&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;ide&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">readonly</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;drive&#x27;</span> <span class="attr">controller</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">target</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">unit</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">&#x27;usb&#x27;</span> <span class="attr">index</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">model</span>=<span class="string">&#x27;ich9-ehci1&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x04&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x7&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">&#x27;usb&#x27;</span> <span class="attr">index</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">model</span>=<span class="string">&#x27;ich9-uhci1&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">master</span> <span class="attr">startport</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x04&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span> <span class="attr">multifunction</span>=<span class="string">&#x27;on&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">&#x27;usb&#x27;</span> <span class="attr">index</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">model</span>=<span class="string">&#x27;ich9-uhci2&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">master</span> <span class="attr">startport</span>=<span class="string">&#x27;2&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x04&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x1&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">&#x27;usb&#x27;</span> <span class="attr">index</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">model</span>=<span class="string">&#x27;ich9-uhci3&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">master</span> <span class="attr">startport</span>=<span class="string">&#x27;4&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x04&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x2&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">index</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">model</span>=<span class="string">&#x27;pci-root&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">&#x27;ide&#x27;</span> <span class="attr">index</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x01&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x1&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">&#x27;virtio-serial&#x27;</span> <span class="attr">index</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x05&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">&#x27;network&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mac</span> <span class="attr">address</span>=<span class="string">&#x27;52:54:00:39:c5:c0&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span> <span class="attr">network</span>=<span class="string">&#x27;default&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x03&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">serial</span> <span class="attr">type</span>=<span class="string">&#x27;pty&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;isa-serial&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">model</span> <span class="attr">name</span>=<span class="string">&#x27;isa-serial&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">serial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">console</span> <span class="attr">type</span>=<span class="string">&#x27;pty&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;serial&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">channel</span> <span class="attr">type</span>=<span class="string">&#x27;unix&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;org.qemu.guest_agent.0&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;virtio-serial&#x27;</span> <span class="attr">controller</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;mouse&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;ps2&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;keyboard&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;ps2&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">memballoon</span> <span class="attr">model</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x07&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">memballoon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rng</span> <span class="attr">model</span>=<span class="string">&#x27;virtio&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">backend</span> <span class="attr">model</span>=<span class="string">&#x27;random&#x27;</span>&gt;</span>/dev/urandom<span class="tag">&lt;/<span class="name">backend</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x08&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rng</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以直接用命令<code>virsh dumpxml vm1_centos7 &gt; /etc/libvirt/qemu/vm3_centos7.xml</code></p></blockquote><ul><li><strong>复制磁盘文件</strong></li></ul><blockquote><p>进到磁盘文件夹 <code>/kvm/vfs</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon vfs]# <span class="built_in">cp</span> vm1.qcow2 vm3.qcow2</span><br></pre></td></tr></table></figure><ul><li><strong>修改配置文件</strong></li></ul><blockquote><p>修改虚拟磁盘位置 <code>&lt;source file=&#39;/kvm/vfs/vm3.qcow2&#39;/&gt;</code><br>修改虚拟机uuid <code>&lt;uuid&gt;19854718-3319-4a9a-8e44-23c1e884af08&lt;/uuid&gt;</code><br>修改虚拟机名字 <code>&lt;name&gt;vm3_centos7&lt;/name&gt;</code><br>修改虚拟机mac地址 <code>&lt;mac address=&#39;52:54:00:39:60:ce&#39;/&gt;</code></p></blockquote><ul><li><strong>定义新虚拟机</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# virsh define /etc/libvirt/qemu/vm3_centos7.xml</span><br><span class="line">定义域 vm4_centos7（从 /etc/libvirt/qemu/vm3_centos7.xml）</span><br></pre></td></tr></table></figure><h2 id="配置新虚拟网络"><a href="#配置新虚拟网络" class="headerlink" title="配置新虚拟网络"></a>配置新虚拟网络</h2><p><em><strong>详情可以参考《<a href="../3504ec6a/">CentOS学习KVM笔记-网络篇</a>》</strong></em></p><blockquote><p>查看虚拟机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon networks]# virsh list --all</span><br><span class="line"> Id    名称                         状态</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> 1     vm1_centos7                    running</span><br><span class="line"> -     vm2_centos7                    关闭</span><br><span class="line"> -     vm3_centos7                    关闭</span><br></pre></td></tr></table></figure><blockquote><p>查看虚拟机mac地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# virsh dumpxml vm3_centos7 | grep <span class="string">&#x27;mac address&#x27;</span></span><br><span class="line">      &lt;mac address=<span class="string">&#x27;52:54:00:39:60:ce&#x27;</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>配置<code>vm3_centos7</code>的dhcp网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# virsh net-edit default</span><br></pre></td></tr></table></figure><blockquote><p>绑定虚拟机mac和ip</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">host</span> <span class="attr">mac</span>=<span class="string">&#x27;52:54:00:39:60:ce&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;vm3&#x27;</span> <span class="attr">ip</span>=<span class="string">&#x27;192.168.122.103&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动虚拟机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon networks]# virsh start vm3_centos7</span><br><span class="line">域 vm3_centos7 已开始</span><br></pre></td></tr></table></figure><blockquote><p>连接上虚拟机把网络设置为开机启动<code>ONBOOT=yes</code>,再重启虚拟机内部通信网络就配置好了，再可以通过端口映射到宿主机。</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>查看所有虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh list --all</span><br></pre></td></tr></table></figure><ul><li>挂起虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">suspend</span> linux-xx</span><br></pre></td></tr></table></figure><ul><li>通过配置文件启动虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh create /etc/libvirt/qemu/linux-xx.xml</span><br></pre></td></tr></table></figure><ul><li>开机启动虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh autostart linux-xx</span><br></pre></td></tr></table></figure><ul><li>关闭开机启动虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh auto start --<span class="built_in">disable</span> linux-xx</span><br></pre></td></tr></table></figure><ul><li>关闭虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh shutdown linux-xx</span><br></pre></td></tr></table></figure><ul><li>连接虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh console linux-xx</span><br></pre></td></tr></table></figure><ul><li>停止虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh destroy linux-xx</span><br></pre></td></tr></table></figure><ul><li>删除虚拟机定义</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh undefine linux-xx</span><br></pre></td></tr></table></figure><ul><li>导出KVM虚拟机配置文件，<em>KVM虚拟机配置文件可以通过这种方式进行备份。</em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh dumpxml linux-xx1 &gt; /etc/libvirt/qemu/linux-xx2.xml</span><br></pre></td></tr></table></figure><ul><li>克隆虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-clone -o linux-xx1 -n linux-xx2 -f /linux-xx.qcow2</span><br></pre></td></tr></table></figure><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">autostart      <span class="comment">#自动加载指定的一个虚拟机</span></span><br><span class="line">connect        <span class="comment">#重新连接到hypervisor</span></span><br><span class="line">console        <span class="comment">#连接到客户会话</span></span><br><span class="line">create         <span class="comment">#从一个SML文件创建一个虚拟机</span></span><br><span class="line">start          <span class="comment">#开始一个非活跃的虚拟机</span></span><br><span class="line">destroy        <span class="comment">#删除一个虚拟机</span></span><br><span class="line">define         <span class="comment">#从一个XML文件定义一个虚拟机</span></span><br><span class="line">domid          <span class="comment">#把一个虚拟机名或UUID转换为ID</span></span><br><span class="line">domuuid        <span class="comment">#把一个郁闷或ID转换为UUID</span></span><br><span class="line">dominfo        <span class="comment">#查看虚拟机信息</span></span><br><span class="line">domstate       <span class="comment">#查看虚拟机状态</span></span><br><span class="line">domblkstat     <span class="comment">#获取虚拟机设备快状态</span></span><br><span class="line">domifstat      <span class="comment">#获取虚拟机网络接口状态</span></span><br><span class="line">dumpxml        <span class="comment">#XML中的虚拟机信息</span></span><br><span class="line">edit           <span class="comment">#编辑某个虚拟机的XML文件</span></span><br><span class="line">list           <span class="comment">#列出虚拟机</span></span><br><span class="line">migrate        <span class="comment">#将虚拟机迁移到另一台主机</span></span><br><span class="line">quit           <span class="comment">#退出非交互式终端</span></span><br><span class="line">reboot         <span class="comment">#重新启动一个虚拟机</span></span><br><span class="line">resume         <span class="comment">#重新恢复一个虚拟机</span></span><br><span class="line">save           <span class="comment">#把一个虚拟机的状态保存到一个文件</span></span><br><span class="line">dump           <span class="comment">#把一个虚拟机的内核dump到一个文件中以方便分析</span></span><br><span class="line">shutdown       <span class="comment">#关闭一个虚拟机</span></span><br><span class="line">setmem         <span class="comment">#改变内存的分配</span></span><br><span class="line">setmaxmem      <span class="comment">#改变最大内存限制值</span></span><br><span class="line"><span class="built_in">suspend</span>        <span class="comment">#挂起一个虚拟机</span></span><br><span class="line">vcpuinfo       <span class="comment">#虚拟机的cpu信息</span></span><br><span class="line">version        <span class="comment">#显示virsh版本</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iptables学习笔记</title>
      <link href="/posts/4d47a63e/"/>
      <url>/posts/4d47a63e/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><p>KVM安装了虚拟机通过NAT方式访问外放，但是端口映射一直不成功，可能是iptables哪里配置有问题。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a><strong>起因</strong></h2><p>在<a href="../3504ec6a/">CentOS学习KVM笔记-网络篇</a>的时候需要映射虚拟机端口，按照网上的iptables介绍的端口映射规则，加了这三条规则，但是没有效果。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables <span class="literal">-A</span> INPUT <span class="literal">-p</span> tcp <span class="literal">--dport</span> <span class="number">10122</span> <span class="literal">-j</span> ACCEPT</span><br><span class="line">iptables <span class="literal">-t</span> nat <span class="literal">-A</span> PREROUTING <span class="literal">-d</span> <span class="number">192.168</span>.<span class="number">124.21</span> <span class="literal">-p</span> tcp <span class="literal">-m</span> tcp <span class="literal">--dport</span> <span class="number">10122</span> <span class="literal">-j</span> DNAT <span class="literal">--to-destination</span> <span class="number">192.168</span>.<span class="number">122.101</span>:<span class="number">22</span></span><br><span class="line">iptables <span class="literal">-t</span> nat <span class="literal">-A</span> POSTROUTING <span class="literal">-s</span> <span class="number">192.168</span>.<span class="number">122.0</span>/<span class="number">255.255</span>.<span class="number">255.0</span> <span class="literal">-d</span> <span class="number">192.168</span>.<span class="number">122.101</span> <span class="literal">-p</span> tcp <span class="literal">-m</span> tcp <span class="literal">--dport</span> <span class="number">22</span> <span class="literal">-j</span> SNAT <span class="literal">--to-source</span> <span class="number">192.168</span>.<span class="number">122.1</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="iptables介绍"><a href="#iptables介绍" class="headerlink" title="iptables介绍"></a><strong>iptables介绍</strong></h2><h3 id="iptables概念"><a href="#iptables概念" class="headerlink" title="iptables概念"></a><strong>iptables概念</strong></h3><p>按照正常的理解上，iptables是个防火墙，跟windows里面的防火墙规则类似。其实iptables不是真正的防火墙，我们可以理解成一个客户端代理工具，用户通过iptables这个代理，将用户的安全设定执行到对应的安全框架中，这个安全框架”才是直正的防火墙，这个框架的名字叫 netfilter。</p><p>netfilter才是防火墙真正的安全框架( framework)， netfilter位于内核空间。<br>iptables其实是个命令行工具，位于用户空间，我们用这个工具操作真正的框架。  </p><p>netfilter&#x2F; iptables(下文中简称为 iptables)组成 Linux平台下的包过滤防火墙，与大多数的 Linux软件一样，这个包过滤防火墙是兔费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换(NAT)等功能。  </p><p>Netfilter是 Linux操作系统核心层内部的—一个数据包处理模块，它具有如下功能：</p><p>网络地址转换( Network Address Translate)</p><p>数据包内容修改以及数据包过滤的防火墙功能。所以说，虽然我们使用 service iptables start启动 iptables”服务”，但是其实准确的来说， iptables并没有一个守护进程，所以并不能算是真正意义上的服务，而应该算是内核提供的功能。  </p><h3 id="iptables原理"><a href="#iptables原理" class="headerlink" title="iptables原理"></a><strong>iptables原理</strong></h3><p>我们知道iptables是按照规则来办事的，我们就来说说规则(rules)，规则其实就是网络管理员预定义的条件，规则一般的定义为”如果数据包头符合这样的条件，就这样处理这个数据包”。规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议(如TCP、UDP、|CMP)和服务类型(如HTP、FP和SMTP)等。<br>数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行(accept)、拒绝(reject))和丢弃(drop)等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p><p>这样说可能并不容易理解，我们来换个容易理解的角度，从头说起  </p><blockquote><p>当客户端访问服务器的web服务时，客户端发送报文到网卡，而tcp&#x2F;ip协议栈是属于内核的一部分，所以，客户端的信息会通过内核的TCP协议传输到用户空间中的web服务中，而此时，客户端报文的目标终点为web服务所监听的套接字(P：Por)上，当web服务需要响应客户端请求时，web服务发出的响应报文的目标终点则为客户端，这个时候，web服务所监听的P与端囗反而变成了原点，我们说过， netfilter 才是真正的防火墙，它是内核的部分，所以，如果我们想要防火墙能够达到”防火”的目的，则需要在内核中设置关卡，所有进出的报文都要通过这些关卡，经过检查后，符合放行条件的才能放行，符合阻拦条件的则需要被阻止，于是，就出现了input关卡和 output关卡，而这些关卡在 iptables中不被称为关卡”而被称为链”。</p></blockquote><p>其实我们上面描述的场景并不完善，因为客户端发来的报文访问的目标地址可能并不是本机，而是其他服务器，当本机的内核支持 IP FORWARD时，我们可以将报文转发给其他服务器，所以，这个时候，我们就会提到 iptables中的其他”关卡，也就是其他链”，他们就是”路由前”、“转发”、”路由后”，他们的英文名是PREROUTING、FORWARD、POSTROUTING也就是说，当我们启用了防火墙功能时，报文需要经过如下关卡，也就是说，根据实际情况的不同，报文经过链可能不同。如果报文需要转发，那么报文则不会经过Input链发往用户空间，而是直接在内核空间中经过forward链和postrouting链转发出去的。</p><h2 id="iptables基础"><a href="#iptables基础" class="headerlink" title="iptables基础"></a><strong>iptables基础</strong></h2><h3 id="iptables结构"><a href="#iptables结构" class="headerlink" title="iptables结构"></a><strong>iptables结构</strong></h3><p>iptables的结构：iptables -&gt; Tables -&gt; Chains -&gt; Rules. 简单地讲，tables由chains组成，而chains又由rules组成。如下图所示。  </p><h3 id="iptables表与链"><a href="#iptables表与链" class="headerlink" title="iptables表与链"></a><strong>iptables表与链</strong></h3><p>iptables具有Filter，Nat，Mangle，Raw四种内建表：</p><h4 id="Filter表"><a href="#Filter表" class="headerlink" title="Filter表"></a><strong>Filter表</strong></h4><blockquote><p>Filter表示iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：</p></blockquote><ul><li>INPUT  <ul><li>处理来自外部的数据。</li></ul></li><li>OUTPUT  <ul><li>处理向外发送的数据。</li></ul></li><li>FORWARD  <ul><li>将数据转发到本机的其他网卡设备上。</li></ul></li></ul><h4 id="Nat表"><a href="#Nat表" class="headerlink" title="Nat表"></a><strong>Nat表</strong></h4><blockquote><p>NAT表有三种内建链：</p></blockquote><ul><li>PREROUTING<ul><li>处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。</li></ul></li><li>POSTROUTING<ul><li>处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）。</li></ul></li><li>OUTPUT<ul><li>处理本机产生的数据包。</li></ul></li></ul><h4 id="Mangle表"><a href="#Mangle表" class="headerlink" title="Mangle表"></a><strong>Mangle表</strong></h4><blockquote><p>Mangle表用于指定如何处理数据包。它能改变TCP头中的QoS位。Mangle表具有5个内建链：</p></blockquote><ul><li>PREROUTING</li><li>OUTPUT</li><li>FORWARD</li><li>INPUT</li><li>POSTROUTING</li></ul><h4 id="Raw表"><a href="#Raw表" class="headerlink" title="Raw表"></a><strong>Raw表</strong></h4><blockquote><p>Raw表用于处理异常、状态跟踪，它具有2个内建链：</p></blockquote><ul><li>PREROUTING</li><li>OUTPUT</li></ul><p>下图展示了iptables的三个内建表：</p><h3 id="iptables规则"><a href="#iptables规则" class="headerlink" title="iptables规则"></a><strong>iptables规则</strong></h3><blockquote><p>规则（Rules）注意点</p></blockquote><ul><li>Rules包括一个条件和一个目标(target)</li><li>如果满足条件，就执行目标(target)中的规则或者特定值。</li><li>如果不满足条件，就判断下一条Rules。</li></ul><blockquote><p>目标值（Target Values）</p></blockquote><ul><li>ACCEPT<ul><li>允许防火墙接收数据包</li></ul></li><li>DROP<ul><li>防火墙丢弃包</li></ul></li><li>QUEUE<ul><li>防火墙将数据包移交到用户空间</li></ul></li><li>RETURN<ul><li>防火墙停止执行当前链中的后续Rules，并返回到调用链(the calling chain)中。</li></ul></li></ul><h2 id="iptables操作"><a href="#iptables操作" class="headerlink" title="iptables操作"></a><strong>iptables操作</strong></h2><h3 id="选择iptables表"><a href="#选择iptables表" class="headerlink" title="选择iptables表"></a><strong>选择iptables表</strong></h3><ul><li><p><strong>语法</strong></p><ul><li><code>iptables -t table</code><ul><li><code>-t</code> - 选择表，有效值：filter，mangle，raw，nat</li><li>不加这个参数默认选择filter，</li></ul></li></ul></li><li><p>查看filter表：<br><em>注意：如果不指定 -t选项，就只会显示默认的 filter表。因此，以下两种命令形式是一个意思：</em><br><code>iptables -t filter --list</code><br>或者<br><code>iptables --list</code></p></li><li><p>查看mangle表：<br><code>iptables -t mangle --list</code></p></li><li><p>查看nat表：<br><code>iptables -t nat --list</code></p></li><li><p>查看raw表：<br><code>iptables -t raw --list</code></p></li></ul><hr><h3 id="查看iptables规则"><a href="#查看iptables规则" class="headerlink" title="查看iptables规则"></a><strong>查看iptables规则</strong></h3><ul><li><strong>语法</strong><ul><li><code>iptables -nvL chain</code><ul><li><code>-n</code> - 显示ip</li><li><code>-v</code> - 显示流量信息</li><li><code>--line-number</code> - 显示序号</li></ul></li></ul></li></ul><p>显示列说明：</p><ul><li><strong>pkts</strong> : 对应规则匹配到的报文的个数。</li><li><strong>bytes</strong> : 对应匹配到的报文包的大小总和。</li><li><strong>in</strong> : 表示数据包由哪个接口(网卡)流入，我们可以设置通过哪块网卡流入的报文需要匹配当前规则。</li><li><strong>target</strong> : 规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。</li><li><strong>prot</strong> : 表示规则对应的协议，是否只针对某些协议应用此规则。</li><li><strong>opt</strong> : 表示规则对应的选项。</li><li><strong>out</strong> : 表示数据包由哪个接口(网卡)流出，我们可以设置通过哪块网卡流出的报文需要匹配当前规则。</li><li><strong>source</strong> : 表示规则对应的源头地址，可以是一个IP，也可以是一个网段。</li><li><strong>destination</strong> : 表示规则对应的目标地址。可以是一个IP，也可以是一个网段。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables –list</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num        target                 prot    opt        <span class="built_in">source</span>            destination</span><br><span class="line">1    RH-Firewall-1-INPUT     all       —         0.0.0.0/0         0.0.0.0/0</span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num        target                 prot    opt        <span class="built_in">source</span>            destination</span><br><span class="line">1      RH-Firewall-1-INPUT   all        –      0.0.0.0/0           0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target    prot opt <span class="built_in">source</span>              destination</span><br><span class="line"></span><br><span class="line">Chain RH-Firewall-1-INPUT (2 references)</span><br><span class="line">num  target    prot opt <span class="built_in">source</span>              destination</span><br><span class="line">1    ACCEPT    all  –  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">2    ACCEPT    icmp –  0.0.0.0/0            0.0.0.0/0          icmp <span class="built_in">type</span> 255</span><br><span class="line">3    ACCEPT    esp  –  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">4    ACCEPT    ah  –  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">5    ACCEPT    udp  –  0.0.0.0/0            224.0.0.251        udp dpt:5353</span><br><span class="line">6    ACCEPT    udp  –  0.0.0.0/0            0.0.0.0/0          udp dpt:631</span><br><span class="line">7    ACCEPT    tcp  –  0.0.0.0/0            0.0.0.0/0          tcp dpt:631</span><br><span class="line">8    ACCEPT    all  –  0.0.0.0/0            0.0.0.0/0          state RELATED,ESTABLISHED</span><br><span class="line">9    ACCEPT    tcp  –  0.0.0.0/0            0.0.0.0/0          state NEW tcp dpt:22</span><br><span class="line">10  REJECT    all  –  0.0.0.0/0            0.0.0.0/0          reject-with icmp-host-prohibited</span><br></pre></td></tr></table></figure><p>以上输出包含下列字段：  </p><ul><li>num – 指定链中的规则编号</li><li>target – 前面提到的target的特殊值</li><li>prot – 协议：tcp, udp, icmp等</li><li>source – 数据包的源IP地址</li><li>destination – 数据包的目标IP地址</li></ul><hr><h3 id="清空itables规则"><a href="#清空itables规则" class="headerlink" title="清空itables规则"></a><strong>清空itables规则</strong></h3><ul><li><strong>语法</strong><ul><li><code>iptables -F(--flush) chain</code><ul><li><code>chain</code> - 指定要追加规则的链</li></ul></li></ul></li></ul><p>在配置iptables之前，你通常需要用iptables –list命令或者iptables-save命令查看有无现存规则，因为有时需要删除现有的iptables规则：<br><code>iptables -flush</code><br>或者<br><code>iptables -F</code><br>这两条命令是等效的。但是并非执行后就万事大吉了。你仍然需要检查规则是不是真的清空了，因为有的linux发行版上这个命令不会清除NAT表中的规则，此时只能手动清除：<br><code>iptables -t NAT -F</code></p><hr><h3 id="增加iptables规则"><a href="#增加iptables规则" class="headerlink" title="增加iptables规则"></a><strong>增加iptables规则</strong></h3><p>可以用 <code>iptables -A</code> 命令追加新规则，其中-A表示Append。因此，新的规则将追加到链尾。<br><em><strong>一般而言，最后一条规则用于丢弃(DROP)所有数据包。如果你已经有这样的规则了，并且使用 -A参数添加新规则，那么就是无用功。</strong></em></p><h4 id="追加规则（-A-–append）"><a href="#追加规则（-A-–append）" class="headerlink" title="追加规则（-A,–append）"></a>追加规则（-A,–append）</h4><ul><li><strong>语法</strong><ul><li><code>iptables -A chain firewall-rule</code><ul><li><code>chain</code> - 指定要追加规则的链</li><li><code>firewall-rule</code> – 具体的规则参数</li></ul></li></ul></li></ul><h4 id="插入规则（-I-–insert）"><a href="#插入规则（-I-–insert）" class="headerlink" title="插入规则（-I,–insert）"></a>插入规则（-I,–insert）</h4><ul><li><strong>语法</strong><ul><li><code>iptables -I chain [rule-num] firewall-rule</code><ul><li><code>chain</code> - 指定要追加规则的链</li><li><code>[rule-num]</code> - 可选插入的序号</li><li><code>firewall-rule</code> – 具体的规则参数</li></ul></li></ul></li></ul><hr><h3 id="删除iptables规则"><a href="#删除iptables规则" class="headerlink" title="删除iptables规则"></a><strong>删除iptables规则</strong></h3><p>删除规则有两种方法：</p><ul><li><p><strong>方法一</strong>：根据规则的编号去删除规则</p></li><li><p><strong>方法二</strong>：根据具体的匹配条件与动作删除规则</p></li><li><p><strong>语法</strong></p><ul><li><code>iptables -D chain rule-num</code> 或者 <code>firewall-rule</code><ul><li><code>chain</code> - 指定要删除规则的链</li><li><code>rule-num</code> - 规则的序号</li><li><code>firewall-rule</code> - 具体的规则参数</li></ul></li></ul></li></ul><p>先查看一下filter表中INPUT链中的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables --line -nvL INPUT</span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1        4   231 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:53</span><br><span class="line">2        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:53</span><br><span class="line">3        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:67</span><br></pre></td></tr></table></figure><p>结果出来是带<code>num</code>序号的，假如我们想删第1条。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -t filter -D INPUT 1</span><br><span class="line">[root@chobon ~]# iptables --line -nvL INPUT</span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:53</span><br><span class="line">2        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:67</span><br><span class="line">3        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:67</span><br></pre></td></tr></table></figure><p>根据具体的匹配条件与动作去删除规则，比如<code>-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -t filter -D INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</span><br><span class="line">[root@chobon ~]# iptables --line -nvL INPUT</span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:67</span><br><span class="line">2        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:67</span><br><span class="line">3    1178 85725 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure><hr><h3 id="修改iptables规则"><a href="#修改iptables规则" class="headerlink" title="修改iptables规则"></a><strong>修改iptables规则</strong></h3><h4 id="修改规则-R-–replace"><a href="#修改规则-R-–replace" class="headerlink" title="修改规则(-R,–replace)"></a><strong>修改规则(-R,–replace)</strong></h4><ol><li><strong>语法</strong><ul><li><code>iptables -R chain rule-num firewall-rule</code><ul><li><code>chain</code> - 指定要修改规则的链</li><li><code>rule-num</code> - 规则的序号</li><li><code>firewall-rule</code> - 具体的规则参数</li></ul></li></ul></li></ol><p>先查看一下filter表中INPUT链中的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables --line -nvL INPUT</span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1        4   231 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:53</span><br><span class="line">2        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:53</span><br><span class="line">3        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:67</span><br></pre></td></tr></table></figure><p>如果要将第1条规则的动作修改为REJECT，-s和-d缺省的话会默认<code>0.0.0.0/0</code>，其他参数不指定的话也会改成默认值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -R INPUT 1 -i virbr0 -p udp -m udp --dport 53 -j REJECT</span><br><span class="line">[root@chobon ~]# iptables --line -nvL INPUT</span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1        4   231 REJECT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:53</span><br><span class="line">2        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:53</span><br><span class="line">3        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:67</span><br></pre></td></tr></table></figure><h4 id="修改规则链-P-–policy"><a href="#修改规则链-P-–policy" class="headerlink" title="修改规则链(-P,–policy)"></a><strong>修改规则链(-P,–policy)</strong></h4><ul><li><strong>语法</strong><ul><li><code>iptables -P chain target</code><ul><li><code>chain</code> - 指定要修改规则的链</li><li><code>target</code> - 指定默认处理动作,DROP和ACCEPT</li></ul></li></ul></li></ul><p>每张表的每条链中，都有自己的默认策略，我们也可以理解为默认”动作”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -P INPUT DROP</span><br><span class="line">[root@chobon ~]# iptables --line -nvL INPUT</span><br><span class="line">Chain INPUT (policy DROP 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1        4   231 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:53</span><br><span class="line">2        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:53</span><br><span class="line">3        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:67</span><br></pre></td></tr></table></figure><hr><h3 id="规则基本参数"><a href="#规则基本参数" class="headerlink" title="规则基本参数"></a><strong>规则基本参数</strong></h3><ul><li><code>-p</code> | <strong>协议（protocol）</strong>  <ul><li>指定规则的协议，如tcp, udp, icmp等，可以使用all来指定所有协议。  </li><li>如果不指定-p参数，则默认是all值。这并不明智，请总是明确指定协议名称。  </li><li>可以使用协议名(如tcp)，或者是协议值（比如6代表tcp）来指定协议。映射关系请查看&#x2F;etc&#x2F;protocols  </li><li>还可以使用–protocol参数代替-p参数</li></ul></li><li><code>-s</code> | <strong>源地址</strong><ul><li>指定数据包的源地址</li><li>参数可以使IP地址、网络地址、主机名</li><li>例如：-s 192.168.1.101指定IP地址</li><li>例如：-s 192.168.1.10&#x2F;24指定网络地址</li><li>如果不指定-s参数，就代表所有地址</li><li>还可以使用–src或者–source</li></ul></li><li><code>-d</code> | <strong>目的地址（destination）</strong><ul><li>指定目的地址</li><li>参数和-s相同</li><li>还可以使用–dst或者–destination</li></ul></li><li><code>-j</code> | <strong>执行目标（jump to target）</strong><ul><li>-j代表 “jump to target”</li><li>-j指定了当与规则(Rule)匹配时如何处理数据包</li><li>可能的值是 ACCEPT, DROP, QUEUE, RETURN, MASQUERADE</li><li>还可以指定其他链（Chain）作为目标</li><li><em><strong>注：MASQUERADE，地址伪装，算是snat中的一种特例，可以实现自动化的snat</strong></em></li></ul></li><li><code>-i</code> | <strong>输入接口（input interface）</strong><ul><li>-i代表输入接口(input interface)</li><li>-i指定了要处理来自哪个接口的数据包</li><li>这些数据包即将进入INPUT, FORWARD, PREROUTE链</li><li>例如：-i eth0指定了要处理经由eth0进入的数据包</li><li>如果不指定-i参数，那么将处理进入所有接口的数据包</li><li>如果出现! -i eth0，那么将处理所有经由eth0以外的接口进入的数据包</li><li>如果出现-i eth+，那么将处理所有经由eth开头的接口进入的数据包</li><li>还可以使用–in-interface参数</li></ul></li><li><code>-o</code> | <strong>输出（out interface）</strong><ul><li>-o代表 “output interface”</li><li>-o指定了数据包由哪个接口输出</li><li>这些数据包即将进入FORWARD, OUTPUT, POSTROUTING链</li><li>如果不指定-o选项，那么系统上的所有接口都可以作为输出接口</li><li>如果出现! -o eth0，那么将从eth0以外的接口输出</li><li>如果出现-i eth+，那么将仅从eth开头的接口输出</li><li>还可以使用–out-interface参数</li></ul></li><li><code>-m</code> | <strong>匹配模块（match）</strong><ul><li>-m表示指定的模块</li><li>与前面-p选项对应的协议名称相同的模块可以忽略</li></ul></li></ul><hr><h3 id="描述规则的扩展参数"><a href="#描述规则的扩展参数" class="headerlink" title="描述规则的扩展参数"></a><strong>描述规则的扩展参数</strong></h3><p>对规则有了一个基本描述之后，有时候我们还希望指定端口、TCP标志、ICMP类型等内容。</p><ul><li><code>–sport</code> | <strong>源端口（source port）</strong><ul><li>针对 -p tcp 或者 -p udp</li><li>缺省情况下，将匹配所有端口</li><li>可以指定端口号或者端口名称，例如 “–sport 22” 与 “–sport ssh” 。</li><li>&#x2F;etc&#x2F;services文件描述了上述映射关系。</li><li>从性能上讲，使用端口号更好</li><li>使用冒号可以匹配端口范围，如 “–sport 22:100”</li><li>还可以使用 “–source-port”</li></ul></li><li><code>–-dport</code> | <strong>目的端口（destination port）</strong><ul><li>针对-p tcp 或者 -p udp</li><li>参数和–sport类似</li><li>还可以使用 “–destination-port”</li></ul></li><li><code>-–tcp-flags</code> | <strong>TCP标志</strong><ul><li>针对-p tcp</li><li>可以指定由逗号分隔的多个参数</li><li>有效值可以是：SYN, ACK, FIN, RST, URG, PSH</li><li>可以使用ALL或者NONE</li></ul></li><li><code>-–icmp-type</code> | <strong>ICMP类型</strong><ul><li>针对-p icmp</li><li>–icmp-type 0 表示Echo Reply</li><li>–icmp-type 8 表示Echo</li></ul></li><li><code>--state</code> | <strong>STATE状态</strong><ul><li>针对state</li><li>链接报文状态</li><li>有五种状态：</li><li>NEW： 连接的第一包</li><li>ESTABLISHED：NEW状态包后面的包状态理解，表示连接已建立</li><li>RELATED：数据进程连接–数据连接&lt;如FTP中的数据连接&gt;</li><li>INVALID：包没有办法被识别，或者空上包没有任何状态，可以主动屏蔽INVALID的报文</li><li>UNTRACKED：未被追踪的报文 ，当报文的状态为Untracked时通常表示无法找到相关的连接</li></ul></li></ul><hr><h3 id="创建自定义链"><a href="#创建自定义链" class="headerlink" title="创建自定义链"></a><strong>创建自定义链</strong></h3><ul><li><p><strong>语法</strong></p><ul><li><code>iptables -t table -N new-chain</code><ul><li><code>new-chain</code> - 新增自定义链名</li></ul></li></ul></li><li><p>在mangle表增加一条名叫NEW_CHAIN的自定义链：<br><code>iptables -t mangle -N NEW_CHAIN</code></p></li></ul><h3 id="引用链"><a href="#引用链" class="headerlink" title="引用链"></a><strong>引用链</strong></h3><ul><li><p><strong>语法</strong></p><ul><li><code>iptables -t table firewall-rule new-chain</code><ul><li><code>firewall-rule</code> – 具体的规则参数</li><li><code>new-chain</code> - 需要引用的链</li></ul></li></ul></li><li><p>在filter表增加一条规则target引用叫NEW_CHAIN的自定义链：<br><code>iptables -t filter -I INPUT -p tcp --dport 80 -j NEW_CHAIN</code></p></li></ul><h3 id="重命名链"><a href="#重命名链" class="headerlink" title="重命名链"></a><strong>重命名链</strong></h3><ul><li><p><strong>语法</strong></p><ul><li><code>iptables -t table -E old-chain new-chain</code><ul><li><code>old-chain</code> – 需要被重命名的链</li><li><code>new-chain</code> - 重命名后的链</li></ul></li></ul></li><li><p>在filter表重命名一条名叫NEW_CHAIN的自定义链为NEW_PREROUTING_CHAIN：<br><code>iptables -t filter -E NEW_CHAIN NEW_PREROUTING_CHAIN</code></p></li></ul><h3 id="删除链"><a href="#删除链" class="headerlink" title="删除链"></a><strong>删除链</strong></h3><ul><li><p><strong>语法</strong></p><ul><li><code>iptables -t table -X chain</code><ul><li><code>chain</code> – 需要被删除的链</li></ul></li></ul></li><li><p>在filter表删除一条名叫NEW_CHAIN的自定义链：<br><code>iptables -t filter -X NEW_CHAIN</code></p></li></ul><h3 id="永久生效"><a href="#永久生效" class="headerlink" title="永久生效"></a><strong>永久生效</strong></h3><p>当你删除、添加规则后，这些更改并不能永久生效，这些规则很有可能在系统重启后恢复原样。为了让配置永久生效，根据平台的不同，具体操作也不同。下面进行简单介绍：</p><ol><li><p><strong>Ubuntu</strong><br>首先，保存现有的规则：<br><code>iptables-save &gt; /etc/iptables.rules</code><br>然后新建一个<code>bash</code>脚本，并保存到 <code>/etc/network/if-pre-up.d/</code>目录下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">iptables-restore &lt; /etc/iptables.rules</span><br></pre></td></tr></table></figure><p> 这样，每次系统重启后iptables规则都会被自动加载。<br> ！注意：不要尝试在.bashrc或者.profile中执行以上命令，因为用户通常不是root，而且这只能在登录时加载iptables规则。</p></li><li><p><strong>CentOS, RedHat</strong></p><blockquote><p>保存iptables规则  </p></blockquote><p> <code>service iptables save</code></p><blockquote><p>重启iptables服务</p></blockquote><p> <code>service iptables stop</code><br> <code>service iptables start</code></p><blockquote><p>查看当前规则：</p></blockquote><p> <code>cat  /etc/sysconfig/iptables</code></p></li></ol><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>刚开始觉得挺复杂，深入后发现没那么难，一切都是按照规则来，有迹可循，只要掌握关键要领就可以按图索骥。</p><p>回顾到开头那三条规则，其实是正确的，只是KVM初始得虚拟网卡virbr0有条默认规则做了限制</p><p>iptables查看filter表FORWARD链，有条规则里面没有包含NEW，由于ssh请求第一个包是NEW，所以如果不加上，就连不上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -nvL FORWARD</span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    1    40 ACCEPT     all  --  virbr0 *       192.168.122.0/24     0.0.0.0/0</span><br><span class="line">    2    80 ACCEPT     all  --  *      virbr0  0.0.0.0/0            192.168.122.0/24     ctstate RELATED,ESTABLISHED</span><br><span class="line">   20  1040 REJECT     all  --  *      virbr0  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br><span class="line">    0     0 REJECT     all  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>注意：这里后面两条规则<code>REJECT</code>顺序，如果在前面就得删除或者把<code>ACCEPT</code>移到前面</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -R FORWARD 2 -o virbr0 -d 192.168.122.0/24 -m conntrack --ctstate NEW,RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">[root@chobon ~]# service iptables save</span><br><span class="line">iptables: Saving firewall rules to /etc/sysconfig/iptables:[  确定  ]</span><br><span class="line">[root@chobon ~]# service iptables restart</span><br><span class="line">Redirecting to /bin/systemctl restart iptables.service</span><br><span class="line">[root@chobon ~]#  </span><br></pre></td></tr></table></figure><p><em><strong>注意：-m state –state和-m conntrack –ctstate差不多，有些地方说一样的，有些地方说state是被conntrack代替了</strong></em></p><p>现在就可以通过<code>ssh -p 10122 root@192.168.124.21</code>命令来连接虚拟机了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker垃圾镜像和容器批量删除</title>
      <link href="/posts/20df12ca/"/>
      <url>/posts/20df12ca/</url>
      
        <content type="html"><![CDATA[<p>使用一段时间Docker后会产生很多临时镜像（悬虚镜像），数量还少勉强手动逐条删除，一段时间不清理数量多起来删除很费时，所以想批量删除。可以利用linux三剑客命令awk</p><ul><li>awk<br>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</li></ul><p>使用方法   ： awk ‘{pattern + action}’ {filenames}<br>编程时用法 ： command1 | awk {print $1}</p><p>输出结果第一列数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>再配合grep查找关键字，可以用正则表达式,xargs结果作为参数给<code>docker rmi</code>，删除指定标签的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep mysql | xargs -t docker rmi</span><br></pre></td></tr></table></figure><ul><li>删除临时镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a | e grep -v <span class="string">&#x27;mysql|post|kiban|elas|mongo&#x27;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -t docker <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><p>有些时候会有些<code>&lt;none&gt;</code>的镜像，如下List-3，可能是临时产生的，删除这种镜像，直接用上面的是不行的<br>这种，注意awk中要用\t隔开，后面的awk才能得到我们想要的$2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images | awk <span class="string">&#x27;&#123;print $1&quot;\t&quot;$2&quot;\t&quot;$3&#125;&#x27;</span> | grep <span class="string">&quot;&lt;none&gt;&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -t docker rmi</span><br></pre></td></tr></table></figure><p>或者下面这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images | grep <span class="string">&quot;&lt;none&quot;</span>| awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>|xargs -t docker rmi</span><br></pre></td></tr></table></figure><ul><li>删除异常停止的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a | grep -E <span class="string">&#x27;Exited|Created&#x27;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -t docker <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><ul><li>清理无用镜像<br>它支持的子命令有：<ul><li><code>-a, --all</code> : 删除所有没有用的镜像，而不仅仅是临时文件</li><li><code>-f, --force</code> : 强制删除镜像文件，无需弹出提示确认</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><ul><li>清理无用卷</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><ul><li>清理所有无用volume、image、container、network<br><em><strong>注意：慎用，删除所有不在使用的资源</strong></em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Docker</title>
      <link href="/posts/d4c19f1a/"/>
      <url>/posts/d4c19f1a/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。  </p><p>通过 uname -r 命令查看你当前的内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure><p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><span id="more"></span><p>3、卸载旧版本(如果安装过旧版本的话)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y docker \</span><br><span class="line">              docker-client \</span><br><span class="line">              docker-client-latest \</span><br><span class="line">              docker-common \</span><br><span class="line">              docker-latest \</span><br><span class="line">              docker-latest-logrotate \</span><br><span class="line">              docker-logrotate \</span><br><span class="line">              docker-engine</span><br></pre></td></tr></table></figure><p>4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>5、设置yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>6、安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>7、启动并加入开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>8、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS学习KVM笔记-磁盘篇</title>
      <link href="/posts/7548ebee/"/>
      <url>/posts/7548ebee/</url>
      
        <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h2><p><strong>KVM 虚拟化中使用的镜像格式通常为 RAW 和 QCOW2 两种格式.</strong></p><ul><li><strong>QCOW2</strong></li></ul><p>qcow2 镜像格式是 QEMU 模拟器支持的一种磁盘镜像。它也是可以用一个文件的形式来表示一块固定大小的块设备磁盘。与普通的 raw 格式的镜像相比，有以下特性：占用空间小，即使文件系统不支持空洞(holes)；支持写时拷贝（COW, copy-on-write），镜像文件只反映底层磁盘的变化；支持快照（snapshot）；镜像文件能够包含多个快照的历史；支持 zlib 的压缩；支持 AES 加密<br>qcow2 第二代的QEMU写时复制格式，QEMU推荐的镜像格式，支持稀疏文件，支持AES加密，支持基于zlib的压缩，支持snapshot，支持后备镜像  </p><ul><li><strong>RAW</strong></li></ul><p>RAW 格式镜像文件又被称为 原始镜像 或 裸设备镜像, RAW 格式镜像文件能够直接当作一个块设备类似&#x2F;dev&#x2F;sdb 设备可以直接挂载；可以使用dd指令创建一个 File 就能够模拟 RAW 镜像文件；性能较 QCOW2 要更高；能够随意转换格式；RAW不支持快照<br>raw 简单的二进制镜像文件，一次性占用分配的磁盘空间，支持稀疏文件  </p><span id="more"></span><ul><li><strong>其他格式</strong><ul><li><p><strong><code>VirtualBox</code></strong>  </p><ul><li>VirtualBox的虚拟磁盘映像（VDI）；VHD (Hyper-V)的：VHD 和VHDX； VMware的 vmdk</li></ul></li><li><p><strong><code>vmdk</code></strong>  </p><ul><li>vmdk VMware镜像格式</li></ul></li><li><p><strong><code>vdi</code></strong>  </p><ul><li>vdi VirtualBox镜像格式</li></ul></li></ul></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h2><blockquote><p>存储池管理命令  </p></blockquote><ul><li>显示存储池清单</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-list [--all]  </span><br></pre></td></tr></table></figure><p>显+ 示一个存储池的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-info pool-name  </span><br></pre></td></tr></table></figure><ul><li>输出存储池XML描述信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-dumpxml pool-name</span><br></pre></td></tr></table></figure><ul><li>由xml描述文件定义一个存储池</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-define mypool.xml</span><br></pre></td></tr></table></figure><ul><li>启用已经定义的存储池</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-strart pool-name</span><br></pre></td></tr></table></figure><ul><li>设置或取消存储池开机自动启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-autostart pool-name [--<span class="built_in">disable</span>]  </span><br></pre></td></tr></table></figure><ul><li>停用一个存储池</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-destroy pool-name</span><br></pre></td></tr></table></figure><ul><li>撤销一个存储池</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh pool-undefine  pool-name</span><br></pre></td></tr></table></figure><h3 id="qemu-img"><a href="#qemu-img" class="headerlink" title="qemu-img"></a>qemu-img</h3><ul><li>创建一个新的镜像盘文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create [-f <span class="built_in">fmt</span>] [-o options] filename [size]</span><br><span class="line"></span><br><span class="line"><span class="comment">#disk.img为文件名,qcow2为创建的格式,50G磁盘空间</span></span><br><span class="line">qemu-img create -f qcow2 disk.img 50G</span><br></pre></td></tr></table></figure><ul><li>查看镜像文件信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info [-f <span class="built_in">fmt</span>] filename</span><br><span class="line"><span class="comment">#查看disk1.img镜像信息</span></span><br><span class="line">qemu-img info disk1.img</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器关闭后无法重启</title>
      <link href="/posts/c24ab382/"/>
      <url>/posts/c24ab382/</url>
      
        <content type="html"><![CDATA[<p>hexo容器一直映射80端口。docker重启后起不来hexo，报错如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: <span class="keyword">for</span> hexo<span class="literal">-server</span>  Cannot <span class="built_in">start</span> service hexo<span class="literal">-server</span>: driver failed programming external connectivity on endpoint hexo<span class="literal">-server</span> (<span class="number">32643</span>e5b5ba8b0adb6f203032e5e36cd6b3e531ab908f0ab77bb4a877a21cef6): Error starting userland proxy: /forwards/expose/port returned unexpected status: <span class="number">500</span></span><br><span class="line">ERROR: Encountered errors <span class="keyword">while</span> bringing up the project.</span><br></pre></td></tr></table></figure><p>查看端口<br><code>netstat -ano | grep 80</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ netstat <span class="literal">-ano</span> | grep <span class="number">80</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>             <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">10820</span></span><br><span class="line">  TCP    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">1080</span>           <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>              LISTENING       <span class="number">8732</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>打开任务管理器找到PID为10820的进程，<code>com.docker.backend.exe</code></p><p>结束该进程，过一会<code>com.docker.backend.exe</code>进程会自己重新启动好</p><p>80端口也已经释放了，又可以快乐的玩耍了</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本格式dos和unix</title>
      <link href="/posts/efa5201a/"/>
      <url>/posts/efa5201a/</url>
      
        <content type="html"><![CDATA[<p>在运行docker镜像的时候，报错<code>No such file or dir</code>执行的shell脚本文件明明存在。结果意想不到竟然是shell脚本有格式的区别。  </p><p>在执行shell脚本时提示这样的错误主要是由于shell脚本文件是dos格式，即每一行结尾以\r\n来标识，而unix格式的文件行尾则以\n来标识。</p><ul><li><strong>查看shell脚本文件格式方法</strong></li></ul><ol><li>cat -A filename  从显示结果可以判断，dos格式的文件行尾为^M$，unix格式的文件行尾为$。  </li><li>od -t x1 filename 如果看到输出内容中存在0d 0a的字符，那么文件是dos格式，如果只有0a，则是unix格式。  </li><li>vi filename打开文件，执行 : set ff，如果文件为dos格式在显示为fileformat&#x3D;dos，如果是unxi则显示为fileformat&#x3D;unix。  <span id="more"></span></li></ol><ul><li><strong>解决方法</strong></li></ul><ol><li>使用linux命令dos2unix filename，直接把文件转换为unix格式</li><li>使用sed命令sed -i “s&#x2F;\r&#x2F;&#x2F;“ filename  或者 sed -i “s&#x2F;^M&#x2F;&#x2F;“ filename直接替换结尾符为unix格式</li><li>vi filename打开文件，执行 : set ff&#x3D;unix 设置文件为unix，然后执行:wq，保存成unix格式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker打包镜像设置代理</title>
      <link href="/posts/6be46522/"/>
      <url>/posts/6be46522/</url>
      
        <content type="html"><![CDATA[<h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><p>最近在做frp的docker镜像的时候需要从github上下载frp程序，curl速度死活上不去。<br>命令行我一直都有设置国外代理，显然Dockerfile文件生成的时候跟cmd不相干。<br>设置了docker的代理也不行（现在想想好傻，docker代理是拉取hub里镜像才有用，不过一般都用国内hub）  </p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>最后突然想到之前在打包镜像的时候更新程序也设置了国内源，茅舍顿开，果断在curl上加上代理，问题解决，速度直接上到2M&#x2F;s  </p><span id="more"></span><p><code>curl -x 10.0.75.1:1080 https://xxxx</code>  </p><p>差点就想直接下载程序COPY进去了</p><p>实在没有条件搭梯子的可以采用国内gitee，一般都有相应的克隆仓库</p><h2 id="拓展问题"><a href="#拓展问题" class="headerlink" title="拓展问题"></a>拓展问题</h2><p>其他类似问题也可以用解决，wget或者系统程序更新可以更换国内镜像源</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alpine </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alpine更换包下载源</title>
      <link href="/posts/e6d90a57/"/>
      <url>/posts/e6d90a57/</url>
      
        <content type="html"><![CDATA[<p>在打包基于alpine系统的docker镜像的时候，每次更新到一半因为网络问题中断掉  </p><p>在Dockerfile开头加入这行，更换apk包源为阿里云  </p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories</span></span><br></pre></td></tr></table></figure><p>速度杠杠的！！！</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS学习KVM笔记-网络篇</title>
      <link href="/posts/3504ec6a/"/>
      <url>/posts/3504ec6a/</url>
      
        <content type="html"><![CDATA[<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a><strong>网络模型</strong></h2><ul><li>四种网络模型<br>1、隔离模型：虚拟机之间组建网络，该模式无法与宿主机通信，无法与其他网络通信，相当于虚拟机只是连接到一台交换机上。<br>2、路由模型：相当于虚拟机连接到一台路由器上，由路由器(物理网卡)，统一转发，但是不会改变源地址。<br>3、NAT模型：在路由模式中，会出现虚拟机可以访问其他主机，但是其他主机的报文无法到达虚拟机，而NAT模式则将源地址转换为路由器(物理网卡)地址，这样其他主机也知道报文来自那个主机，在docker环境中经常被使用。<br>4、桥接模型：在宿主机中创建一张虚拟网卡作为宿主机的网卡，而物理网卡则作为交换机。</li></ul><h3 id="隔离模型"><a href="#隔离模型" class="headerlink" title="隔离模型"></a><strong>隔离模型</strong></h3><p><img src="https://img.chobon.top/blog/CentOS%E5%AD%A6%E4%B9%A0KVM%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E7%AF%87/%E9%9A%94%E7%A6%BB%E6%A8%A1%E5%9E%8B.png" alt="隔离模型"></p><span id="more"></span><p>如上图所示，Guest1和Guest2都是在宿主机上创建的虚拟机，虚拟机的网卡分为前半段和后半段，前半段位于虚拟机上，后半段在宿主机上，按照图中所示，前半段就是eth0，它是在虚拟机内部看到的网卡名字，而后半段就是vnet0和vnet1，它们是在宿主机上看到的网卡名字。实际上，在Guest1上所有发往eth0的数据就是直接发往vnet0，是由vnet0进行数据的传送处理。<br>在隔离模式下，宿主机创建一个虚拟交换机vSwitch，然后把vnet0和vnet1接入到该虚拟交换机，交换机也可以叫做bridge，因为vnet0和vnet1在一个网桥内，所以可以互相通信，而虚拟机的eth0是通过后半段进行数据传输，所以只要虚拟机的前半段ip在一个网段内，就可以互相通信，这就是隔离模式。</p><h3 id="路由模型"><a href="#路由模型" class="headerlink" title="路由模型"></a><strong>路由模型</strong></h3><p><img src="https://img.chobon.top/blog/CentOS%E5%AD%A6%E4%B9%A0KVM%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E7%AF%87/%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9E%8B.png" alt="路由模型"></p><p>在隔离模型的基础上，将宿主机的一块虚拟网卡virnet0加入到虚拟网桥中，这样virnet0就可以和虚拟机通信，通过将虚拟机的默认网关设置为virnet0的IP地址，然后在宿主机中打开IP地址转发，使得虚拟机可以访问宿主机。不过此时虚拟机仅仅可以将报文发送到外部网络，因为外部网络没有路由到虚拟机中，所以外部网络无法将报文回传给虚拟机。</p><h3 id="NAT模型"><a href="#NAT模型" class="headerlink" title="NAT模型"></a><strong>NAT模型</strong></h3><p><img src="https://img.chobon.top/blog/CentOS%E5%AD%A6%E4%B9%A0KVM%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E7%AF%87/NAT%E6%A8%A1%E5%9E%8B.png" alt="NAT模型"></p><p>NAT模型其实就是SNAT的实现，路由中虚拟机能将报文发送给外部主机，但是外部主机因找不到通往虚拟机的路由因而无法回应请求。但是外部主机能同宿主机通信，所以在宿主机上添加一个NAT转发，从而在外部主机请求虚拟机时，将虚拟机的IP地址转换为宿主机上的某个地址，从而实现外部网络与虚拟机的通信，其实际上只是通过iptables的nat表的POSTROUTING链实现地址转换罢了。</p><h3 id="桥接模型"><a href="#桥接模型" class="headerlink" title="桥接模型"></a><strong>桥接模型</strong></h3><p><img src="https://img.chobon.top/blog/CentOS%E5%AD%A6%E4%B9%A0KVM%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E7%AF%87/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%9E%8B.png" alt="桥接模型"></p><p>在宿主机中创建一个桥设备，把宿主机的eth0放在桥上，这样Guest1上的eth0将报文发给vnet0，再直接发给宿主机上的eth0，将源地址改为宿主机上的eth0的地址。<br>当响应报文到达物理机上的eth0时如何判断此响应报文是发给虚拟机的还是物理机自己的？<br>物理机会先创建一个虚拟网卡，在物理机上打开混杂模式(无论mac地址是不是自己的都将接收响应报文)，如果mac地址是自己的则转发给虚拟网卡，如果不是自己的则转发给vnet0，这就是桥接模型，因为物理机的网卡具有桥的功能所以叫做桥接模型。  </p><h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a><strong>网络应用</strong></h2><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a><strong>桥接模式</strong></h3><p>在宿主机上创建一个虚拟网卡br0，并将物理网卡enp8s0</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment">## cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># cp ifcfg-etp8s0 ifcfg-br0</span></span><br></pre></td></tr></table></figure><p>修改br0</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># vim ifcfg-br0</span></span><br><span class="line">DEVICE=br0</span><br><span class="line"><span class="built_in">TYPE</span>=Bridge</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">124.101</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">124.1</span></span><br></pre></td></tr></table></figure><p>修改enp8s0</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># vim ifcfg-etp8s0</span></span><br><span class="line">DEVICE=etp8s0</span><br><span class="line"><span class="built_in">TYPE</span>=Ethernet</span><br><span class="line">UUID=<span class="number">62</span>a2f66a<span class="literal">-754e-4c46-810c-fd23abff3d5a</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BRIDGE=br0</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=dhcp</span><br></pre></td></tr></table></figure><p>重启网络服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># service network restart</span></span><br></pre></td></tr></table></figure><p>如果接网线，插网孔的，这样一般的桥接网络就弄好了。但是如果是宿主机采用wireless上网的这个就行不通。</p><p>我一开始奔着桥接模型去整，发现一直网络不通，后来查阅<a href="http://www.linux-kvm.org/page/Networking">KVM文档</a>，才知道wireless网卡大部分不支持桥接。</p><h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a><strong>NAT模式</strong></h3><p>NAT模式就比较简单了，因为libvirt安装好的时候就创建好了virbr0这个网卡，就是拿来用NAT用的。</p><ul><li>查看虚拟网卡</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># brctl show</span></span><br><span class="line">bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">virbr0          <span class="number">8000.525400231</span>cef       yes             virbr0<span class="literal">-nic</span></span><br></pre></td></tr></table></figure><p>如果没有default的话，或者需要扩展自己的虚拟网络，可以使用命令重新安装NAT。</p><p><code>virsh net-define /usr/share/libvirt/networks/default.xml</code><br>此命令定义一个虚拟网络，default.xml的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">name</span>=<span class="string">&quot;virbr0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">forward</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ip</span> <span class="attr">address</span>=<span class="string">&quot;192.168.122.1&quot;</span> <span class="attr">netmask</span>=<span class="string">&quot;255.255.255.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dhcp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">range</span> <span class="attr">start</span>=<span class="string">&quot;192.168.122.2&quot;</span> <span class="attr">end</span>=<span class="string">&quot;192.168.122.254&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dhcp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以修改xml，创建自己的虚拟网络。</p><blockquote><p>如果安装的时候没有指定网络，可以在安装后编辑虚拟机xml配置</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment">#vi /etc/libvirt/qemu/linux-xx.xml</span></span><br><span class="line">...</span><br><span class="line"> &lt;interface <span class="built_in">type</span>=<span class="string">&#x27;network&#x27;</span>&gt;</span><br><span class="line">      &lt;mac address=<span class="string">&#x27;52:54:00:39:c5:c0&#x27;</span>/&gt;</span><br><span class="line">      &lt;source network=<span class="string">&#x27;default&#x27;</span>/&gt;</span><br><span class="line">      &lt;model <span class="built_in">type</span>=<span class="string">&#x27;virtio&#x27;</span>/&gt;</span><br><span class="line">      &lt;address <span class="built_in">type</span>=<span class="string">&#x27;pci&#x27;</span> domain=<span class="string">&#x27;0x0000&#x27;</span> bus=<span class="string">&#x27;0x00&#x27;</span> slot=<span class="string">&#x27;0x03&#x27;</span> function=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span><br><span class="line">    &lt;/interface&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>新安装的虚拟机在命令里设置网络参数<code>--network network=default</code></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">virt<span class="literal">-install</span> \</span><br><span class="line"><span class="literal">--virt-type</span>=kvm \</span><br><span class="line"><span class="literal">--name</span>=vm1_centos7 \</span><br><span class="line"><span class="literal">--vcpus</span>=<span class="number">2</span> \</span><br><span class="line"><span class="literal">--memory</span>=<span class="number">2048</span> \</span><br><span class="line"><span class="literal">--location</span>=/kvm/iso/CentOS<span class="literal">-7-x86_64-Minimal-1908</span>.iso \</span><br><span class="line"><span class="literal">--disk</span> path=/kvm/vfs/vm1.qcow2,size=<span class="number">40</span>,format=qcow2 \</span><br><span class="line"><span class="literal">--network</span> network=default \</span><br><span class="line"><span class="literal">--graphics</span> none \</span><br><span class="line"><span class="literal">--extra-args</span>=<span class="string">&#x27;console=ttyS0&#x27;</span> \</span><br><span class="line"><span class="literal">--force</span></span><br></pre></td></tr></table></figure><blockquote><p>查看虚拟机mac地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# virsh dumpxml vm1_centos7 | grep <span class="string">&#x27;mac address&#x27;</span></span><br><span class="line">      &lt;mac address=<span class="string">&#x27;52:54:00:39:c5:c0&#x27;</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>拷贝mac给新虚拟机配置ip，修改网卡dhcp，在dhcp里增加一条ip绑定mac地址，方便以后管理虚拟机</p></blockquote><ul><li><code>virsh net-edit default</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uuid</span>&gt;</span>3d041b43-48e1-4583-8ed9-f588761b6b3d<span class="tag">&lt;/<span class="name">uuid</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">forward</span> <span class="attr">mode</span>=<span class="string">&#x27;nat&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">name</span>=<span class="string">&#x27;virbr0&#x27;</span> <span class="attr">stp</span>=<span class="string">&#x27;on&#x27;</span> <span class="attr">delay</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mac</span> <span class="attr">address</span>=<span class="string">&#x27;52:54:00:23:1c:ef&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ip</span> <span class="attr">address</span>=<span class="string">&#x27;192.168.122.1&#x27;</span> <span class="attr">netmask</span>=<span class="string">&#x27;255.255.255.0&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dhcp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">range</span> <span class="attr">start</span>=<span class="string">&#x27;192.168.122.2&#x27;</span> <span class="attr">end</span>=<span class="string">&#x27;192.168.122.100&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span> <span class="attr">mac</span>=<span class="string">&#x27;52:54:00:39:c5:c0&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;vm1&#x27;</span> <span class="attr">ip</span>=<span class="string">&#x27;192.168.122.101&#x27;</span>/&gt;</span><span class="comment">&lt;!--新增一条--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dhcp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后重新加载和激活配置：</p><ul><li><code>virsh net-destroy default</code>  </li><li><code>virsh net-start default</code></li></ul><blockquote><p>或者用<code>virsh net-update default</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virsh net-update default add ip-dhcp-host \</span><br><span class="line">          <span class="string">&quot;&lt;host mac=&#x27;52:54:00:39:c5:c0&#x27; \</span></span><br><span class="line"><span class="string">           name=&#x27;vm1&#x27; ip=&#x27;192.168.122.101&#x27; /&gt;&quot;</span> \</span><br><span class="line">           --live --config</span><br></pre></td></tr></table></figure><p>然后进入虚拟机里修改网卡eth0配置文件<code>ifcfg-eth0</code>设置成开机启动<code>ONBOOT=yes</code></p><p>重启虚拟机网络服务就搞定了，不过这样还只能是虚拟机可以访问外部网络。</p><ul><li>通过端口转发，让外部网络可以访问虚拟机</li></ul><p>宿主机Ip为<code>192.168.124.21</code>，虚拟机的Ip为<code>192.168.122.101</code>，通过宿主机<code>10122</code>端口访问虚拟机<code>22</code>端口</p><blockquote><p>单个端口映射</p></blockquote><p>在<code>iptables</code>里添加下面命令，达到开机重启配置网络转发规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -A INPUT -p tcp --dport 10122 -j ACCEPT</span><br><span class="line">[root@chobon ~]# iptables -t nat -A PREROUTING -d 192.168.124.21 -p tcp -m tcp --dport 10122 -j DNAT --to-destination 192.168.122.101:22</span><br><span class="line">[root@chobon ~]# iptables -t nat -A POSTROUTING -s 192.168.122.0/255.255.255.0 -d 192.168.122.101 -p tcp -m tcp --dport 22 -j SNAT --to-source 192.168.122.1</span><br><span class="line"></span><br><span class="line">[root@chobon ~]# service iptables save <span class="comment">#保存</span></span><br><span class="line">[root@chobon ~]# service iptables restart <span class="comment">#重启iptables</span></span><br></pre></td></tr></table></figure><p>加了这三条发现虚拟机的端口还是没有映射出去，结果有了新的学习笔记<a href="../4d47a63e/">Iptables学习笔记</a></p><p>端口没有映射成功的原因是KVM初始化的virbr0网卡在filter表里<code>FORWARD</code>链里创建的一条规则导致，默认virbr0网卡生成的转发规则不带<code>NEW</code>，而<code>ssh</code>发起的第一个包就是<code>NEW</code>，所以死活连不上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -nvL FORWARD</span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    1    40 ACCEPT     all  --  virbr0 *       192.168.122.0/24     0.0.0.0/0</span><br><span class="line">    2    80 ACCEPT     all  --  *      virbr0  0.0.0.0/0            192.168.122.0/24     ctstate RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure><p>第二条规则<code>RELATED,ESTABLISHED</code>少了一个<code>NEW</code>参数，修改保存即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -R FORWARD 2 -o virbr0 -d 192.168.122.0/24 -m conntrack --ctstate NEW,RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><blockquote><p>范围端口映射</p></blockquote><p><a href="https://blog.csdn.net/u013401853/article/details/70848433"><strong>范围端口映射规则</strong></a></p><p>映射宿主机10001-19999到hostid为101的虚拟机1-9999端口，记得也要加上filter表转发规则里的NEW，不然ssh是没办法连接的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chobon ~]# iptables -t nat -A PREROUTING -d 192.168.124.21 -p tcp -m tcp --dport 10001:19999 -j DNAT --to-destination 192.168.122.101:10001-19999</span><br><span class="line">[root@chobon ~]# iptables -t nat -A POSTROUTING -s 192.168.122.0/255.255.255.0 -d 192.168.122.101 -p tcp -m tcp --dport 10001:19999 -j SNAT --to-source 192.168.122.1</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a><strong>遇到的问题</strong></h2><ul><li><p>网卡br0启动失败<br>最开始的时候想在wireless上桥接网卡，br0死活启动不来，查看日志发现是NetworkManager管理网络导致br0起不来<br>NetworkManager和配置的桥接网卡冲突导致问题</p></li><li><p>hdclient错误<br><code>dhclient(3108) is already running – exiting</code><br><code>hdclient -r &amp;&amp; hdclient</code>或者kill掉hdclient进程重新启动</p></li></ul><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a><strong>常用指令</strong></h2><ul><li>显示节点上的虚拟网络</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-list  --all</span><br></pre></td></tr></table></figure><ul><li>显示一个虚拟网络的相关信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-info net-name</span><br></pre></td></tr></table></figure><ul><li>显示一个虚拟网络的XML描述</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-dumpxml net-name</span><br></pre></td></tr></table></figure><ul><li>从一个XML描述文件定义一个虚拟网络</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-define network.xml  </span><br></pre></td></tr></table></figure><ul><li>启动一个已经定义的虚拟网络：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-start net-name</span><br></pre></td></tr></table></figure><ul><li>将一个虚拟网络设置为自动启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-autostart net-name  </span><br></pre></td></tr></table></figure><ul><li>停用一个虚拟网络</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-destroy net-name</span><br></pre></td></tr></table></figure><ul><li>撤销一个虚拟网络</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-undefine net-name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka入门</title>
      <link href="/posts/2af6c357/"/>
      <url>/posts/2af6c357/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>学习事件总线（EventBus）涉及到MQ的实现，于是想做个基于Kafka的实现，顺便整理基础概念。</p><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a><strong>EventBus</strong></h3><p>EventBus 是一种事件发布订阅模式，通过 EventBus 我们可以很方便的实现解耦，将事件的发起和事件的处理的很好的分隔开来，很好的实现解耦。</p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a><strong>Kafka</strong></h3><p>Kafka是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。它拥有以下三大核心功能：</p><ul><li><p>发布和订阅数据流，类似于传统消息队列（RabbitMQ，RocketMQ）的功能</p></li><li><p>以容错的方式存储数据流的功能</p></li><li><p>实时处理数据流的功能</p><span id="more"></span><blockquote><p>为了支持以上的三大核心功能，Kafka有四个核心的API:</p></blockquote></li><li><p><strong>The Producer API</strong> 允许一个应用程序发布一串流式的数据到一个或者多个Kafka topic。</p></li><li><p><strong>The Consumer API</strong> 允许一个应用程序订阅一个或多个 topic ，并且对发布给他们的流式数据进行处理。</p></li><li><p><strong>The Streams API</strong> 允许一个应用程序作为一个流处理器，消费一个或者多个topic产生的输入流，然后生产一个输出流到一个或多个topic中去，在输入输出流中进行有效的转换。</p></li><li><p><strong>The Connector API</strong> 允许构建并运行可重用的生产者或者消费者，将Kafka topics连接到已存在的应用程序或者数据系统。比如，连接到一个关系型数据库，捕捉表（table）的所有变更内容。</p></li></ul><h3 id="Kafka数据流"><a href="#Kafka数据流" class="headerlink" title="Kafka数据流"></a><strong>Kafka数据流</strong></h3><p><img src="https://img.chobon.top/blog/Kafka%E5%85%A5%E9%97%A8/kafka.png" alt="Kafka"></p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h2><ul><li><strong>Broker</strong><br>一个Kafka节点就是一个Broker，多个broker可以组成一个Kafka集群，一个Broker可以容纳多个Topic</li><li><strong>Topic</strong><br>属于特定类别的消息流称为Topic， 数据存储在Topic中，可以理解为一个队列，但是只能是一类消息</li><li><strong>Partition</strong><br>Topic物理上的分区，一个Topic可以分为多个Partition，每个Partition是一个有序的队列。每个Partition都对应唯一的消费者！！！</li><li><strong>Offset</strong><br>每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到Partition中。Partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息.同一个Partition的Offset是被顺序消费的</li><li><strong>Producer</strong><br>消息生产者，向Kafka中发消息的客户端。Producer将消息发布到指定的Topic，也可以指定Partition。</li><li><strong>Consumer</strong><br>消息消费者，从Kafka中取消息的客户端。Kafka中的Consumer采用poll模型</li></ul><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a><strong>Topic</strong></h3><p>Topic 就是数据主题，是数据记录发布的地方,可以用来区分业务系统。Kafka中的Topics总是多订阅者模式，一个Topic可以拥有一个或者多个消费者来订阅它的数据。</p><p>消息在物理上是以文件的方式存储的，它们按照不同的Topic进行分文件存储。每一个Topic同时又被划分为多个Partition，每个Partition对应着一个文件（逻辑上的说法，物理上由多个segment file组成），它存储着所有发往这个Partition的消息。<br>对于每一个Topic， Kafka集群都会维持一个分区日志，如下所示：</p><p><img src="https://img.chobon.top/blog/Kafka%E5%85%A5%E9%97%A8/log_anatomy.png" alt="log_anatomy"></p><p>每个分区都是有序且顺序不可变的记录集，并且不断地追加到结构化的commit log文件。分区中的每一个记录都会分配一个id号来表示顺序，我们称之为offset，offset用来唯一的标识分区中每一条记录。Kafka并没有额外的索引机制来存储offset，因此这意味着Kafka几乎不允许对数据进行随机读写。</p><p><strong>Kafka将topic划分为多个partition进行存储拥有两个好处：</strong></p><ul><li><strong>消息存储扩容。</strong> 一个文件的存储大小是有限的，但在集群中的多个文件的存储就可以大大增加一个topic能够保存的消息数量。</li><li><strong>并行读写。</strong> 通过多个partition文件存储消息，意味着producer和consumer可以并行的读写一个topic。</li></ul><p>Consumer消费消息时，通过指定的offset来定位下一条要读取的消息。值得注意的是，offset的维护是由Consumer全权控制的。Kafka集群只负责根据Consumer传入的offset来返回对应的消息。如下图所示：</p><p><img src="https://img.chobon.top/blog/Kafka%E5%85%A5%E9%97%A8/log_consumer.png" alt="log_consumer"></p><p>Kafka不会立刻删除已经被消费的消息，它会根据broker中的配置来决定多久清理一次。当broker中配置的时间到达时，不论消息是否被消费，Kafka都会清理磁盘空间。</p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a><strong>Producer</strong></h3><p>生产者可以将数据发布到所选择的topic（主题）中。生产者负责将记录分配到topic的哪一个 partition（分区）中。可以使用循环的方式来简单地实现负载均衡，也可以根据某些语义分区函数(例如：记录中的key)来完成。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a><strong>Consumer</strong></h3><p>消费者使用一个<code>消费组</code>名称来进行标识，发布到topic中的每条记录被分配给订阅消费组中的一个消费者实例.消费者实例可以分布在多个进程中或者多个机器上。</p><p>如果所有的消费者实例在同一消费组中，消息记录会负载平衡到每一个消费者实例.</p><p>如果所有的消费者实例在不同的消费组中，每条消息记录会广播到所有的消费者进程.</p><p>传统的消息队列提供两种消息消费模式：</p><ul><li><strong>队列模式：一条消息只能被多个消费者中的一个消费。</strong></li><li><strong>发布订阅模式：一条消息能够被多个消费者同时消费。</strong></li></ul><p>Kafka为了支持这两种消费模型，提出了消费者组（consumer group）的概念。如下图所示：</p><p><img src="https://img.chobon.top/blog/Kafka%E5%85%A5%E9%97%A8/consumer-groups.png" alt="consumer-groups"></p><p>如图，这个 Kafka 集群有两台 server 的，四个分区(p0-p3)和两个消费者组。消费组A有两个消费者，消费组B有四个消费者。</p><p>通常情况下，每个 topic 都会有一些消费组，一个消费组对应一个”逻辑订阅者”。一个消费组由许多消费者实例组成，便于扩展和容错。这就是发布和订阅的概念，只不过订阅者是一组消费者而不是单个的进程。</p><p>在Kafka中实现消费的方式是将日志中的分区划分到每一个消费者实例上，以便在任何时间，每个实例都是分区唯一的消费者。维护消费组中的消费关系由Kafka协议动态处理。如果新的实例加入组，他们将从组中其他成员处接管一些 partition 分区;如果一个实例消失，拥有的分区将被分发到剩余的实例。</p><p>Kafka 只保证分区内的记录是有序的，而不保证主题中不同分区的顺序。每个 partition 分区按照key值排序足以满足大多数应用程序的需求。但如果你需要总记录在所有记录的上面，可使用仅有一个分区的主题来实现，这意味着每个消费者组只有一个消费者进程。</p><h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><ul><li>zookeeper启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</span><br></pre></td></tr></table></figure><ul><li>kafka启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /e/docker/kafka:/kafka --name kafka -p 9092:9092 --<span class="built_in">link</span> zookeeper -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 -e KAFKA_ADVERTISED_HOST_NAME=192.168.66.23 -e KAFKA_ADVERTISED_PORT=9092 wurstmeister/kafka:latest</span><br></pre></td></tr></table></figure><ul><li>kafka-manager启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --<span class="built_in">link</span> zookeeper -e ZK_HOSTS=<span class="string">&quot;zookeeper:2181&quot;</span> -e APPLICATION_SECRET=letmein sheepkiller/kafka-manager</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 中间件 </category>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS磁盘管理</title>
      <link href="/posts/c3ac33de/"/>
      <url>/posts/c3ac33de/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为刚装了台CentOS系统，打算再在系统里面装多台虚拟机，组个k8s集群玩下。机器有两块硬盘，一块250G固态，一块500G机械，系统安装在固态里，机械硬盘拿来当作虚拟机分区。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><strong>fdisk</strong></li></ul><p>列出指定的外围设备的[分区表]状况</p><blockquote><p><code>fdisk -l</code>  </p></blockquote><span id="more"></span><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># fdisk -l</span></span><br><span class="line">WARNING: fdisk GPT support is currently new, and therefore <span class="keyword">in</span> an experimental phase. Use at your own discretion.</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：<span class="number">250.1</span> GB, <span class="number">250059350016</span> 字节，<span class="number">488397168</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">4096</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">Disk identifier: AB68C453<span class="literal">-844D-4DF0-8C86-CA489772612F</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#         Start          End    Size  Type            Name</span></span><br><span class="line"> <span class="number">1</span>         <span class="number">2048</span>       <span class="number">411647</span>    <span class="number">200</span>M  EFI System      EFI System Partition</span><br><span class="line"> <span class="number">2</span>       <span class="number">411648</span>      <span class="number">2508799</span>      <span class="number">1</span>G  Microsoft basic</span><br><span class="line"> <span class="number">3</span>      <span class="number">2508800</span>    <span class="number">488396799</span>  <span class="number">231.7</span>G  Linux LVM</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：<span class="number">500.1</span> GB, <span class="number">500107862016</span> 字节，<span class="number">976773168</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">4096</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x1b07a8d2</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sda1            <span class="number">2048</span>    <span class="number">83888127</span>    <span class="number">41943040</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda2        <span class="number">83888128</span>   <span class="number">167774207</span>    <span class="number">41943040</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda3       <span class="number">167774208</span>   <span class="number">251660287</span>    <span class="number">41943040</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda4       <span class="number">251660288</span>   <span class="number">335546367</span>    <span class="number">41943040</span>   <span class="number">83</span>  Linux</span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos<span class="literal">-root</span>：<span class="number">53.7</span> GB, <span class="number">53687091200</span> 字节，<span class="number">104857600</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">4096</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos<span class="literal">-swap</span>：<span class="number">8388</span> MB, <span class="number">8388608000</span> 字节，<span class="number">16384000</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">4096</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos<span class="literal">-home</span>：<span class="number">186.7</span> GB, <span class="number">186692665344</span> 字节，<span class="number">364634112</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">4096</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>对指定磁盘操作</p><blockquote><p><code>fdisk /dev/sda</code>  </p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># fdisk /dev/sda</span></span><br><span class="line"></span><br><span class="line">The device presents a logical sector size that is smaller than</span><br><span class="line">the physical sector size. Aligning to a physical sector (or optimal</span><br><span class="line">I/O) size boundary is recommended, or performance may be impacted.</span><br><span class="line">欢迎使用 fdisk (util<span class="literal">-linux</span> <span class="number">2.23</span>.<span class="number">2</span>)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：m</span><br><span class="line">命令操作</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit bsd disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition</span><br><span class="line">   g   create a new empty GPT partition table</span><br><span class="line">   G   create an IRIX (SGI) partition table</span><br><span class="line">   l   list known partition types</span><br><span class="line">   m   print this menu</span><br><span class="line">   n   add a new partition</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   p   print the partition table</span><br><span class="line">   q   quit without saving changes</span><br><span class="line">   s   create a new empty Sun disklabel</span><br><span class="line">   t   change a partition<span class="string">&#x27;s system id</span></span><br><span class="line"><span class="string">   u   change display/entry units</span></span><br><span class="line"><span class="string">   v   verify the partition table</span></span><br><span class="line"><span class="string">   w   write table to disk and exit</span></span><br><span class="line"><span class="string">   x   extra functionality (experts only)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">命令(输入 m 获取帮助)：</span></span><br></pre></td></tr></table></figure><blockquote><p><code>m</code> 显示帮助<br><code>p</code> 显示已有分区<br><code>d</code> 删除分区，只有1个分区时，会自动删除已有分区，不用选择<br><code>n</code> 创建新的分区<br><code>w</code> 保存分区<br><code>q</code> 退出不保存  </p></blockquote><hr><ul><li><strong>df</strong></li></ul><p>查看磁盘使用情况  </p><blockquote><p><code>df -l</code>  </p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># df -h</span></span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs                 <span class="number">7.8</span>G     <span class="number">0</span>  <span class="number">7.8</span>G    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                    <span class="number">7.8</span>G     <span class="number">0</span>  <span class="number">7.8</span>G    <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs                    <span class="number">7.8</span>G  <span class="number">9.0</span>M  <span class="number">7.8</span>G    <span class="number">1</span>% /run</span><br><span class="line">tmpfs                    <span class="number">7.8</span>G     <span class="number">0</span>  <span class="number">7.8</span>G    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos<span class="literal">-root</span>   <span class="number">50</span>G  <span class="number">2.4</span>G   <span class="number">48</span>G    <span class="number">5</span>% /</span><br><span class="line">/dev/sdb2               <span class="number">1014</span>M  <span class="number">145</span>M  <span class="number">870</span>M   <span class="number">15</span>% /boot</span><br><span class="line">/dev/sdb1                <span class="number">200</span>M   <span class="number">12</span>M  <span class="number">189</span>M    <span class="number">6</span>% /boot/efi</span><br><span class="line">/dev/mapper/centos<span class="literal">-home</span>  <span class="number">174</span>G   <span class="number">33</span>M  <span class="number">174</span>G    <span class="number">1</span>% /home</span><br><span class="line">tmpfs                    <span class="number">1.6</span>G     <span class="number">0</span>  <span class="number">1.6</span>G    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br></pre></td></tr></table></figure><hr><ul><li><strong>lsblk</strong></li></ul><p>查看磁盘挂载情况  </p><blockquote><p><code>lsblk</code>  </p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># lsblk</span></span><br><span class="line">NAME            MAJ:MIN <span class="built_in">RM</span>   SIZE RO <span class="built_in">TYPE</span> MOUNTPOINT</span><br><span class="line">sda               <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span> <span class="number">465.8</span>G  <span class="number">0</span> disk</span><br><span class="line">├─sda1            <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">40</span>G  <span class="number">0</span> part</span><br><span class="line">├─sda2            <span class="number">8</span>:<span class="number">2</span>    <span class="number">0</span>    <span class="number">40</span>G  <span class="number">0</span> part</span><br><span class="line">├─sda3            <span class="number">8</span>:<span class="number">3</span>    <span class="number">0</span>    <span class="number">40</span>G  <span class="number">0</span> part</span><br><span class="line">└─sda4            <span class="number">8</span>:<span class="number">4</span>    <span class="number">0</span>    <span class="number">40</span>G  <span class="number">0</span> part</span><br><span class="line">sdb               <span class="number">8</span>:<span class="number">16</span>   <span class="number">0</span> <span class="number">232.9</span>G  <span class="number">0</span> disk</span><br><span class="line">├─sdb1            <span class="number">8</span>:<span class="number">17</span>   <span class="number">0</span>   <span class="number">200</span>M  <span class="number">0</span> part /boot/efi</span><br><span class="line">├─sdb2            <span class="number">8</span>:<span class="number">18</span>   <span class="number">0</span>     <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">└─sdb3            <span class="number">8</span>:<span class="number">19</span>   <span class="number">0</span> <span class="number">231.7</span>G  <span class="number">0</span> part</span><br><span class="line">  ├─centos<span class="literal">-root</span> <span class="number">253</span>:<span class="number">0</span>    <span class="number">0</span>    <span class="number">50</span>G  <span class="number">0</span> lvm  /</span><br><span class="line">  ├─centos<span class="literal">-swap</span> <span class="number">253</span>:<span class="number">1</span>    <span class="number">0</span>   <span class="number">7.8</span>G  <span class="number">0</span> lvm  [<span class="type">SWAP</span>]</span><br><span class="line">  └─centos<span class="literal">-home</span> <span class="number">253</span>:<span class="number">2</span>    <span class="number">0</span> <span class="number">173.9</span>G  <span class="number">0</span> lvm  /home</span><br><span class="line">sr0              <span class="number">11</span>:<span class="number">0</span>    <span class="number">1</span>  <span class="number">1024</span>M  <span class="number">0</span> rom</span><br></pre></td></tr></table></figure><p>查看磁盘挂载情况  </p><blockquote><p><code>lsblk -f</code>  </p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME            FSTYPE      LABEL UUID                                   MOUNTPOINT</span><br><span class="line">sda</span><br><span class="line">├─sda1          ext3              cf513d39<span class="literal">-639f-4930-b0dc-0c885ed0e8fc</span></span><br><span class="line">├─sda2          ext3              <span class="number">8</span>ef922da<span class="literal">-f046-426d-9586-1b6c5337e9db</span></span><br><span class="line">├─sda3</span><br><span class="line">└─sda4</span><br><span class="line">sdb</span><br><span class="line">├─sdb1          vfat              <span class="number">763</span>D<span class="literal">-CD48</span>                              /boot/efi</span><br><span class="line">├─sdb2          xfs               af9a191f<span class="literal">-e2da-4043-9680-7fd5116a7969</span>   /boot</span><br><span class="line">└─sdb3          LVM2_member       AUDTKH<span class="literal">-IqL2-3rEq-Z2aE-q9j2-bPbw-x0K3rz</span></span><br><span class="line">  ├─centos<span class="literal">-root</span> xfs               <span class="number">7</span>d6ef5f3<span class="literal">-f328-4113-bbb7-360b40d79206</span>   /</span><br><span class="line">  ├─centos<span class="literal">-swap</span> swap              <span class="number">01</span>ad31c2<span class="literal">-b17d-4168-aa0d-364577e7e925</span>   [<span class="type">SWAP</span>]</span><br><span class="line">  └─centos<span class="literal">-home</span> xfs               bba1142f<span class="literal">-7bff-4b72-97bb-20022a9c4d84</span>   /home</span><br><span class="line">sr0</span><br></pre></td></tr></table></figure><hr><ul><li><strong>parted</strong></li></ul><p>列出所有设备的[分区]信息  </p><blockquote><p><code>parted -l</code>  </p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># parted -l</span></span><br><span class="line">Model: ATA ST500LM021<span class="literal">-1KJ15</span> (scsi)</span><br><span class="line">Disk /dev/sda: <span class="number">500</span>GB</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">4096</span>B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  <span class="built_in">Start</span>   <span class="keyword">End</span>     Size    <span class="built_in">Type</span>     File system  标志</span><br><span class="line"> <span class="number">1</span>      <span class="number">1049</span>kB  <span class="number">43.0</span>GB  <span class="number">42.9</span>GB  primary  ext3</span><br><span class="line"> <span class="number">2</span>      <span class="number">43.0</span>GB  <span class="number">85.9</span>GB  <span class="number">42.9</span>GB  primary  ext3</span><br><span class="line"> <span class="number">3</span>      <span class="number">85.9</span>GB  <span class="number">129</span>GB   <span class="number">42.9</span>GB  primary</span><br><span class="line"> <span class="number">4</span>      <span class="number">129</span>GB   <span class="number">172</span>GB   <span class="number">42.9</span>GB  primary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model: ATA Crucial_CT250MX2 (scsi)</span><br><span class="line">Disk /dev/sdb: <span class="number">250</span>GB</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">4096</span>B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  <span class="built_in">Start</span>   <span class="keyword">End</span>     Size    File system  Name                  标志</span><br><span class="line"> <span class="number">1</span>      <span class="number">1049</span>kB  <span class="number">211</span>MB   <span class="number">210</span>MB   fat16        EFI System Partition  启动</span><br><span class="line"> <span class="number">2</span>      <span class="number">211</span>MB   <span class="number">1285</span>MB  <span class="number">1074</span>MB  xfs</span><br><span class="line"> <span class="number">3</span>      <span class="number">1285</span>MB  <span class="number">250</span>GB   <span class="number">249</span>GB                                      lvm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model: Linux device<span class="literal">-mapper</span> (linear) (dm)</span><br><span class="line">Disk /dev/mapper/centos<span class="literal">-home</span>: <span class="number">187</span>GB</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">4096</span>B</span><br><span class="line">Partition Table: loop</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  <span class="built_in">Start</span>  <span class="keyword">End</span>    Size   File system  标志</span><br><span class="line"> <span class="number">1</span>      <span class="number">0.00</span>B  <span class="number">187</span>GB  <span class="number">187</span>GB  xfs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model: Linux device<span class="literal">-mapper</span> (linear) (dm)</span><br><span class="line">Disk /dev/mapper/centos<span class="literal">-swap</span>: <span class="number">8389</span>MB</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">4096</span>B</span><br><span class="line">Partition Table: loop</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  <span class="built_in">Start</span>  <span class="keyword">End</span>     Size    File system     标志</span><br><span class="line"> <span class="number">1</span>      <span class="number">0.00</span>B  <span class="number">8389</span>MB  <span class="number">8389</span>MB  linux<span class="literal">-swap</span>(v1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model: Linux device<span class="literal">-mapper</span> (linear) (dm)</span><br><span class="line">Disk /dev/mapper/centos<span class="literal">-root</span>: <span class="number">53.7</span>GB</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span>B/<span class="number">4096</span>B</span><br><span class="line">Partition Table: loop</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  <span class="built_in">Start</span>  <span class="keyword">End</span>     Size    File system  标志</span><br><span class="line"> <span class="number">1</span>      <span class="number">0.00</span>B  <span class="number">53.7</span>GB  <span class="number">53.7</span>GB  xfs</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ul><li><strong>mkfs</strong></li></ul><p><em><strong>该命令用来在特定的分区创建linux文件系统，常见的文件系统有ext2,ext3,vfat等</strong></em>  </p><p><em><strong>mkfs的使用示例</strong></em></p><blockquote><p><code>mkfs -t</code> <em><code>文件系统</code></em>  <em><code>存储设备</code></em></p></blockquote><p>把该设备格式化成xfs文件系统  </p><blockquote><p><code>mkfs.xfs -f /dev/sda</code></p></blockquote><p>把该设备格式化成ext3文件系统  </p><blockquote><p><code>mkfs.ext3 /dev/sda</code>  </p></blockquote><p>把该设备格式化成ext3文件系统  </p><blockquote><p><code>mke2fs -j /dev/sda</code>  </p></blockquote><p>格式化成reiserfs文件系统  </p><blockquote><p><code>mkfs.reiserfs /dev/sda</code>  </p></blockquote><p>格式化成fat32文件系统  </p><blockquote><p><code>mkfs.vfat /dev/sda</code>  </p></blockquote><p>格式化成fat16文件系统,msdos就是fat16  </p><blockquote><p><code>mkfs.msdos /dev/sda</code>  </p></blockquote><p>格式化成msdos文件系统  </p><blockquote><p><code>mkdosfs /dev/sda</code>  </p></blockquote><hr><ul><li><strong>mount</strong></li></ul><p>挂载磁盘  </p><blockquote><p><code>mount /dev/sda /data</code>  </p></blockquote><p>卸载磁盘  </p><blockquote><p><code>umount /dev/sda</code>  </p></blockquote><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a><strong>创建分区</strong></h3><blockquote><p>输入<code>fdisk /dev/sda</code>回车，进入硬盘分区  </p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># fdisk /dev/sda</span></span><br><span class="line"></span><br><span class="line">The device presents a logical sector size that is smaller than</span><br><span class="line">the physical sector size. Aligning to a physical sector (or optimal</span><br><span class="line">I/O) size boundary is recommended, or performance may be impacted.</span><br><span class="line">欢迎使用 fdisk (util<span class="literal">-linux</span> <span class="number">2.23</span>.<span class="number">2</span>)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：</span><br></pre></td></tr></table></figure><blockquote><p>输入<code>n</code>回车新建分区，</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (<span class="number">3</span> primary, <span class="number">0</span> extended, <span class="number">1</span> free)</span><br><span class="line">   e   extended</span><br><span class="line"><span class="built_in">Select</span> (default e):</span><br></pre></td></tr></table></figure><blockquote><p>输入<code>p</code>回车新建主分区,默认选择4分区，因为主分区只能建4个，我已经建了3个，所以这里没得选，正常情况需要选择分区序号</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (<span class="number">3</span> primary, <span class="number">0</span> extended, <span class="number">1</span> free)</span><br><span class="line">   e   extended</span><br><span class="line"><span class="built_in">Select</span> (default e): p</span><br></pre></td></tr></table></figure><blockquote><p>此处要求选择分区序号，回车或者输入分区序号<code>3</code>或<code>4</code></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (<span class="number">3</span> primary, <span class="number">0</span> extended, <span class="number">1</span> free)</span><br><span class="line">   e   extended</span><br><span class="line"><span class="built_in">Select</span> (default e): p</span><br><span class="line">分区号 (<span class="number">3</span>,<span class="number">4</span>，默认 <span class="number">3</span>)：<span class="number">3</span></span><br><span class="line">起始 扇区 (<span class="number">251660288</span><span class="literal">-976773167</span>，默认为 <span class="number">251660288</span>)：</span><br></pre></td></tr></table></figure><blockquote><p>这里是设置分区起始的柱面，直接回车选择默认即可</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">起始 扇区 (<span class="number">167774208</span><span class="literal">-976773167</span>，默认为 <span class="number">167774208</span>)：</span><br><span class="line">将使用默认值 <span class="number">167774208</span></span><br></pre></td></tr></table></figure><blockquote><p>此处是设置分区结束柱面，<code>+40G</code>表示从起始柱面开始向后40G结束，也是是设置分区大小为40G，输入<code>+40G</code>后回车</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">起始 扇区 (<span class="number">167774208</span><span class="literal">-976773167</span>，默认为 <span class="number">167774208</span>)：</span><br><span class="line">将使用默认值 <span class="number">167774208</span></span><br><span class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (<span class="number">167774208</span><span class="literal">-976773167</span>，默认为 <span class="number">976773167</span>)：+<span class="number">40</span>G</span><br><span class="line">分区 <span class="number">3</span> 已设置为 Linux 类型，大小设为 <span class="number">40</span> GiB</span><br></pre></td></tr></table></figure><blockquote><p>此处可输入<code>p</code>查看分区是否成功，输入<code>p</code>回车,显示分区成功</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：p</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：<span class="number">500.1</span> GB, <span class="number">500107862016</span> 字节，<span class="number">976773168</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">4096</span> 字节 / <span class="number">4096</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x1b07a8d2</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sda1            <span class="number">2048</span>    <span class="number">83888127</span>    <span class="number">41943040</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda2        <span class="number">83888128</span>   <span class="number">167774207</span>    <span class="number">41943040</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda3       <span class="number">167774208</span>   <span class="number">251660287</span>    <span class="number">41943040</span>   <span class="number">83</span>  Linux</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：</span><br></pre></td></tr></table></figure><blockquote><p>对刚建好得分区格式化</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># mkfs.xfs -f /dev/sda3</span></span><br></pre></td></tr></table></figure><h3 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a><strong>删除分区</strong></h3><blockquote><p>输入<code>fdisk /dev/sda</code>回车，进入硬盘分区  </p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> <span class="type">mnt</span>]<span class="comment"># fdisk /dev/sda</span></span><br><span class="line"></span><br><span class="line">The device presents a logical sector size that is smaller than</span><br><span class="line">the physical sector size. Aligning to a physical sector (or optimal</span><br><span class="line">I/O) size boundary is recommended, or performance may be impacted.</span><br><span class="line">欢迎使用 fdisk (util<span class="literal">-linux</span> <span class="number">2.23</span>.<span class="number">2</span>)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：</span><br></pre></td></tr></table></figure><blockquote><p>删除分区,输入<code>d</code>回车,选择要删除得分区序号<code>4</code>回车</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：d</span><br><span class="line">分区号 (<span class="number">1</span><span class="literal">-4</span>，默认 <span class="number">4</span>)：<span class="number">4</span></span><br><span class="line">分区 <span class="number">4</span> 已删除</span><br></pre></td></tr></table></figure><blockquote><p>输入<code>w</code>保存操作</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re<span class="literal">-read</span> partition table.</span><br><span class="line">正在同步磁盘。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ入门</title>
      <link href="/posts/bae9a0d2/"/>
      <url>/posts/bae9a0d2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在学习EventBus源码的时候，基于RabbitMQ持久化实现，顺带学习了下RabbitMQ。</p><ul><li><p><a href="https://www.rabbitmq.com/getstarted.html"><strong>RabbitMQ</strong></a> 是一个由erlang语言开发的遵循AMQP(Advanved Message Queue)协议的开源实现。</p></li><li><p><a href="https://baike.baidu.com/item/AMQP"><strong>AMQP协议</strong></a> 是具有现代特征的二进制协议。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a><strong>异步处理</strong></h3><ul><li>上游不关心多下游执行结果，上游执行完发送到MQ，多下游订阅MQ。</li></ul><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a><strong>应用解耦</strong></h3><ul><li>数据驱动的任务依赖，多个任务需要轮流执行，轮流订阅上一个任务。</li></ul><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a><strong>流量削峰</strong></h3><ul><li>异步返回执行时间长</li></ul><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h3><h4 id="RabbitMQ结构"><a href="#RabbitMQ结构" class="headerlink" title="RabbitMQ结构"></a><em><strong>RabbitMQ结构</strong></em></h4><p><img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/RabbitMQ%E7%BB%93%E6%9E%84.png" alt="RabbitMQ结构"></p><h4 id="名词释义"><a href="#名词释义" class="headerlink" title="名词释义"></a><strong>名词释义</strong></h4><h5 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a><strong>Broker</strong></h5><ul><li>消息队列服务器，接受客户端的连接，实现AMQP实体服务</li></ul><h5 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a><strong>Connection</strong></h5><ul><li>连接，应用程序与Broker的网络连接</li></ul><h5 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a><strong>ConnectionFactory</strong></h5><ul><li>Connection的制造工厂</li></ul><h5 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a><strong>Exchange</strong></h5><ul><li>交换机，接收消息，根据路由键转发消息到绑定的队列</li></ul><h5 id="Exchange-Types"><a href="#Exchange-Types" class="headerlink" title="Exchange Types"></a><strong>Exchange Types</strong></h5><ul><li>交换机类型，RabbitMQ常用的Exchange Type有 <code>fanout</code>、<code>direct</code>、<code>topic</code>、<code>headers</code> 这四种（AMQP规范里还提到两种Exchange Type，分别为system与自定义，这里不予以描述）</li></ul><h5 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a><strong>Queue</strong></h5><ul><li>也称为Message Queue,消息队列，保存消息并将它们转发给消费者</li></ul><h5 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a><strong>Channel</strong></h5><ul><li>网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务</li></ul><h5 id="Message"><a href="#Message" class="headerlink" title="Message"></a><strong>Message</strong></h5><ul><li>消息，服务器和应用程序之间传送的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body则就是消息体内容。</li></ul><h5 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a><strong>Binding</strong></h5><ul><li>绑定，RabbitMQ通过绑定（<code>Binding</code>）将交换器（<code>Exchange</code>）和消息队列（<code>Queue</code>）关联起来，绑定（<code>Binding</code>）中可以包含（<code>Binding Key</code>），通过绑定键（<code>Binding Key</code>）就知道正确地将消息路由到指定的消息队列（<code>Queue</code>）</li></ul><h5 id="Binding-Key"><a href="#Binding-Key" class="headerlink" title="Binding Key"></a><strong>Binding Key</strong></h5><ul><li>绑定键，它表示交换机（<code>Exchange</code>）和消息队列（<code>Queue</code>）是通过绑定键（<code>Binding Key</code>）进行联系，这个关系是固定的，初始化的时候，就会建立该队列</li></ul><h5 id="Routing-Key"><a href="#Routing-Key" class="headerlink" title="Routing Key"></a><strong>Routing Key</strong></h5><ul><li>路由键，生产者在将消息发送给交换机（<code>Exchange</code>）的时候，一般会指定一个路由键（<code>Routing Key</code>），来指定这个消息的路由规则。这个路由键（<code>Routing Key</code>）需要与交换机类型（<code>Exchange Type</code>）及绑定键（<code>Binding Key</code>）联合使用才能生，我们的生产者只需要通过指定路由键（<code>Routing Key</code>）来决定消息流向哪里。</li></ul><h5 id="Message-acknowledgment"><a href="#Message-acknowledgment" class="headerlink" title="Message acknowledgment"></a><strong>Message acknowledgment</strong></h5><ul><li>消息回执，在实际应用中，可能会发生消费者收到消息队列（<code>Queue</code>）中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（<code>Message acknowledgment</code>）后才将该消息从消息队列（<code>Queue</code>）中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。</li><li>这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑</li></ul><h5 id="Message-durability"><a href="#Message-durability" class="headerlink" title="Message durability"></a><strong>Message durability</strong></h5><ul><li>可以将Queue与Message都设置为可持久化的（durable），在RabbitMQ服务重启的情况下，也不会丢失消息</li></ul><h4 id="RabbitMQ内部结构"><a href="#RabbitMQ内部结构" class="headerlink" title="RabbitMQ内部结构"></a><em><strong>RabbitMQ内部结构</strong></em></h4><p><img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/RabbitMQ%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png" alt="RabbitMQ内部结构"></p><h3 id="交换机（Exchange）"><a href="#交换机（Exchange）" class="headerlink" title="交换机（Exchange）"></a><strong>交换机（Exchange）</strong></h3><h4 id="交换机类型（Exchange-Types）"><a href="#交换机类型（Exchange-Types）" class="headerlink" title="交换机类型（Exchange Types）"></a><strong>交换机类型（Exchange Types）</strong></h4><ul><li><p><strong>fanout</strong><br><code>fanout</code>类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。  </p><p><img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/exchange-fanout.png" alt="exchange-fanout"></p><p>上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。</p></li><li><p><strong>direct</strong><br>direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。  </p><p><img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/exchange-direct.png" alt="exchange-direct"></p><p>以上图的配置为例，我们以routingKey&#x3D;“<code>error</code>”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；如果我们以routing Key&#x3D;“<code>info</code>”或routing Key&#x3D;“<code>warning</code>”来发送消息，则消息只会路由到Queue2。如果我们以其他routing Key发送消息，则消息不会路由到这两个Queue中。</p></li><li><p><strong>topic</strong><br>前面讲到direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：</p><p>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“<code>stock.usd.nyse</code>”、“<code>nyse.vmw</code>”、“<code>quick.orange.rabbit</code>”，可以配置多个单词，最大上限255字节</p><p>binding key与routing key一样也是句点号“. ”分隔的字符串。</p><p>binding key中可以存在两种特殊字符“<code>*</code>”与“<code>#</code>”，用于做模糊匹配，其中“<code>*</code>”用于匹配一个单词，“<code>#</code>”用于匹配多个单词（可以是零个）。  </p><p><img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/exchange-topic.png" alt="exchange-topic">  </p><p>以上图中的配置为例，routing Key&#x3D;“<code>quick.orange.rabbit</code>”的消息会同时路由到Q1与Q2，routing Key&#x3D;“<code>lazy.orange.elephant</code>”的消息会路由到Q1与Q2，routing Key&#x3D;“<code>lazy.brown.fox</code>”的消息会路由到Q2，routing Key&#x3D;“<code>lazy.pink.rabbit</code>”的消息会路由到Q2（只会投递给Q2一次，虽然这个routing Key与Q2的两个binding Key都匹配）；routingKey&#x3D;“<code>quick.brown.fox</code>”、routingKey&#x3D;“<code>orange</code>”、routing Key&#x3D;“<code>quick.orange.male.rabbit</code>”的消息将会被丢弃，因为它们没有匹配任何binding Key。</p></li><li><p><strong>headers</strong><br>headers类型的Exchange不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。<br>在绑定Queue与Exchange时指定一组键值对；当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对；如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。</p></li></ul><h3 id="消息队列（Message-Queue）"><a href="#消息队列（Message-Queue）" class="headerlink" title="消息队列（Message Queue）"></a><strong>消息队列（Message Queue）</strong></h3><ol><li><p><strong>普通队列</strong></p><p> <img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/queue.png" alt="普通队列"></p><p> 这是最简单的使用方式，生产者负责发消息，消费者负责接收消息并处理，不需要指定交换机，直接发送到队列里</p></li><li><p><strong>工作队列</strong></p><p> <img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/work-queues.png" alt="工作队列"></p><p> 这种模式出现了两个消费者，为了保证消费者之间的负载均衡和同步，需要在消息队列之间加上同步功能，工作队列（又名任务队列）背后的主要思想是避免立即执行资源密集型任务，必须等待它完成。。相反，我们计划稍后完成任务。我们将任务封装为消息并将其发送到队列中。后台运行的一个工作进程将弹出任务并最终执行该任务。当你运行许多工人（消费者）时，任务将在他们之间分担。</p><blockquote><p>多个消费者同时监听一个队列，有两种分发模式：</p></blockquote><ul><li>轮询分发<ul><li>每个消费者按照顺序分发，平均分配所有消息，不管消费者是否消费完成。</li></ul></li><li>公平分发<ul><li>每个消费者必须空闲了才会分发，能者多劳，避免消息堆积。必须关闭自动应答<a href="#message-acknowledgment"><strong>ack</strong></a>，改成手动应答。</li></ul></li></ul></li><li><p><strong>订阅者模式</strong></p><p> <img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/publish-subscribe.png" alt="订阅者模式">  </p><p> 一个生产者，多个消费者，消费者都有自己的队列，消息先发送到交换机exchange，每个队列都绑定到交换机。实现一个消息被多个消费者消费。<br> 队列如果不绑定到交换机，消息丢失，交换机没有存储能力。</p></li><li><p><strong>路由器模式</strong></p><p> <img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/routing.png" alt="路由器模式"></p></li><li><p><strong>主题模式</strong></p><p> <img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/topics.png" alt="主题模式"></p></li><li><p><strong>RPC模式</strong></p></li></ol><ul><li><p>MQ本身是基于异步的消息处理，前面的示例中所有的生产者（P）将消息发送到RabbitMQ后不会知道消费者（C）处理成功或者失败（甚至连有没有消费者来处理这条消息都不知道）。  </p></li><li><p>但实际的应用场景中，我们很可能需要一些同步处理，需要同步等待服务端将我的消息处理完成后再进行下一步处理。这相当于RPC（Remote Procedure Call，远程过程调用）。在RabbitMQ中也支持RPC。</p><p>  <img src="https://img.chobon.top/blog/RabbitMQ%E5%85%A5%E9%97%A8/rpc.png" alt="路由器模式"></p></li><li><p>RabbitMQ中实现RPC的机制是：</p><ul><li>客户端发送请求（消息）时，在消息的属性（MessageProperties，在AMQP协议中定义了14中properties，这些属性会随着消息一起发送）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。</li><li>服务器端收到消息并处理；服务器端处理完消息后，将生成一条应答消息到replyTo指定的Queue，同时带上correlationId属性；客户端之前已订阅replyTo指定的Queue，从中收到服务器的应答消息后，根据其中的correlationId属性分析哪条请求被执行了，根据执行结果进行后续业务处理。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RabbitMQ支持集群化、高可用部署架构、消息高可靠支持，对复杂系统的解耦以及复杂链路的路由调用和不弱的吞吐量，足以应付大部分业务需求了。</p><ul><li><strong>比较RabbitMQ和Kafka</strong><br>Kafka定位在日志等方面，而RabbitMQ就是按照AMQP来设计作为消息队列，如果单纯的只是作为消息队列来使用，RabbitMQ足够胜任了。虽然RabbitMQ吞吐量差于Kafka，但是Kafka没有RabbitMQ对业务支持得好。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 中间件 </category>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS修改主机名</title>
      <link href="/posts/8b6c1b3f/"/>
      <url>/posts/8b6c1b3f/</url>
      
        <content type="html"><![CDATA[<ul><li>进到系统etc目录下</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Last login: Fri Dec <span class="number">13</span> <span class="number">22</span>:<span class="number">02</span>:<span class="number">18</span> <span class="number">2019</span> from <span class="number">192.168</span>.<span class="number">124.19</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cd /etc</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">etc</span>]<span class="comment"># ls</span></span><br><span class="line">adjtime                  chkconfig.d   dbus<span class="literal">-1</span>                   favicon.png    gshadow      issue.net      login.defs                my.cnf             pki             rc0.d           rsyslog.conf   skel            sysctl.d            xinetd.d</span><br><span class="line">aliases                  chrony.conf   default                  filesystems    gshadow-     kdump.conf     logrotate.conf            my.cnf.d           plymouth        rc1.d           rsyslog.d      ssh             systemd             yum</span><br><span class="line">aliases.db               chrony.keys   depmod.d                 firewalld      gss          kernel         logrotate.d               NetworkManager     pm              rc2.d           rwtab          ssl             system<span class="literal">-release</span>      yum.conf</span><br><span class="line">alternatives             cron.d        dhcp                     fstab          host.conf    krb5.conf      lvm                       networks           polkit<span class="literal">-1</span>        rc3.d           rwtab.d        statetab        system<span class="literal">-release-cpe</span>  yum.repos.d</span><br><span class="line">anacrontab               cron.daily    DIR_COLORS               gcrypt         hostname     krb5.conf.d    machine<span class="literal">-id</span>                nsswitch.conf      popt.d          rc4.d           sasl2          statetab.d      terminfo</span><br><span class="line">asound.conf              cron.deny     DIR_COLORS.<span class="number">256</span>color      gnupg          hosts        ld.so.cache    magic                     nsswitch.conf.bak  postfix         rc5.d           securetty      subgid          tmpfiles.d</span><br><span class="line">audisp                   cron.hourly   DIR_COLORS.lightbgcolor  GREP_COLORS    hosts.allow  ld.so.conf     makedumpfile.conf.sample  openldap           ppp             rc6.d           security       subuid          tuned</span><br><span class="line">audit                    cron.monthly  dracut.conf              groff          hosts.deny   ld.so.conf.d   man_db.conf               opt                prelink.conf.d  rc.d            selinux        sudo.conf       udev</span><br><span class="line">bash_completion.d        crontab       dracut.conf.d            <span class="built_in">group</span>          init.d       libaudit.conf  mke2fs.conf               os<span class="literal">-release</span>         printcap        rc.local        services       sudoers         vconsole.conf</span><br><span class="line">bashrc                   cron.weekly   e2fsck.conf              <span class="built_in">group</span>-         inittab      libnl          modprobe.d                pam.d              profile         redhat<span class="literal">-release</span>  sestatus.conf  sudoers.d       virc</span><br><span class="line">binfmt.d                 crypttab      environment              grub2.cfg      inputrc      libuser.conf   modules<span class="literal">-load</span>.d            passwd             profile.d       resolv.conf     shadow         sudo<span class="literal">-ldap</span>.conf  wpa_supplicant</span><br><span class="line">centos<span class="literal">-release</span>           csh.cshrc     ethertypes               grub2<span class="literal">-efi</span>.cfg  iproute2     locale.conf    motd                      passwd-            protocols       rpc             shadow-        sysconfig       X11</span><br><span class="line">centos<span class="literal">-release-upstream</span>  csh.login     exports                  grub.d         issue        localtime      mtab                      pkcs11             python          rpm             shells         sysctl.conf     xdg</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>修改hostname文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">etc</span>]<span class="comment"># vim hostname</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">localhost.localdomain</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;hostname&quot;</span></span><br></pre></td></tr></table></figure><p>修改为自己的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chobon</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p><code>wq</code>保存</p><p>检查下是否修改成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">etc</span>]<span class="comment"># cat hostname</span></span><br><span class="line">chobon</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">etc</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>重启系统</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">etc</span>]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure><p>等系统重启后</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last login: Fri Dec <span class="number">13</span> <span class="number">22</span>:<span class="number">49</span>:<span class="number">08</span> <span class="number">2019</span> from <span class="number">192.168</span>.<span class="number">124.19</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS学习KVM笔记-安装篇</title>
      <link href="/posts/3120560e/"/>
      <url>/posts/3120560e/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了学习docker集群，打算在CentOS里面安装KVM虚拟机来做docker集群</p><ul><li><strong>KVM</strong><br>KVM(Kernel-based Virtual Machine, 即内核级虚拟机) 是一个开源的系统虚拟化模块。它使用Linux自身的调度器进行管理，所以相对于Xen，其核心源码很少。目前KVM已成为学术界的主流VMM之一，它包含一个为处理器提供底层虚拟化 可加载的核心模块kvm.ko(kvm-intel.ko 或 kvm-amd.ko)。kvm还需要一个经过修改的QEMU 软件(qemu-kvm)，作为虚拟机上层控制和界面。KVM的虚拟化需要硬件支持(如 Intel VT技术或者AMD V技术)。是基于硬件的完全虚拟化。 KVM可以运行多个其本身运行未改动的镜像的虚拟机，例如Windows，Mac OS X ，每个虚拟机都有各自的虚拟硬件，比如网卡、硬盘核图形适配器等。<span id="more"></span></li></ul><h2 id="kvm相关依赖包和作用"><a href="#kvm相关依赖包和作用" class="headerlink" title="kvm相关依赖包和作用"></a>kvm相关依赖包和作用</h2><p><strong>qemu-kvm</strong> &amp;emsp;&amp;emsp;&amp;emsp;          主要的KVM程序包<br><strong>python-virtinst</strong> &amp;emsp;   创建虚拟机所需要的命令行工具和程序库<br><strong>virt-manager</strong> &amp;emsp;&amp;emsp;      GUI虚拟机管理工具<br><strong>virt-top</strong> &amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;ensp;         虚拟机统计命令<br><strong>virt-viewer</strong> &amp;emsp;&amp;emsp;&amp;emsp;      GUI连接程序，连接到已配置好的虚拟机<br><strong>libvirt</strong>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;ensp;          C语言工具包，提供libvirt服务<br><strong>libvirt-client</strong>&amp;emsp;&amp;emsp;&amp;ensp;   虚拟客户机提供的C语言工具包<br><strong>virt-install</strong>&amp;emsp;&amp;emsp;&amp;emsp;&amp;ensp;     基于libvirt服务的虚拟机创建命令<br><strong>bridge-utils</strong> &amp;emsp;&amp;emsp;&amp;ensp;     创建和管理桥接设备的工具  </p><h2 id="检测是否支持KVM"><a href="#检测是否支持KVM" class="headerlink" title="检测是否支持KVM"></a>检测是否支持KVM</h2><ul><li>检查cpu是否支持虚拟化</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># grep vmx /proc/cpuinfo</span></span><br></pre></td></tr></table></figure><p>如果有vmx信息输出，就说明支持VT;如果没有任何的输出，说明你的cpu不支持，将无法使用KVM虚拟机。</p><ul><li>确保BIOS里开启虚拟化功能，即查看是否加载KVM模块</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># lsmod | grep kvm</span></span><br></pre></td></tr></table></figure><ul><li>安装虚拟机服务</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># yum install qemu-kvm libvirt virt-install bridge-utils</span></span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># systemctl start libvirtd</span></span><br></pre></td></tr></table></figure><p>检查下服务是否正常</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># systemctl status libvirtd</span></span><br><span class="line"></span><br><span class="line">● libvirtd.service - Virtualization daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 三 <span class="number">2019</span><span class="literal">-12-18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> CST; <span class="number">9</span>s ago</span><br><span class="line">     Docs: <span class="built_in">man</span>:libvirtd(<span class="number">8</span>)</span><br><span class="line">           https://libvirt.org</span><br><span class="line"> Main PID: <span class="number">20262</span> (libvirtd)</span><br><span class="line">    Tasks: <span class="number">19</span> (limit: <span class="number">32768</span>)</span><br><span class="line">   CGroup: /system.slice/libvirtd.service</span><br><span class="line">           ├─ <span class="number">2405</span> /usr/sbin/dnsmasq <span class="literal">--conf-file</span>=/var/lib/libvirt/dnsmasq/default.conf <span class="literal">--leasefile-ro</span> <span class="literal">--dhcp-script</span>=/usr/libexec/libvirt_leaseshelper</span><br><span class="line">           ├─ <span class="number">2407</span> /usr/sbin/dnsmasq <span class="literal">--conf-file</span>=/var/lib/libvirt/dnsmasq/default.conf <span class="literal">--leasefile-ro</span> <span class="literal">--dhcp-script</span>=/usr/libexec/libvirt_leaseshelper</span><br><span class="line">           └─<span class="number">20262</span> /usr/sbin/libvirtd</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon systemd[<span class="number">1</span>]: Starting Virtualization daemon...</span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon systemd[<span class="number">1</span>]: Started Virtualization daemon.</span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon dnsmasq[<span class="number">2405</span>]: read /etc/hosts - <span class="number">2</span> addresses</span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon dnsmasq[<span class="number">2405</span>]: read /var/lib/libvirt/dnsmasq/default.addnhosts - <span class="number">0</span> addresses</span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon dnsmasq<span class="literal">-dhcp</span>[<span class="number">2405</span>]: read /var/lib/libvirt/dnsmasq/default.hostsfile</span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon libvirtd[<span class="number">20262</span>]: <span class="number">2019</span><span class="literal">-12-18</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">09.896</span>+<span class="number">0000</span>: <span class="number">20278</span>: info : libvirt version: <span class="number">4.5</span>.<span class="number">0</span>, package: <span class="number">23</span>.el7_7.<span class="number">3</span> (CentOS BuildSystem &lt;http://bugs.centos.org&gt;, <span class="number">2019</span><span class="literal">-12-02-17</span>:<span class="number">45</span>:<span class="number">06</span>, x86<span class="literal">-02</span>.bsys.centos.org)</span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon libvirtd[<span class="number">20262</span>]: <span class="number">2019</span><span class="literal">-12-18</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">09.896</span>+<span class="number">0000</span>: <span class="number">20278</span>: info : hostname: chobon</span><br><span class="line"><span class="number">12</span>月 <span class="number">18</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">09</span> chobon libvirtd[<span class="number">20262</span>]: <span class="number">2019</span><span class="literal">-12-18</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">09.896</span>+<span class="number">0000</span>: <span class="number">20278</span>: warning : virStorageBackendVolOpen:<span class="number">1622</span> : ignoring dangling symlink <span class="string">&#x27;/etc/grub2.cfg&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><ul><li>下载镜像</li></ul><p><code>wget</code>和<code>curl</code>都可以  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> http://mirrors.aliyun.com/centos/<span class="number">7.7</span>.<span class="number">1908</span>/isos/x86_64/CentOS<span class="literal">-7-x86_64-Minimal-1908</span>.iso</span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-sSLO</span> http://mirrors.aliyun.com/centos/<span class="number">7.7</span>.<span class="number">1908</span>/isos/x86_64/CentOS<span class="literal">-7-x86_64-Minimal-1908</span>.iso</span><br></pre></td></tr></table></figure><ol><li>使用qemu-img命令可以创建磁盘文件</li></ol><ul><li>创建一个raw格式的磁盘文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># qemu-img create /mnt/kvm/vm1.raw 20G</span></span><br></pre></td></tr></table></figure><ul><li>转换磁盘格式为qcow2</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">chobon</span> ~]<span class="comment"># qemu-img convert -f raw -O qcow2 /mnt/kvm/vm1.raw /mnt/kvm/vm1.qcow2</span></span><br></pre></td></tr></table></figure><ol><li>使用virt-install命令创建虚拟机</li></ol><p><em><strong><code>virt-install --help</code></strong></em>  </p><blockquote><p>查看命令选项说明</p></blockquote><ul><li><strong>常用选项：</strong><ul><li><code>-n</code> <code>--name</code> 虚拟机名称</li><li><code>-r</code> <code>--memory</code> 以MB为单位为客户端事件分配的内存</li><li><code>vcpus</code> 配置虚拟机的虚拟CPU(vcpu)数量<ul><li><code>--vcpus 5</code></li><li><code>--vcpus 5, maxcpus=10</code></li><li><code>--vcpus socket=2,cores=4,threads=2</code></li></ul></li><li><code>-l</code> <code>--location</code> 安装源(例如：<code>nfs:host:/path</code>、<code>http://host/path</code>、<code>ftp://host/path</code>)</li><li><code>--pxe</code> 使用 PXE 协议从网络引导</li><li><code>--import</code> 在磁盘映像中构建客户机</li><li><code>--livecd</code> 将光驱介质视为 Live CD</li><li><code>-x</code> <code>--extra-args</code> 附加到使用 –location 引导的内核的参数</li><li><code>--disk</code> 用各种选项指定存储<ul><li><code>--disk path=/my/existing/disk,cache=none</code></li><li><code>--disk path=/my/new/disk,format=qcow2,size=5,sparse (单位GB)</code></li><li><code>--disk vol=poolname:volname,device=cdrom,bus=scsi</code></li></ul></li><li><code>-w</code> <code>--network</code> 配置客户网络接口<ul><li><code>--network bridge=mybr0</code></li><li><code>--network network=my_libvirt_virtual_net</code></li><li><code>--network network=mynet,model=virtio,mac=00:11...</code></li></ul></li><li><code>--nonetworks</code> 不要为该客体创建网络接口</li><li><code>--graphics</code> 配置虚拟机显示设置<ul><li><code>--graphics vnc</code></li><li><code>--graphics spice,port=5901,tlsport=5902</code></li><li><code>--graphics none</code></li><li><code>--graphics vnc,password=foobar,port=5910,keymap=ja</code></li></ul></li><li><code>--virt-type</code> 要使用的管理程序名称(kvm、qemu、xen)</li><li><code>--force</code> 对任意应用程序提示强制回答‘yes’，终止其它提示</li></ul></li><li><hr></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">virt<span class="literal">-install</span> \</span><br><span class="line"><span class="literal">--virt-type</span>=kvm \</span><br><span class="line"><span class="literal">--name</span>=vm1_centos7 \</span><br><span class="line"><span class="literal">--vcpus</span>=<span class="number">2</span> \</span><br><span class="line"><span class="literal">--memory</span>=<span class="number">2048</span> \</span><br><span class="line"><span class="literal">--location</span>=/kvm/iso/CentOS<span class="literal">-7-x86_64-Minimal-1908</span>.iso \</span><br><span class="line"><span class="literal">--disk</span> path=/kvm/vfs/vm1.qcow2,size=<span class="number">40</span>,format=qcow2 \</span><br><span class="line"><span class="literal">--network</span> network=default \</span><br><span class="line"><span class="literal">--graphics</span> none \</span><br><span class="line"><span class="literal">--extra-args</span>=<span class="string">&#x27;console=ttyS0&#x27;</span> \</span><br><span class="line"><span class="literal">--force</span></span><br></pre></td></tr></table></figure><p>剩下的就跟安装系统一样了</p><ul><li>安装选项</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Starting installer, one moment...</span><br><span class="line">anaconda <span class="number">21.48</span>.<span class="number">22.134</span><span class="literal">-1</span> <span class="keyword">for</span> CentOS <span class="number">7</span> started.</span><br><span class="line"> * installation log files are stored <span class="keyword">in</span> /tmp during the installation</span><br><span class="line"> * shell is available on TTY2</span><br><span class="line"> * when reporting a bug add logs from /tmp as separate text/plain attachments</span><br><span class="line"><span class="number">18</span>:<span class="number">21</span>:<span class="number">12</span> Not asking <span class="keyword">for</span> VNC because we don<span class="string">&#x27;t have a network</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">Installation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 1) [x] Language settings                 2) [!] Time settings</span></span><br><span class="line"><span class="string">        (English (United States))                (Timezone is not set.)</span></span><br><span class="line"><span class="string"> 2) [!] Installation source               4) [!] Software selection</span></span><br><span class="line"><span class="string">        (Processing...)                          (Processing...)</span></span><br><span class="line"><span class="string"> 3) [!] Installation Destination          6) [x] Kdump</span></span><br><span class="line"><span class="string">        (No disks selected)                      (Kdump is enabled)</span></span><br><span class="line"><span class="string"> 4) [ ] Network configuration             8) [!] Root password</span></span><br><span class="line"><span class="string">        (Not connected)                          (Password is not set.)</span></span><br><span class="line"><span class="string"> 5) [!] User creation</span></span><br><span class="line"><span class="string">        (No user will be created)</span></span><br><span class="line"><span class="string">  Please make your choice from above [&#x27;</span>q<span class="string">&#x27; to quit | &#x27;</span>b<span class="string">&#x27; to begin installation |</span></span><br><span class="line"><span class="string">  &#x27;</span><span class="built_in">r</span><span class="string">&#x27; to refresh]:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[anaconda] 1:main* 2:shell  3:log  4:storage-lo&gt; Switch tab: Alt+Tab | Help: F1</span></span><br></pre></td></tr></table></figure><p>选择好基本安装选项后，就可以继续下一步了<br>基础安装选项，如下显示</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Installation</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>) [<span class="type">x</span>] Language settings                 <span class="number">2</span>) [<span class="type">x</span>] Time settings</span><br><span class="line">        (English (United States))                (Asia/Shanghai timezone)</span><br><span class="line"> <span class="number">3</span>) [<span class="type">x</span>] Installation source               <span class="number">4</span>) [<span class="type">x</span>] Software selection</span><br><span class="line">        (Local media)                            (Minimal Install)</span><br><span class="line"> <span class="number">5</span>) [<span class="type">x</span>] Installation Destination          <span class="number">6</span>) [<span class="type">x</span>] Kdump</span><br><span class="line">        (Automatic partitioning                  (Kdump is disabled)</span><br><span class="line">        selected)                         <span class="number">8</span>) [<span class="type">x</span>] Root password</span><br><span class="line"> <span class="number">7</span>) [ ] Network configuration                    (Password is <span class="built_in">set</span>.)</span><br><span class="line">        (Not connected)</span><br><span class="line"> <span class="number">9</span>) [ ] User creation</span><br><span class="line">        (No user will be created)</span><br><span class="line">  Please make your choice from above [<span class="string">&#x27;q&#x27;</span> <span class="type">to</span> <span class="type">quit</span> | <span class="string">&#x27;b&#x27;</span> <span class="type">to</span> <span class="type">begin</span> <span class="type">installation</span> |</span><br><span class="line">  <span class="string">&#x27;r&#x27;</span> <span class="type">to</span> <span class="type">refresh</span>]:</span><br></pre></td></tr></table></figure><p>基本设置如下：</p><ol><li>语言保持不变  </li><li>时区选择上海  </li><li>安装源选择本地镜像  </li><li>软件选择最小安装  </li><li>安装磁盘选择自动分别，且使用LVM逻辑卷管理  </li><li>关闭Kdump，虚拟机关系不大  </li><li>网络先不管，安装之后处理  </li><li>Root 密码设置  </li><li>不创建新用户<br>最后，按下b开始安装过程。</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Progress</span><br><span class="line">Setting up the installation environment</span><br><span class="line">.</span><br><span class="line">Creating disklabel on /dev/vda</span><br><span class="line">.</span><br><span class="line">Creating xfs on /dev/vda1</span><br><span class="line">.</span><br><span class="line">Creating lvmpv on /dev/vda2</span><br><span class="line">.</span><br><span class="line">Creating swap on /dev/mapper/centos<span class="literal">-swap</span></span><br><span class="line">.</span><br><span class="line">Creating xfs on /dev/mapper/centos<span class="literal">-root</span></span><br><span class="line">.</span><br><span class="line">Running pre<span class="literal">-installation</span> scripts</span><br><span class="line">.</span><br><span class="line">Starting package installation <span class="keyword">process</span></span><br><span class="line">Preparing transaction from installation source</span><br><span class="line">Installing libgcc (<span class="number">1</span>/<span class="number">300</span>)</span><br><span class="line">Installing grub2<span class="literal">-common</span> (<span class="number">2</span>/<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">Installing iwl6000g2b<span class="literal">-firmware</span> (<span class="number">299</span>/<span class="number">300</span>)</span><br><span class="line">Installing iwl5150<span class="literal">-firmware</span> (<span class="number">300</span>/<span class="number">300</span>)</span><br><span class="line">Performing post<span class="literal">-installation</span> setup tasks</span><br><span class="line">Installing boot loader</span><br><span class="line">.</span><br><span class="line">Performing post<span class="literal">-installation</span> setup tasks</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">Configuring installed system</span><br><span class="line">.</span><br><span class="line">Writing network configuration</span><br><span class="line">.</span><br><span class="line">Creating users</span><br><span class="line">.</span><br><span class="line">Configuring addons</span><br><span class="line">.</span><br><span class="line">Generating initramfs</span><br><span class="line">.</span><br><span class="line">Running post<span class="literal">-installation</span> scripts</span><br><span class="line">.</span><br><span class="line">        Use of this product is subject to the license agreement found at /usr/share/centos<span class="literal">-release</span>/EULA</span><br><span class="line"></span><br><span class="line">        Installation complete.  Press <span class="keyword">return</span> to quit</span><br></pre></td></tr></table></figure><p>几分钟后，安装结束<br>输入密码，进入系统</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      CentOS Linux (<span class="number">3.10</span>.<span class="number">0</span><span class="literal">-862</span>.el7.x86_64) <span class="number">7</span> (Core)</span><br><span class="line">      CentOS Linux (<span class="number">0</span><span class="literal">-rescue-8707fc0ebc304aecae24959960933077</span>) <span class="number">7</span> (Core)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">[   <span class="number">10.953832</span>] Netfilter messages via NETLINK v0.<span class="number">30</span>.</span><br><span class="line">[   <span class="number">10.967303</span>] ip_set: protocol <span class="number">6</span></span><br><span class="line"></span><br><span class="line">CentOS Linux <span class="number">7</span> (Core)</span><br><span class="line">Kernel <span class="number">3.10</span>.<span class="number">0</span><span class="literal">-862</span>.el7.x86_64 on an x86_64</span><br><span class="line"></span><br><span class="line">localhost login: root</span><br><span class="line">Password:</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>查看在运行中的虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh list</span><br></pre></td></tr></table></figure><ul><li>查看所有虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh list --all</span><br></pre></td></tr></table></figure><ul><li>挂起虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">suspend</span> linux-xx</span><br></pre></td></tr></table></figure><ul><li>恢复挂起的虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh resume linux-xx</span><br></pre></td></tr></table></figure><ul><li>开机启动虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh autostart linux-xx</span><br></pre></td></tr></table></figure><ul><li>关闭开机启动虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh auto start --<span class="built_in">disable</span> linux-xx</span><br></pre></td></tr></table></figure><ul><li>关闭虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh shutdown linux-xx</span><br></pre></td></tr></table></figure><ul><li>连接虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh console linux-xx</span><br></pre></td></tr></table></figure><ul><li>停止虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh destroy linux-xx</span><br></pre></td></tr></table></figure><ul><li>删除虚拟机定义</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh undefine linux-xx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventBus学习</title>
      <link href="/posts/6111e7af/"/>
      <url>/posts/6111e7af/</url>
      
        <content type="html"><![CDATA[<h2 id="EventBus介绍"><a href="#EventBus介绍" class="headerlink" title="EventBus介绍"></a>EventBus介绍</h2><p>EventBus 是一种事件发布订阅模式（观察者模式），通过 EventBus 我们可以很方便的实现解耦，将事件的发起和事件的处理的很好的分隔开来，很好的实现解耦。 微软官方的示例项目 <a href="https://github.com/dotnet-architecture/eShopOnContainers">EShopOnContainers</a> 也有在使用 EventBus 。</p><ul><li>发布订阅模式</li></ul><p><img src="https://img.chobon.top/blog/EventBus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/EventBus.png" alt="EventBus"></p><span id="more"></span><p>这里的 EventBus 实现也是参考借鉴了微软 eShopOnContainers 项目。</p><ul><li>在微服务中运用</li></ul><p><img src="https://img.chobon.top/blog/EventBus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/EventBus%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E8%BF%90%E7%94%A8.png" alt="在微服务中运用"></p><h2 id="EventBus整体架构"><a href="#EventBus整体架构" class="headerlink" title="EventBus整体架构"></a>EventBus整体架构</h2><ul><li>结构图</li></ul><p><img src="https://img.chobon.top/blog/EventBus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/EventBus%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="结构图"></p><ul><li><code>IEventBase</code> : 事件消息定义接口，所有事件消息都继承这个接口，这个接口定义了事件消息唯一Id <code>EventId</code> 和事件消息发生时间 <code>EventAt</code> 。</li></ul><p><em><code>IEventBase</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> EventId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    DateTimeOffset EventAt &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>IEventHandler</code> : 定义了一个 <code>Handle</code> 方法来处理相应的事件</li></ul><p><em><code>IEventHandler</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventHandler</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><code>IEventHandler&lt;T&gt;</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventHandler</span>&lt;<span class="keyword">in</span> <span class="title">TIEvent</span>&gt; : <span class="title">IEventHandler</span></span><br><span class="line">    <span class="keyword">where</span> <span class="title">TIEvent</span> : <span class="title">IEventBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task <span class="title">Handle</span>(<span class="params">TIEvent @<span class="keyword">event</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><code>IDynamicEventHandler</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDynamicEventHandler</span>:<span class="title">IEventHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task <span class="title">Handle</span>(<span class="params"><span class="built_in">dynamic</span> @<span class="keyword">event</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>IEventStore</code> : 所有的事件的处理存储，保存事件的IEventHandler，一般不会直接操作，通过 EventBus 的订阅和取消订阅来操作 EventStore</li></ul><p><em><code>IEventStore</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventStore</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">event</span> <span class="title">EventHandler</span>&lt;<span class="title">string</span>&gt; OnEventRemoved</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddSubscription</span>&lt;<span class="title">TEvent</span>, <span class="title">TEventHandler</span>&gt;()</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEventHandler : <span class="title">IEventHandler</span>&lt;<span class="title">TEvent</span>&gt;</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEvent : IEventBase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddDynamicSubscription</span>&lt;<span class="title">TEventHandler</span>&gt;(<span class="params"><span class="built_in">string</span> eventName</span>)</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEventHandler : IDynamicEventHandler</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RemoveSubscription</span>&lt;<span class="title">TEvent</span>, <span class="title">TEventHandler</span>&gt;()</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEventHandler : <span class="title">IEventHandler</span>&lt;<span class="title">TEvent</span>&gt;</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEvent : IEventBase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RemoveDynamicSubscription</span>&lt;<span class="title">TEventHandler</span>&gt;(<span class="params"><span class="built_in">string</span> eventName</span>)</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEventHandler : IDynamicEventHandler</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">HasSubscriptionsForEvent</span>&lt;<span class="title">TEvent</span>&gt;()</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEvent : IEventBase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">HasSubscriptionsForEvent</span>(<span class="params"><span class="built_in">string</span> eventName</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Type <span class="title">GetEventTypeByName</span>(<span class="params"><span class="built_in">string</span> eventName</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">IEnumerable</span>&lt;<span class="title">SubscriptionInfo</span>&gt; <span class="title">GetHandlersForEvent</span>&lt;<span class="title">TEvent</span>&gt;()</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TEvent : IEventBase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">IEnumerable</span>&lt;<span class="title">SubscriptionInfo</span>&gt; <span class="title">GetHandlersForEvent</span>(<span class="params"><span class="built_in">string</span> eventName</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetEventKey</span>&lt;<span class="title">T</span>&gt;()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>IEventBus</code> : 用来发布&#x2F;订阅&#x2F;取消订阅事件，并将事件的某一个 IEventHandler 保存到 EventStore 或从 EventStore 中移除<br>  <em><strong>注意：这里我把接口再拆分成 <code>IPublisher</code> 和 <code>ISubscriber</code> 便于理解</strong></em></li></ul><p><em><code>IEventBus</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventBus</span> : <span class="title">IPublisher</span>, <span class="title">ISubscriber</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><code>IPublisher</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPublisher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Publish</span>&lt;<span class="title">TEvent</span>&gt;(<span class="params">TEvent @<span class="keyword">event</span></span>) <span class="keyword">where</span> TEvent : IEventBase</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><code>ISubscriber</code></em></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubscriber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Subscribe</span>&lt;<span class="title">TEvent</span>, <span class="title">TEventHandler</span>&gt;() <span class="keyword">where</span> TEventHandler : <span class="title">IEventHandler</span>&lt;<span class="title">TEvent</span>&gt; <span class="keyword">where</span> TEvent : IEventBase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SubscribeDynamic</span>&lt;<span class="title">TEventHandler</span>&gt;(<span class="params"><span class="built_in">string</span> eventName</span>) <span class="keyword">where</span> TEventHandler : IDynamicEventHandler</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Unsubscribe</span>&lt;<span class="title">TEvent</span>, <span class="title">TEventHandler</span>&gt;() <span class="keyword">where</span> TEventHandler : <span class="title">IEventHandler</span>&lt;<span class="title">TEvent</span>&gt; <span class="keyword">where</span> TEvent : IEventBase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UnsubscribeDynamic</span>&lt;<span class="title">TEventHandler</span>&gt;(<span class="params"><span class="built_in">string</span> eventName</span>) <span class="keyword">where</span> TEventHandler : IDynamicEventHandler</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.chobon.top/blog/EventBus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/EventBus%E7%B1%BB%E5%9B%BE.png" alt="类图"></p><h2 id="EventBus实现"><a href="#EventBus实现" class="headerlink" title="EventBus实现"></a>EventBus实现</h2><p>具体实现代码就不贴了，github上很多，类库也有很多，这里只是记录下整体结构，干了件什么事情。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前只管使用，不关心具体怎么做，感觉写代码就像虚的，而不是那种实实在在的感觉。<br>其实具体做了什么很简单。没有那么多深奥的东西在，整理了一下学习的过程。  </p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> EventBus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1盒子刷CoreELEC固件</title>
      <link href="/posts/4b51cb42/"/>
      <url>/posts/4b51cb42/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直都搞个播放盒子想法，正好在逛恩山论坛看到N1盒子，不弱的硬件和多种固件，性价比又极高。由于N1被各大购物网站封杀，于是在某多多上买了一个来玩。N1的固件很多，做NAS的小钢炮、OMV，做影音的CoreELEC、LibreELEC，也可以刷Linux系统Armbian、Alpine、CentOS、Debian、Deepin、KaliOS，做游戏系统的sx05re、EmuELEC以及一些基于Android系统做了优化的YYF。</p><ul><li><p>N1盒子<br>Phicomm(斐讯)公司出的一款区块链路由器，当初是捆绑金融产品免费送硬件挖矿，随后公司暴雷，咸鱼上出现大量N1出售。后来有个大佬发现N1硬件不错制作了固件，从此一发不可收拾。</p></li><li><p>CoreELEC<br><a href="https://coreelec.org/">CoreELEC</a>是一个小巧的Linux发行版系统，CoreELEC是针对Amlogic芯片优化的，用于使用Amlogic芯片的盒子上运行Kodi。由于是专门优化的，有时候播放4K视频时，安卓下的Kodi会掉帧，但是CoreELEC就不会。<br>此外还有一个叫libreelec的系统，Coreelec和libreelec都是把精简版linux与kodi集成的媒体中心系统。不过Coreelec是专门面向Amlogic芯片设备适配的，推荐s905、s912、s922系列的盒子安装使用，例如：斐讯N1。</p><span id="more"></span></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="系统固件"><a href="#系统固件" class="headerlink" title="系统固件"></a>系统固件</h3><p>准备U盘刷入<a href="https://www.right.com.cn/forum/thread-331363-1-1.html">CoreELEC固件</a>，官网没提供N1的固件，恩山论坛上有人把源码编译制作成N1的固件。我安装的版本是<code>9.2.0</code></p><h3 id="刷入U盘"><a href="#刷入U盘" class="headerlink" title="刷入U盘"></a>刷入U盘</h3><p>准备一个容量大于8G的U盘，用BalenaEtcher工具把下载好的固件<code>CoreELEC-PhiComm_N1.arm-9.2.0.img.gz</code>刷入U盘。</p><h3 id="进入CoreELEC系统"><a href="#进入CoreELEC系统" class="headerlink" title="进入CoreELEC系统"></a>进入CoreELEC系统</h3><p><em>如果是原系统的话，这里还需要加一个步骤就是给原系统进行降级。我在某多多上收的N1盒子已经降过级，刷成基于安卓的YYF家庭影音固件，就不需要这步骤。</em><br>将刷好固件的U盘插入N1盒子靠近电源的USB插口上，给N1通电一会就可以进入到CoreELEC界面了。<br><strong>设置</strong><br>在CoreELEC设置里服务选项，把ssh和Samba功能开启。<br>在设置里区域选项，语言设置成Chinese。</p><p><strong>注意</strong><br>这里的系统是进入到U盘里的系统，必须要插这U盘才可以，如果想要把系统刷入N1内置的闪存中，就需要执行一个脚本<code>installtoemmc</code>文件,这个文件在<code>/flash</code>路径下。<br><em>用ssh工具连接上N1，账号<code>root</code>，默认密码<code>coreelec</code></em></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############################################</span></span><br><span class="line"><span class="comment">#                  CoreELEC                  #</span></span><br><span class="line"><span class="comment">#            https://coreelec.org            #</span></span><br><span class="line"><span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line">CoreELEC (official): <span class="number">9.2</span>.<span class="number">0</span> (Amlogic.arm)</span><br><span class="line">CoreELEC:/flash <span class="comment"># ls</span></span><br><span class="line">SYSTEM                     kernel.img</span><br><span class="line">System Volume Information  lost+found</span><br><span class="line">aml_autoscript             n1_autoscript</span><br><span class="line">device_trees               s905_autoscript</span><br><span class="line">dtb.img                    uEnv.ini</span><br><span class="line">gxl_p230_2g.dtb            uInitrd</span><br><span class="line">installtoemmc</span><br><span class="line">CoreELEC:/flash <span class="comment"># sh installtoemmc</span></span><br><span class="line">This script will <span class="built_in">erase</span> BOOT, SYSTEM, <span class="keyword">DATA</span> and DTB on your device</span><br><span class="line">and install LE that you booted from SD card/USB drive.</span><br><span class="line"></span><br><span class="line">It will create a backup of device tree and recovery partition on your boot media.</span><br><span class="line"></span><br><span class="line">The script does not have any safeguards!</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> you know what you are doing or anything <span class="keyword">else</span> to <span class="keyword">exit</span>:</span><br></pre></td></tr></table></figure><p>全部选择Yes后执行完N1会自动重启，这个时候就可以拔掉U盘。进入的便是内置闪存里的系统了。</p><h3 id="KODI的插件"><a href="#KODI的插件" class="headerlink" title="KODI的插件"></a>KODI的插件</h3><ul><li><p><strong>PVR IPTV Simple Client</strong><br>IPTV的客户端插件，可以看在线电视</p></li><li><p><strong>Jellyfin媒体服务器</strong><br>KODI上支持Jellyfin媒体服务器的插件</p></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>N1刷成CoreELEC只是一个播放器，还需要配合NAS服用更佳。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> N1 </tag>
            
            <tag> CoreELEC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10换CentOS7</title>
      <link href="/posts/4bd56b6f/"/>
      <url>/posts/4bd56b6f/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>双十一组了台ITX，于是想把闲置的笔记本换成centos7作为服务器</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载centos镜像"><a href="#下载centos镜像" class="headerlink" title="下载centos镜像"></a>下载centos镜像</h3><p>打开CentOS<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">官网地址</a> ，选择<code>aliyun</code>的<code>http://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/</code>下载网速会好一些，然后选择<code>CentOS-7-x86_64-DVD-1908.iso</code>镜像</p><h3 id="制作U盘PE"><a href="#制作U盘PE" class="headerlink" title="制作U盘PE"></a>制作U盘PE</h3><p>这里选择老牌的PE老毛桃</p><span id="more"></span><ul><li>坑1： <code>[Firmware Bug]: TSC_DEADLINE disabled due to Errata; please update microcode to version</code></li></ul><p><strong>由于笔记本是windows10系统直接安装CentOs7会报这个错，所以最后决定采用U盘ios镜像</strong><br>但是老毛桃好像不支持U盘IOS制作了，所以采用BalenaEtcher这个软件来把CentOS的IOS镜像写入U盘。</p><p>最后采用U盘镜像启动盘顺利进入安装系统界面，然后选择最小软件安装后系统顺利安装好了</p><ul><li>系统总共装了2次，第一次安装的时候选择两个硬盘，导致系统分区分布在两个硬盘上，后续可能移除机械硬盘会比较麻烦，所以又装了一次系统</li></ul><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1、以太网"><a href="#1、以太网" class="headerlink" title="1、以太网"></a>1、以太网</h4><p>如果是采用以太网连接的话直接插上网线，在<code>/etc/sysconfig/network-scripts</code>目录下自动生成的<code>ifcfg-enp8s0</code>配置文件（文件名可能会不一样，前缀是ifcfg-enp是以太网配置）把ONBOOT设置为yes，保证系统启动的时候自动启动。</p><p>重启下网络服务,再输入<code>ip addr</code>查看下是否已获得ip  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># service network restart</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># ip addr</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: enp8s0: &lt;NO<span class="literal">-CARRIER</span>,BROADCAST,MULTICAST,UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast state DOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">2</span>c:<span class="number">60</span>:<span class="number">0</span>c:<span class="number">37</span>:<span class="number">91</span>:<span class="number">56</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">192.168</span>.<span class="number">124.21</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">124.255</span> scope global noprefixroute dynamic enp8s0</span><br><span class="line">       valid_lft <span class="number">85282</span>sec preferred_lft <span class="number">85282</span>sec</span><br><span class="line">    inet6 fe80::<span class="number">15</span>e0:<span class="number">6</span>ced:<span class="number">25</span>d9:<span class="number">4090</span>/<span class="number">64</span> scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">3</span>: wlp15s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether bc:<span class="number">30</span>:<span class="number">7</span>d:e2:cb:bb brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果还没有获得ip就输入<code>dhclient</code>自动获取ip</p><h4 id="2、Wifi"><a href="#2、Wifi" class="headerlink" title="2、Wifi"></a>2、Wifi</h4><p>网卡识别正常，按照正常的流程来应该跟以太网一样简单，但是出了一些问题，查阅网络上的资料，最后确定是需要更新NetworkManager-wifi，所以通过以太网更新就可以了</p><p>如果在安装系统的时候已经设置了Wifi的配置，基本上跟以太网配置一样，可以用图形界面来配置命令<code>nmtui</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># nmtui</span></span><br><span class="line"></span><br><span class="line">                                   ┌┤ 网络管理器文 ├┐</span><br><span class="line">                                   │               │</span><br><span class="line">                                   │ 请选择选项     │</span><br><span class="line">                                   │               │</span><br><span class="line">                                   │ 编辑连接       │</span><br><span class="line">                                   │ 启用连接       │</span><br><span class="line">                                   │ 设置系统主机名  │</span><br><span class="line">                                   │                │</span><br><span class="line">                                   │ 退出           │</span><br><span class="line">                                   │                │</span><br><span class="line">                                   │         &lt;确定&gt; │</span><br><span class="line">                                   │                │</span><br><span class="line">                                   └────────────────┘</span><br></pre></td></tr></table></figure><p>这里不介绍图形界面的配置，照样是在<code>/etc/sysconfig/network-scripts</code>目录下有个<code>ifcfg-&lt;wifi的SSID&gt;</code>（这里是安装系统的时候配置过的，如果没有配置，文件名应该是<code>ifcfg-wlp*</code>），编辑文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">network</span>-<span class="type">scripts</span>]<span class="comment"># cat ifcfg-xxxx</span></span><br><span class="line">ESSID=xxxx</span><br><span class="line">MODE=Managed</span><br><span class="line">KEY_MGMT=WPA<span class="literal">-PSK</span></span><br><span class="line">SECURITYMODE=open</span><br><span class="line">MAC_ADDRESS_RANDOMIZATION=default</span><br><span class="line"><span class="built_in">TYPE</span>=Wireless</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable<span class="literal">-privacy</span></span><br><span class="line">NAME=&lt;wifi的SSID&gt;</span><br><span class="line">UUID=<span class="number">3</span>fbd861c<span class="literal">-c7df-4451-9186-8423b019eceb</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">DEVICE=wlp15s0</span><br></pre></td></tr></table></figure><p>ONBOOT跟以太网一样设置成开启自动启动，增加一个网卡设备名DEVICE&#x3D;<code>wlp15s0</code>，然后wq保存，重启网络服务。查看ip如果还没有获取就执行<code>hdclient</code>自动获取下ip就可以了。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>笔记本合盖不休眠</li></ul><p>本来按照正常的去掉<code>/etc/systemd/logind.conf</code>文件里的#HandleLidSwitch&#x3D;suspend前面的#，值改成ignore或者lock就好了。但是不巧的是我笔记本上正好插着一个拓展坞…结果死活不生效。又陷入了沉思。通过google去查<code>logind.conf</code><a href="http://www.jinbuguo.com/systemd/logind.conf.html">中文配置手册</a>，发现了猫腻。</p><p><code>如果主机插入了一个扩展坞(docking station) 或者连接了多个显示器， 那么&quot;合上盖子&quot;将执行 HandleLidSwitchDocked= 动作； 如果主机使用外部电源， 并且 HandleLidSwitchExternalPower= 不是默认值(&quot;ignore&quot;)， 那么&quot;合上盖子&quot;将执行 HandleLidSwitchExternalPower= 动作； 否则将执行 HandleLidSwitch= 动作。</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HandleLidSwitch=ignore</span><br><span class="line">HandleLidSwitchDocked=ignore</span><br><span class="line">HandleLidSwitchExternalPower=ignore</span><br></pre></td></tr></table></figure><p>设置成这样，保存文件，执行<code>systemctl restart systemd-logind</code>使其生效，搞定。CentOS好像不支持lock，改成lock反而不生效。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从一个运维门外汉，折腾了下linux感觉真是收获满满，遇到问题解决问题，然后记录下来，既可以让别人少走弯路又可以加强印象。<br>下一步在linux上搞个虚拟化尝试下。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记学习Moq框架（一）</title>
      <link href="/posts/58011e5c/"/>
      <url>/posts/58011e5c/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Moq（英语发音是Mock-you 或者只是mock）是一个针对.Net开发的模拟库，它从开始就完全充分利用了.NET3.5（LINQ表达式树）和C#3.0的新特性（lambda表达式）。<br>它的目标是让模拟以一种自然的方式与现有单元测试进行集成，使它更加简单、直观，以避免开发人员被迫重写测试或高成本的学习测试框架。这使它成为了一个高生产力、类型安全、重构友好的模拟库。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>现在越来越多分层架构使用依赖注入的方式来解耦层与层之间的关系，最为常见的就是业务层和数据层之间的依赖注入，业务层不再强依赖数据层对象，而是依赖数据层对象的接口，在IOC容器里面完成依赖的配置。<br>这种解耦给单元测试带来了极大的便利，使得对业务逻辑的测试可以脱离对数据层的依赖,单元测试的粒度更小,更容易排查出问题所在。</p><span id="more"></span><h2 id="开始Moq"><a href="#开始Moq" class="headerlink" title="开始Moq"></a>开始Moq</h2><h3 id="安装Moq"><a href="#安装Moq" class="headerlink" title="安装Moq"></a>安装Moq</h3><p>Moq安装非常简单,在Nuget里面搜索moq,第一个结果便是moq框架,点击安装即可。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>数据层</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProductRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Product product</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">string</span> id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Product <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> Id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实体</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Img &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ProductTest</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Mock&lt;IProductRepository&gt; _repository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> _mockRepository = <span class="keyword">new</span> MockRepository(MockBehavior.Default);</span><br><span class="line">        _repository = _mockRepository.Create&lt;IProductRepository&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试方法</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShouldReturn_A_Product_If_QueryBy_Id_With_Valid_Parameter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _repository.Setup(x=&gt;x.Get(It.Is&lt;<span class="built_in">string</span>&gt;(x=&gt;x == <span class="string">&quot;1911112346550025&quot;</span>)))</span><br><span class="line">            .Returns(<span class="keyword">new</span> Product()&#123;Name = <span class="string">&quot;双十一&quot;</span>&#125;)</span><br><span class="line">            .Verifiable();</span><br><span class="line">        <span class="keyword">var</span> product = _repository.Object.Get(<span class="string">&quot;1911112346550025&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Assert.NotNull(product);</span><br><span class="line">        Assert.True(product.Name.Equals(<span class="string">&quot;双十一&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Setup</code>是设定预期值，<code>Id</code>等于<code>1911112346550025</code>就返回<code>Name</code>为<code>双十一</code>的<code>Product</code>对象。</p><ul><li>运行结果</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MoqSamples.ProductTest.ShouldReturn_A_Product_If_QueryBy_Id_With_Valid_Parameter</span><br><span class="line"> 源: ProductTest.cs 行 <span class="number">18</span></span><br><span class="line"> 持续时间: <span class="number">135</span> 毫秒</span><br></pre></td></tr></table></figure><ul><li>MockBehavior有三种行为</li></ul><p>1、<strong>Default</strong>&amp;emsp;mock行为默认值，就是Loose值<br>2、<strong>Strict</strong>&amp;emsp;&amp;emsp;从不抛出异常，如果必要会返回默认值（引用类型为null，值类型为0,或枚举和数组为空）<br>3、<strong>Loose</strong>&amp;emsp;&amp;emsp;对象没有合适的设置时，总是抛出异常</p><p>如果把<code>Get</code>请求的值<code>1911112346550025</code>改为<code>1911112346550000</code>，测试结果就会报错。  </p><p>设置为<code>MockBehavior.Strict</code>  </p><ul><li>运行结果</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MoqSamples.ProductTest.ShouldReturn_A_Product_If_QueryBy_Id_With_Valid_Parameter</span><br><span class="line"> 源: ProductTest.cs 行 <span class="number">18</span></span><br><span class="line"> 持续时间: <span class="number">137</span> 毫秒</span><br><span class="line"></span><br><span class="line">消息:</span><br><span class="line">  Moq.MockException : IProductRepository.Get(<span class="string">&quot;1911112346550000&quot;</span>) invocation failed <span class="keyword">with</span> mock behavior Strict.</span><br><span class="line">  All invocations <span class="keyword">on</span> the mock must have a corresponding setup.</span><br><span class="line">堆栈跟踪:</span><br><span class="line">  FailForStrictMock.Handle(Invocation invocation, Mock mock)</span><br><span class="line">  IInterceptor.Intercept(Invocation invocation)</span><br><span class="line">  Interceptor.Intercept(IInvocation invocation)</span><br><span class="line">  AbstractInvocation.Proceed()</span><br><span class="line">  IProductRepositoryProxy.Get(String Id)</span><br><span class="line">  ProductTest.ShouldReturn_A_Product_If_QueryBy_Id_With_Valid_Parameter() 行 <span class="number">23</span></span><br></pre></td></tr></table></figure><p>设置为<code>MockBehavior.Default</code>或者<code>MockBehavior.Loose</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MoqSamples.ProductTest.ShouldReturn_A_Product_If_QueryBy_Id_With_Valid_Parameter</span><br><span class="line"> 源: ProductTest.cs 行 <span class="number">18</span></span><br><span class="line"> 持续时间: <span class="number">126</span> 毫秒</span><br><span class="line"></span><br><span class="line">消息:</span><br><span class="line">  Assert.NotNull() Failure</span><br><span class="line">堆栈跟踪:</span><br><span class="line">  ProductTest.ShouldReturn_A_Product_If_QueryBy_Id_With_Valid_Parameter() 行 <span class="number">25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>不同的行为方式，返回的结果也不同，今天Moq暂时先记到这，下回再聊聊Moq其他功能</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> Moq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> Moq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记学习Moq框架（二）</title>
      <link href="/posts/6817f284/"/>
      <url>/posts/6817f284/</url>
      
        <content type="html"><![CDATA[<p><a href="../58011e5c/">记学习Moq框架（一）</a>，上一篇简单讲解了用法，这篇深入讲解用法</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Product product</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task <span class="title">AddAsync</span>(<span class="params">Product product</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">string</span> id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task <span class="title">DeleteAsync</span>(<span class="params"><span class="built_in">string</span> id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Product <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task&lt;Product&gt; <span class="title">GetAsync</span>(<span class="params"><span class="built_in">string</span> id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mock方法调用"><a href="#Mock方法调用" class="headerlink" title="Mock方法调用"></a>Mock方法调用</h2><h3 id="单次方法调用"><a href="#单次方法调用" class="headerlink" title="单次方法调用"></a>单次方法调用</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;()));</span><br></pre></td></tr></table></figure><p>同时也支持异步方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.DeleteAsync(It.IsAny&lt;<span class="built_in">string</span>&gt;()));</span><br></pre></td></tr></table></figure><h3 id="多次方法调用"><a href="#多次方法调用" class="headerlink" title="多次方法调用"></a>多次方法调用</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mock.SetupSequence(p =&gt; p.Get(It.IsAny&lt;<span class="built_in">string</span>&gt;())</span><br><span class="line">    .Returns(<span class="keyword">new</span> Product()&#123;Name = <span class="string">&quot;618狂欢&quot;</span>&#125;)</span><br><span class="line">    .Returns(<span class="keyword">new</span> Product()&#123;Name = <span class="string">&quot;双十一&quot;</span>&#125;)</span><br><span class="line">    .Returns(<span class="keyword">new</span> Product()&#123;Name = <span class="string">&quot;年货节&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>也可以调用没有返回值的方法<code>void Delete(string id)</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mock.SetupSequence(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;())</span><br><span class="line">    .Pass()</span><br><span class="line">    .Pass()</span><br><span class="line">    .Pass();</span><br></pre></td></tr></table></figure><h3 id="序列调用"><a href="#序列调用" class="headerlink" title="序列调用"></a>序列调用</h3><p>由于多个方法按照序列调用，最好采用<code>MockBehavior.Strict</code>严格模式</p><ul><li>同个对象，同个方法</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt;(MockBehavior.Strict);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sequence = <span class="keyword">new</span> MockSequence();</span><br><span class="line"></span><br><span class="line">mock.InSequence(sequence).Setup(p =&gt; p.Delete(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">mock.InSequence(sequence).Setup(p =&gt; p.Delete(<span class="string">&quot;2&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>同个对象，不同方法</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt;(MockBehavior.Strict);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sequence = <span class="keyword">new</span> MockSequence();</span><br><span class="line"></span><br><span class="line">mock.InSequence(sequence).Setup(p =&gt; p.DoWithString(It.IsAny&lt;<span class="built_in">string</span>&gt;()));</span><br><span class="line">mock.InSequence(sequence).Setup(p =&gt; p.DoWithInteger(It.IsAny&lt;<span class="built_in">int</span>&gt;()));</span><br></pre></td></tr></table></figure><ul><li>不同对象</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mockFirst = <span class="keyword">new</span> Mock&lt;IProductService&gt;(MockBehavior.Strict);</span><br><span class="line"><span class="keyword">var</span> mockSecond = <span class="keyword">new</span> Mock&lt;IProductRepository&gt;(MockBehavior.Strict);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sequence = <span class="keyword">new</span> MockSequence();</span><br><span class="line"></span><br><span class="line">mockFirst.InSequence(sequence).Setup(p =&gt; p.Delete(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">mockSecond.InSequence(sequence).Setup(p =&gt; p.Get(<span class="string">&quot;1&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="Mock方法参数"><a href="#Mock方法参数" class="headerlink" title="Mock方法参数"></a>Mock方法参数</h2><p>指定对象方法的参数类型</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Get(It.IsAny&lt;<span class="built_in">string</span>&gt;()));</span><br></pre></td></tr></table></figure><p>指定对象方法的参数值</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Get(<span class="string">&quot;1911112346550025&quot;</span>));</span><br></pre></td></tr></table></figure><p>正则表达式匹配<code>It.IsRegex</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Get(It.IsRegex(<span class="string">&quot;[A-Z_]+&quot;</span>)));</span><br></pre></td></tr></table></figure><p>两数区间<code>It.IsInRange</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.GetById(It.IsInRange(<span class="number">0</span>, <span class="number">100</span>, Moq.Range.Exclusive)));</span><br></pre></td></tr></table></figure><p>指定返回参数类型的表达式<code>It.Is</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Get(It.Is&lt;<span class="built_in">string</span>&gt;(s =&gt; s.StartsWith(<span class="string">&quot;19111&quot;</span>))));</span><br></pre></td></tr></table></figure><h3 id="ref-参数"><a href="#ref-参数" class="headerlink" title="ref 参数"></a>ref 参数</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.DoSomething(<span class="keyword">ref</span> It.Ref&lt;<span class="built_in">string</span>&gt;.IsAny));</span><br></pre></td></tr></table></figure><p>指定引用参数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">value</span> = <span class="string">&quot;This is a test value&quot;</span>;</span><br><span class="line">mock.Setup(p =&gt; p.DoSomething(<span class="keyword">ref</span> <span class="keyword">value</span>));</span><br></pre></td></tr></table></figure><p>调用方法后执行回调方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">DoSomethingCallback</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newValue = <span class="string">&quot;This is the new referenced value&quot;</span>;</span><br><span class="line">mock.Setup(p =&gt; p.DoSomething(It.Ref&lt;<span class="built_in">string</span>&gt;.IsAny))</span><br><span class="line">    .Callback(<span class="keyword">new</span> DoSomethingCallback((<span class="keyword">ref</span> <span class="built_in">string</span> <span class="keyword">value</span>) =&gt; <span class="keyword">value</span> = newValue));</span><br></pre></td></tr></table></figure><h3 id="out-参数"><a href="#out-参数" class="headerlink" title="out 参数"></a>out 参数</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">value</span> = <span class="string">&quot;This is the expected out value&quot;</span>;</span><br><span class="line">mock.Setup(p =&gt; p.DoSomething(<span class="keyword">out</span> <span class="keyword">value</span>));</span><br></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"><span class="built_in">string</span> operation = <span class="string">&quot;DEFAULT_OPERATION&quot;</span></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call with custom value</span></span><br><span class="line">service.DoSomething(<span class="string">&quot;MY_CUSTOM_OPERATION&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// call with default value</span></span><br><span class="line">service.DoSomething();</span><br></pre></td></tr></table></figure><p>异步方法调用通常会需要<code>CancellationToken</code>作为入参，给一个默认值<code>default</code>即可</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.DoSomethingAsync(It.IsAny&lt;<span class="built_in">string</span>&gt;(), It.IsAny&lt;CancellationToken&gt;()));</span><br><span class="line">mock.Setup(p =&gt; p.DoSomethingAsync(It.IsAny&lt;<span class="built_in">string</span>&gt;(), <span class="literal">default</span>));</span><br></pre></td></tr></table></figure><h2 id="Mock方法返回"><a href="#Mock方法返回" class="headerlink" title="Mock方法返回"></a>Mock方法返回</h2><p>异步方法返回</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.GetValueAsync()).Returns(Task.FromResult(<span class="number">123</span>));</span><br><span class="line">mock.Setup(p =&gt; p.GetValueAsync()).ReturnsAsync(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>通过委托方法执行返回</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Add(It.IsAny&lt;<span class="built_in">int</span>&gt;(), It.IsAny&lt;<span class="built_in">int</span>&gt;())</span><br><span class="line">    .Returns((<span class="built_in">int</span> first, <span class="built_in">int</span> second) =&gt; first + second);</span><br><span class="line"></span><br><span class="line">mock.Setup(p =&gt; p.AddAsync(It.IsAny&lt;<span class="built_in">int</span>&gt;(), It.IsAny&lt;<span class="built_in">int</span>&gt;())</span><br><span class="line">    .ReturnsAsync((<span class="built_in">int</span> first, <span class="built_in">int</span> second) =&gt; first + second);</span><br></pre></td></tr></table></figure><p>返回null</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;Product&gt;();</span><br><span class="line">mock.Setup(p =&gt; p.Img).Returns(<span class="literal">null</span> <span class="keyword">as</span> <span class="built_in">string</span>);</span><br></pre></td></tr></table></figure><h2 id="Mock方法回调"><a href="#Mock方法回调" class="headerlink" title="Mock方法回调"></a>Mock方法回调</h2><p>可以在方法后面链接Callback，来触发自定义的代码</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt;();</span><br><span class="line">mock.Setup(p =&gt; p.Delete()).Callback(() =&gt; TestContext.Progress.Writeline(<span class="string">&quot;Here&quot;</span>));</span><br></pre></td></tr></table></figure><p>无入参的Action</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;())).Callback(() =&gt; TestContext.Progress.Writeline(<span class="string">$&quot;Incoming call&quot;</span>));</span><br></pre></td></tr></table></figure><p>也可以带入方法参数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;())).Callback((<span class="built_in">string</span> id) =&gt; TestContext.Progress.Writeline(<span class="string">$&quot;Incoming call: <span class="subst">&#123;id&#125;</span>&quot;</span>));</span><br></pre></td></tr></table></figure><p>属性方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;Product&gt;();</span><br><span class="line"></span><br><span class="line">mock.SetupGet(p =&gt; p.Img)</span><br><span class="line">    .Callback(() =&gt; TestContext.Progress.Writeline(<span class="string">&quot;Getter invoked&quot;</span>));</span><br><span class="line"></span><br><span class="line">mock.SetupSet(p =&gt; p.Img = It.IsAny&lt;<span class="built_in">string</span>&gt;())</span><br><span class="line">    .Callback((<span class="built_in">string</span> img) =&gt; TestContext.Progress.Writeline(<span class="string">$&quot;Setter received value: <span class="subst">&#123;img&#125;</span>&quot;</span>));</span><br></pre></td></tr></table></figure><p>中途变更状态值</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> <span class="keyword">value</span> = <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt;();</span><br><span class="line"></span><br><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;()))</span><br><span class="line">    .Callback((<span class="built_in">string</span> id) =&gt; <span class="keyword">value</span> = id);</span><br></pre></td></tr></table></figure><p>特定条件</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> counter = <span class="number">0</span>;</span><br><span class="line">mock.Setup(p =&gt; p.DoSomething()).Callback(() =&gt; &#123; <span class="keyword">if</span> (counter++ &gt;= <span class="number">5</span>) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(); &#125;);</span><br></pre></td></tr></table></figure><p>链接多个委托</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.DoSomething(It.IsAny&lt;<span class="built_in">int</span>&gt;())).Callback((<span class="built_in">int</span> <span class="keyword">value</span>) =&gt; </span><br><span class="line">&#123;</span><br><span class="line">    DoSomething();</span><br><span class="line">    DoSomethingWithValue(<span class="keyword">value</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt;();</span><br><span class="line"></span><br><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;()))</span><br><span class="line">    .Callback(() =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> Exception());</span><br></pre></td></tr></table></figure><p><code>Throws</code>语法糖</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;()))</span><br><span class="line">    .Throws(<span class="keyword">new</span> Exception(<span class="string">&quot;My custom exception&quot;</span>));</span><br><span class="line"></span><br><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;()))</span><br><span class="line">    .ThrowsAsync(<span class="keyword">new</span> Exception(<span class="string">&quot;My custom exception&quot;</span>));  </span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line">mock.Setup(p =&gt; p.Delete((It.IsAny&lt;<span class="built_in">string</span>&gt;()))</span><br><span class="line">    .Throws&lt;Exception&gt;();</span><br></pre></td></tr></table></figure><p>序列调用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mock.SetupSequence(p =&gt; p.GetSomeValue())</span><br><span class="line">    .Returns(<span class="number">1</span>)</span><br><span class="line">    .Throws&lt;Exception&gt;();</span><br><span class="line"></span><br><span class="line">mock.SetupSequence(p =&gt; p.GetSomeValueAsync())</span><br><span class="line">    .ReturnsAsync(<span class="number">1</span>)</span><br><span class="line">    .ThrowsAsync(<span class="keyword">new</span> Exception());</span><br></pre></td></tr></table></figure><h2 id="Mock对象属性"><a href="#Mock对象属性" class="headerlink" title="Mock对象属性"></a>Mock对象属性</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;Product&gt;();</span><br><span class="line">mock.Setup(p =&gt; p.Id).Returns(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">mock.Setup(p =&gt; p.Name).Returns(<span class="string">&quot;Bar&quot;</span>);</span><br><span class="line">mock.Setup(p =&gt; p.Img).Returns(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以对属性的Get、Set方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.SetupGet(p =&gt; p.Name) ... ;</span><br><span class="line">mock.SetupSet(p =&gt; p.Name = It.IsAny&lt;<span class="built_in">string</span>&gt;()) ... ;</span><br></pre></td></tr></table></figure><p>属性链返回值</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;HttpContextBase&gt;();</span><br><span class="line">mock.SetupGet(p =&gt; p.Response.Request.UserAgent).Returns(<span class="string">&quot;My Browser&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Mock检查"><a href="#Mock检查" class="headerlink" title="Mock检查"></a>Mock检查</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Delete(It.IsAny&lt;<span class="built_in">string</span>&gt;())).Verifiable();</span><br></pre></td></tr></table></figure><p>全部检查</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.VerifyAll();</span><br></pre></td></tr></table></figure><p>自定义检查失败消息</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mock.Setup(p =&gt; p.Send(It.IsAny&lt;<span class="built_in">string</span>&gt;())).Verifiable(<span class="string">&quot;Send was never invoked&quot;</span>);</span><br></pre></td></tr></table></figure><p>自选检查mock</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mock.Verify(mock, anotherMock, yetAnotherMock);</span><br></pre></td></tr></table></figure><h2 id="Mock仓库"><a href="#Mock仓库" class="headerlink" title="Mock仓库"></a>Mock仓库</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mockRepository = <span class="keyword">new</span> MockRepository(MockBehavior.Strict) &#123; DefaultValue = DefaultValue.Mock &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _repository = repository.Create&lt;IProductRepository&gt;();</span><br><span class="line"><span class="keyword">var</span> _service = repository.Create&lt;IProductService&gt;(MockBehavior.Loose);</span><br></pre></td></tr></table></figure><h2 id="Mock深层对象"><a href="#Mock深层对象" class="headerlink" title="Mock深层对象"></a>Mock深层对象</h2><p>有时候想直接获得深层对象的mock，<code>Mock.Get</code>对象属性这种方法非常有用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = Mock.Get(logger);</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;HttpContextBase&gt;();</span><br><span class="line"><span class="keyword">var</span> context = mock.Object;</span><br><span class="line"><span class="keyword">var</span> request = Mock.Get(context.Request);</span><br></pre></td></tr></table></figure><h2 id="Mock自定义"><a href="#Mock自定义" class="headerlink" title="Mock自定义"></a>Mock自定义</h2><p>默认空</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt; &#123; DefaultValue = DefaultValue.Empty &#125;;</span><br></pre></td></tr></table></figure><p>模拟数据</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt; &#123; DefaultValue = DefaultValue.Mock &#125;;</span><br></pre></td></tr></table></figure><p>自定义默认值提供器</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyCustomDefaultValueProvider</span> : <span class="title">DefaultValueProvider</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;IProductService&gt; &#123; DefaultValueProvider = <span class="keyword">new</span> MyCustomDefaultValueProvider() &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> .NET </category>
          
          <category> Moq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> Moq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Github+Docker+Hexo搭建个人博客（二）</title>
      <link href="/posts/c4d294a/"/>
      <url>/posts/c4d294a/</url>
      
        <content type="html"><![CDATA[<h2 id="上篇文章回顾"><a href="#上篇文章回顾" class="headerlink" title="上篇文章回顾"></a>上篇文章回顾</h2><p><a href="../3c5bc592/">利用github+docker+hexo搭建个人博客（一）</a></p><h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><p><strong>生成docker镜像</strong><br><em>Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build hexo:latest .</span><br></pre></td></tr></table></figure><p><code>docker build</code>构建镜像指令<code>hexo:latest</code>镜像名和tag<code>.</code>是在当前路径下作为根路径查找Dockerfile文件，生成docker镜像</p><span id="more"></span><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  <span class="number">117.8</span>kB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">17</span> : FROM alpine:latest</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">961769676411</span></span><br><span class="line">Step <span class="number">2</span>/<span class="number">17</span> : LABEL maintainer=<span class="string">&quot;chobon &lt;chobon@aliyun.com&gt;&quot;</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">2033655</span>adf1e</span><br><span class="line">Step <span class="number">3</span>/<span class="number">17</span> : ARG UID=<span class="number">1000</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; fb0ed31a6f82</span><br><span class="line">Step <span class="number">4</span>/<span class="number">17</span> : ARG GID=<span class="number">1000</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">6</span>c34b75672d7</span><br><span class="line">Step <span class="number">5</span>/<span class="number">17</span> : ARG PORT=<span class="number">4000</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; effb42900db2</span><br><span class="line">Step <span class="number">6</span>/<span class="number">17</span> : EXPOSE <span class="variable">$</span>&#123;PORT&#125;</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">8</span>b6d4a5aec57</span><br><span class="line">Step <span class="number">7</span>/<span class="number">17</span> : RUN sed <span class="literal">-i</span> <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">389</span>a3d191c40</span><br><span class="line">Step <span class="number">8</span>/<span class="number">17</span> : RUN apk add <span class="literal">--no-cache</span> shadow sudo  &amp;&amp;     <span class="keyword">if</span> [ -<span class="type">z</span> <span class="string">&quot;`getent group <span class="variable">$GID</span>`&quot; ]; then       addgroup -S -g <span class="variable">$GID</span> hexo;     else       groupmod -n hexo `getent group <span class="variable">$GID</span> | cut -d: -f1`;     fi &amp;&amp;     if [ -z &quot;</span>`g<span class="type">etent</span> <span class="type">passwd</span> <span class="variable">$UID</span>`&quot;</span><br><span class="line">]; then       adduser <span class="literal">-S</span> <span class="literal">-u</span> <span class="variable">$UID</span> <span class="literal">-G</span> hexo <span class="literal">-s</span> /bin/sh hexo;     <span class="keyword">else</span>       usermod <span class="literal">-l</span> hexo <span class="literal">-g</span> <span class="variable">$GID</span> <span class="literal">-d</span> /home/hexo <span class="literal">-m</span> `getent passwd <span class="variable">$UID</span> | cut <span class="literal">-d</span>: <span class="literal">-f1</span>`;     fi &amp;&amp;     <span class="built_in">echo</span> <span class="string">&quot;hexo ALL=(root) NOPASSWD:ALL&quot;</span> &gt; /etc/sudoers.d/hexo &amp;&amp;     chmod <span class="number">0440</span> /etc/sudoers.d/hexo</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; faeb2f247493</span><br><span class="line">Step <span class="number">9</span>/<span class="number">17</span> : RUN apk <span class="literal">--update</span> <span class="literal">--no-progress</span> add git nodejs npm openssh &amp;&amp; <span class="built_in">rm</span> <span class="literal">-rf</span> /var/cache/apk/* &amp;&amp; npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; cd14f3c867ef</span><br><span class="line">Step <span class="number">10</span>/<span class="number">17</span> : WORKDIR /home/hexo</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; e63b9f65e6f1</span><br><span class="line">Step <span class="number">11</span>/<span class="number">17</span> : RUN hexo init . &amp;&amp; npm install <span class="literal">--save</span> hexo<span class="literal">-deployer-git</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">148818695354</span></span><br><span class="line">Step <span class="number">12</span>/<span class="number">17</span> : VOLUME [<span class="string">&quot;/home/hexo/source&quot;</span>,<span class="string">&quot;/home/hexo/themes&quot;</span>,<span class="string">&quot;/home/hexo/.ssh&quot;</span>] <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">95132</span>d8d84ee</span><br><span class="line">Step <span class="number">13</span>/<span class="number">17</span> : RUN chown <span class="literal">-R</span> hexo .</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">8</span>e4e876d3013</span><br><span class="line">Step <span class="number">14</span>/<span class="number">17</span> : USER hexo</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; bd85dad4c30a</span><br><span class="line">Step <span class="number">15</span>/<span class="number">17</span> : <span class="built_in">COPY</span> entrypoint.sh /entrypoint.sh</span><br><span class="line"> <span class="literal">---</span>&gt; d859e32e3a1a</span><br><span class="line">Step <span class="number">16</span>/<span class="number">17</span> : ENTRYPOINT [ <span class="string">&quot;/entrypoint.sh&quot;</span> ]</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">91217964</span>b7e3</span><br><span class="line">Removing intermediate container <span class="number">91217964</span>b7e3</span><br><span class="line"> <span class="literal">---</span>&gt; bc499c026da6</span><br><span class="line">Step <span class="number">17</span>/<span class="number">17</span> : CMD [<span class="string">&quot;/bin/sh&quot;</span>]</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> ee43d3deae3b</span><br><span class="line">Removing intermediate container ee43d3deae3b</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">038588</span>b225ed</span><br><span class="line">Successfully built <span class="number">038588</span>b225ed</span><br><span class="line">Successfully tagged hexo:latest</span><br></pre></td></tr></table></figure><p><strong>查看docker镜像</strong><br>镜像构建好了可以用<code>docker images</code>查看下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ docker images</span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hexo                       latest              <span class="number">038588</span>b225ed        <span class="number">5</span> minutes ago       <span class="number">144</span>MB</span><br></pre></td></tr></table></figure><p><strong>启动docker容器</strong><br><code>docker run</code> 启动容器指令 <code>-d</code> 后台运行 <code>-p 80:4000</code> 把容器端口4000映射到宿主端口80上  <code>-v</code>参数是把宿主的数据卷挂载载容器里 <code>--name hexo</code> 为容器创建个名字hexo <code>hexo:latest</code> 选择镜像名字和tag</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ docker <span class="keyword">run</span><span class="language-bash"> -d -p 80:4000 -v /d/docker/hexo/source:/home/hexo/source -v /d/docker/hexo/themes:/home/hexo/themes -v /d/docker/hexo/_config.yml:/home/hexo/_config.yml -v /d/docker/hexo/ssh:/home/hexo/.ssh --name hexo hexo:latest s</span></span><br><span class="line">b6f814686c5066ac71b427d0a6768658a0609641113b4dcdcc9e40e01aedc13d</span><br></pre></td></tr></table></figure><p><strong>查看docker容器</strong><br><code>docker ps</code> 查看当前运行的容器，加上<code>-a</code>后可以查看所有容器<br><code>docker stop $CONTAINER ID</code> 或者 <code>docker stop $CONTAINER NAME</code> 停止容器<br><code>docker rm $CONTAINER ID</code> 或者 <code>docker stop $CONTAINER NAME</code> 删除容器  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ docker <span class="built_in">ps</span> <span class="literal">-a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line"><span class="number">956474737</span>f35        b3028476e4d5        <span class="string">&quot;/entrypoint.sh serv…&quot;</span>   <span class="number">5</span> minutes ago       Up <span class="number">5</span> minutes       <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">4000</span>/tcp   hexo</span><br></pre></td></tr></table></figure><h2 id="Docker进阶"><a href="#Docker进阶" class="headerlink" title="Docker进阶"></a>Docker进阶</h2><p><strong>采用docker-compose编排</strong><br><em>docker-compose优势</em></p><ul><li>每次操作都要输入指令和一堆参数，经常容易输错</li><li>启动容器只能一个一个启动，不能快速简单的启动</li></ul><h3 id="Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）"><a href="#Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）" class="headerlink" title="Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）"></a><a href="https://docs.docker.com/compose/reference/build/">Docker-Compose</a>项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）</h3><p>这里简单介绍下docker-compose的语法，想了解更多的可以戳<a href="https://docs.docker.com/compose/">这里</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="literal">-compose</span> 命令：</span><br><span class="line">    介绍：</span><br><span class="line">        <span class="number">1</span>、docker<span class="literal">-compose</span> 命令的执行都必须指定或者在当前目录下存在 compose 文件, 且输出的内容都是这个 compose.yml 文件定义的集群内的信息</span><br><span class="line">        <span class="number">2</span>、每个集群中可以拥有多个 services, services 由 compose.yml 的 services 定义</span><br><span class="line"></span><br><span class="line">    选项：</span><br><span class="line">        <span class="operator">-f</span>      指定 compose 文件路径(可以指定多个)</span><br><span class="line"></span><br><span class="line">    子命令：</span><br><span class="line">        create             创建 compose 集群, 但不启动(已废弃, 使用 up <span class="literal">--no-start</span> 代替)</span><br><span class="line">        down               停止或删除容器, 网络, 镜像和数据卷</span><br><span class="line">        exec               运行容器中的命令或者连接容器</span><br><span class="line">        help               查看帮助信息</span><br><span class="line">        images             列出 compose 集群所用的镜像</span><br><span class="line">        <span class="built_in">kill</span>               <span class="built_in">kill</span> 掉 compose 集群</span><br><span class="line">        logs               获取 compose 集群日志</span><br><span class="line">        pause              暂停 compose 集群</span><br><span class="line">        <span class="built_in">ps</span>                 列出正在运行的容器</span><br><span class="line">        pull               拉取 compose.yml 文件中定义的所有 docker 镜像</span><br><span class="line">        push               上传 compose.yml 文件中定义的所有 docker 镜像</span><br><span class="line">        restart            重启 compose 集群</span><br><span class="line">        <span class="built_in">rm</span>                 删除一个停止的容器或者 compose 集群</span><br><span class="line">        run                和 exec 相同</span><br><span class="line">        scale              更改 compose 集群内指定的 services 的副本数量</span><br><span class="line">        <span class="built_in">start</span>              启动 compose 集群</span><br><span class="line">        stop               停止 compose 集群</span><br><span class="line">        top                显示 compose 集群中运行的进程及其状态</span><br><span class="line">        unpause            恢复被暂停的 compose 集群</span><br><span class="line">        up                 创建并启动一个 compose 集群</span><br><span class="line">        version            输出 compose 版本</span><br></pre></td></tr></table></figure><p>用于<code>server</code>的docker-compose</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.7&quot;</span></span><br><span class="line">services:</span><br><span class="line">  hexo<span class="literal">-server</span>:</span><br><span class="line">    build: ../.</span><br><span class="line">    image: hexo:latest</span><br><span class="line">    container_name: hexo<span class="literal">-server</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;80:4000&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/source:/home/hexo/source&quot;</span></span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/themes:/home/hexo/themes&quot;</span></span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/_config.yml:/home/hexo/_config.yml&quot;</span></span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/ssh:/home/hexo/.ssh&quot;</span></span><br><span class="line">    command: server</span><br></pre></td></tr></table></figure><p>用于<code>deploy</code>的docker-compose</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.7&quot;</span></span><br><span class="line">services:</span><br><span class="line">  hexo<span class="literal">-server</span>:</span><br><span class="line">    build: ../.</span><br><span class="line">    image: hexo:latest</span><br><span class="line">    container_name: hexo<span class="literal">-deploy</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/source:/home/hexo/source&quot;</span></span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/themes:/home/hexo/themes&quot;</span></span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/_config.yml:/home/hexo/_config.yml&quot;</span></span><br><span class="line">      - <span class="string">&quot;/d/docker/hexo/ssh:/home/hexo/.ssh&quot;</span></span><br><span class="line">    command: deploy</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="literal">-compose</span> up <span class="literal">-d</span> <span class="comment">#启动</span></span><br><span class="line">docker<span class="literal">-compose</span> down <span class="comment">#停止</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>整个基于github和docker的个人博客大致讲完了，以上都是亲测可操作。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Docker </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年的1024</title>
      <link href="/posts/b9c512d3/"/>
      <url>/posts/b9c512d3/</url>
      
        <content type="html"><![CDATA[<h2 id="2019年秋，杭州，1024，记"><a href="#2019年秋，杭州，1024，记" class="headerlink" title="2019年秋，杭州，1024，记"></a>2019年秋，杭州，1024，记</h2><ul><li>又是一年的1024，去年的1024还在迷茫中度过，今年的1024在写文章，起码在做积极的事情。</li><li>时间过得有点快呀，转眼间已经工作这么多年，之前都没有静下来想过今后的路，得过且过，可以说过得比较废。</li><li>安逸的日子过得有点久了，现在想想真的是浪费这么多时间，试着去改变，走出舒适区，给自己更多得压力。</li><li>万事开头难，刚开始写文章有点慢，写了删删了写，时间过去大半个小时了，文章才写了三分之一不到。</li><li>给自己点鼓励，每天坚持做下去，好好学习</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Github+Docker+Hexo搭建个人博客（一）</title>
      <link href="/posts/3c5bc592/"/>
      <url>/posts/3c5bc592/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>心血来潮，想要一个地方记录下记录个人博客的搭建过程</p><h3 id="1、GitHub-Pages"><a href="#1、GitHub-Pages" class="headerlink" title="1、GitHub Pages"></a>1、GitHub Pages</h3><p>简单来说<a href="https://pages.github.com/">GitHub Pages</a> 是 Github 免费给开发者提供的一款托管个人网站的产品，现在只能托管静态内容，但是博客就是静态的啊，所以非常适合用来搭博客。</p><h3 id="2、Hexo"><a href="#2、Hexo" class="headerlink" title="2、Hexo"></a>2、Hexo</h3><p><a href="https://hexo.io/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="3、Docker"><a href="#3、Docker" class="headerlink" title="3、Docker"></a>3、Docker</h3><p><a href="https://www.docker.com/">Docker</a> 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="创建博客地址"><a href="#创建博客地址" class="headerlink" title="创建博客地址"></a>创建博客地址</h3><h4 id="创建一个Github-Pages-Repository"><a href="#创建一个Github-Pages-Repository" class="headerlink" title="创建一个Github Pages Repository"></a>创建一个Github Pages Repository</h4><p>Github Pages Repository 跟普通的Repository一样，唯一的区别是名字必须叫做$username.github.io，创建好以后就可以访问这个域名，如果想要通过自己的域名访问也可以，这里就不详细介绍了。</p><h3 id="构建含有Hexo博客的Docker镜像"><a href="#构建含有Hexo博客的Docker镜像" class="headerlink" title="构建含有Hexo博客的Docker镜像"></a>构建含有Hexo博客的Docker镜像</h3><h4 id="1、基础镜像选择alpine"><a href="#1、基础镜像选择alpine" class="headerlink" title="1、基础镜像选择alpine"></a>1、基础镜像选择alpine</h4><p>alpine是一个小巧、安全、简单得linux系统<br><em>Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br></pre></td></tr></table></figure><h4 id="2、安装git和Hexo部署所需的环境"><a href="#2、安装git和Hexo部署所需的环境" class="headerlink" title="2、安装git和Hexo部署所需的环境"></a>2、安装git和Hexo部署所需的环境</h4><ul><li><p>Hexo是基于nodejs开发的，所以需要安装nodejs，alpine的nodejs源里不包含npm，所以还要单独再安装npm</p></li><li><p>提交github采用git+ssh，所以还要安装openssh<br><em>Dockerfile</em></p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk --update --no-progress add git nodejs npm openssh</span></span><br></pre></td></tr></table></figure><h4 id="3、安装Hexo博客"><a href="#3、安装Hexo博客" class="headerlink" title="3、安装Hexo博客"></a>3、安装Hexo博客</h4><p>安装好环境后就可以搭建hexo博客了，安装hexo很简单，只需要一个命令<br><em>nodejs环境</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在Docker容器内命令<br><em>Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><p>安装好hexo还需要创建静态网站，命令 <code>hexo init .</code>是在当前目录生成博客，也可以指定文件夹<code>hexo init &lt;folder&gt;</code><br>在<code>/home</code>下创<code>hexo</code>文件夹<br><em>Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/hexo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> hexo init .</span></span><br></pre></td></tr></table></figure><p>生成好静态网站目录后可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>目录具体作用可以查阅<a href="https://hexo.io/zh-cn/docs/setup">Hexo文档</a>，这里不做说明<br><strong>安装提交github插件</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><strong>挂载外部数据卷</strong><br><code>/home/hexo/source</code>这里是存储文章文件夹<br><code>/home/hexo/themes</code>这里是主题文件夹<br><code>/home/hexo/.ssh</code>这里是存储ssh密钥文件夹<br>发布到github的时候 <strong>ssh</strong> 验证会在用户根目录下的<code>.ssh</code>文件及里查找密钥。因为我在镜像里创建了名为<code>hexo</code>用户，根目录就是<code>/home/hexo</code><br><em>Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/home/hexo/source&quot;</span>,<span class="string">&quot;/home/hexo/themes&quot;</span>,<span class="string">&quot;/home/hexo/.ssh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>因为hexo安装和生成博客都是在<code>root</code>用户权限下操作的，所以需要把<code>\home\hexo</code>文件夹所有人改成<code>hexo</code>用户<br><em>Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R hexo .</span></span><br></pre></td></tr></table></figure><p><strong>shell脚本</strong> 在docker镜像被运行的时候执行<br><em>shell</em></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&#x27;s&#x27;</span> ] || [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&#x27;server&#x27;</span> ]; then</span><br><span class="line">    <span class="built_in">set</span> <span class="literal">--</span> /usr/bin/hexo s <span class="literal">-p</span> <span class="number">4000</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&#x27;d&#x27;</span> ] || [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&#x27;deploy&#x27;</span> ]; then</span><br><span class="line">    <span class="built_in">set</span> <span class="literal">--</span> /usr/bin/hexo cl &amp;&amp; /usr/bin/hexo d <span class="literal">-g</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exec <span class="string">&quot;<span class="variable">$</span>@&quot;</span></span><br></pre></td></tr></table></figure><p><strong>hexo命令说明</strong><br><code>hexo s -p 4000</code> 或 <code>hexo server 4000</code> 启动服务并绑定<code>$port</code><br><code>hexo cl &amp;&amp; hexo d -g</code> 或 <code>hexo clean &amp;&amp; hexo deploy -g</code> 清除静态文件并重新生成发布</p><p><strong>github发布</strong> 地址和权限信息在 <strong>_config.yml</strong> 配置  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:$username/$username.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$username</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">$email</span></span><br></pre></td></tr></table></figure><p>再切换成<code>hexo</code>用户<br><em>Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> hexo</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> entrypoint.sh /entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/entrypoint.sh&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>hexo容器构建好了，下一步就需要运行起来，下一篇文章讲讲docker容器</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Docker </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/posts/77770c79/"/>
      <url>/posts/77770c79/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><h3 id="1、记录平时下学习过程，方便以后复习和查阅"><a href="#1、记录平时下学习过程，方便以后复习和查阅" class="headerlink" title="1、记录平时下学习过程，方便以后复习和查阅"></a>1、记录平时下学习过程，方便以后复习和查阅</h3><h3 id="2、记录心情和心得"><a href="#2、记录心情和心得" class="headerlink" title="2、记录心情和心得"></a>2、记录心情和心得</h3><h3 id="3、记些游记和事情"><a href="#3、记些游记和事情" class="headerlink" title="3、记些游记和事情"></a>3、记些游记和事情</h3>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
